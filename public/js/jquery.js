/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/jquery.js":
/*!********************************!*\
  !*** ./resources/js/jquery.js ***!
  \********************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/*!\n * jQuery JavaScript Library v1.9.1\n * http://jquery.com/\n *\n * Includes Sizzle.js\n * http://sizzlejs.com/\n *\n * Copyright 2005, 2012 jQuery Foundation, Inc. and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n *\n * Date: 2013-2-4\n */\n(function (window, undefined) {\n  // Can't do this because several apps including ASP.NET trace\n  // the stack via arguments.caller.callee and Firefox dies if\n  // you try to trace through \"use strict\" call chains. (#13335)\n  // Support: Firefox 18+\n  //\"use strict\";\n  var // The deferred used on DOM ready\n  readyList,\n      // A central reference to the root jQuery(document)\n  rootjQuery,\n      // Support: IE<9\n  // For `typeof node.method` instead of `node.method !== undefined`\n  core_strundefined = _typeof(undefined),\n      // Use the correct document accordingly with window argument (sandbox)\n  document = window.document,\n      location = window.location,\n      // Map over jQuery in case of overwrite\n  _jQuery = window.jQuery,\n      // Map over the $ in case of overwrite\n  _$ = window.$,\n      // [[Class]] -> type pairs\n  class2type = {},\n      // List of deleted data cache ids, so we can reuse them\n  core_deletedIds = [],\n      core_version = \"1.9.1\",\n      // Save a reference to some core methods\n  core_concat = core_deletedIds.concat,\n      core_push = core_deletedIds.push,\n      core_slice = core_deletedIds.slice,\n      core_indexOf = core_deletedIds.indexOf,\n      core_toString = class2type.toString,\n      core_hasOwn = class2type.hasOwnProperty,\n      core_trim = core_version.trim,\n      // Define a local copy of jQuery\n  jQuery = function jQuery(selector, context) {\n    // The jQuery object is actually just the init constructor 'enhanced'\n    return new jQuery.fn.init(selector, context, rootjQuery);\n  },\n      // Used for matching numbers\n  core_pnum = /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source,\n      // Used for splitting on whitespace\n  core_rnotwhite = /\\S+/g,\n      // Make sure we trim BOM and NBSP (here's looking at you, Safari 5.0 and IE)\n  rtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,\n      // A simple way to check for HTML strings\n  // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n  // Strict HTML recognition (#11290: must start with <)\n  rquickExpr = /^(?:(<[\\w\\W]+>)[^>]*|#([\\w-]*))$/,\n      // Match a standalone tag\n  rsingleTag = /^<(\\w+)\\s*\\/?>(?:<\\/\\1>|)$/,\n      // JSON RegExp\n  rvalidchars = /^[\\],:{}\\s]*$/,\n      rvalidbraces = /(?:^|:|,)(?:\\s*\\[)+/g,\n      rvalidescape = /\\\\(?:[\"\\\\\\/bfnrt]|u[\\da-fA-F]{4})/g,\n      rvalidtokens = /\"[^\"\\\\\\r\\n]*\"|true|false|null|-?(?:\\d+\\.|)\\d+(?:[eE][+-]?\\d+|)/g,\n      // Matches dashed string for camelizing\n  rmsPrefix = /^-ms-/,\n      rdashAlpha = /-([\\da-z])/gi,\n      // Used by jQuery.camelCase as callback to replace()\n  fcamelCase = function fcamelCase(all, letter) {\n    return letter.toUpperCase();\n  },\n      // The ready event handler\n  completed = function completed(event) {\n    // readyState === \"complete\" is good enough for us to call the dom ready in oldIE\n    if (document.addEventListener || event.type === \"load\" || document.readyState === \"complete\") {\n      detach();\n      jQuery.ready();\n    }\n  },\n      // Clean-up method for dom ready events\n  detach = function detach() {\n    if (document.addEventListener) {\n      document.removeEventListener(\"DOMContentLoaded\", completed, false);\n      window.removeEventListener(\"load\", completed, false);\n    } else {\n      document.detachEvent(\"onreadystatechange\", completed);\n      window.detachEvent(\"onload\", completed);\n    }\n  };\n\n  jQuery.fn = jQuery.prototype = {\n    // The current version of jQuery being used\n    jquery: core_version,\n    constructor: jQuery,\n    init: function init(selector, context, rootjQuery) {\n      var match, elem; // HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\n      if (!selector) {\n        return this;\n      } // Handle HTML strings\n\n\n      if (typeof selector === \"string\") {\n        if (selector.charAt(0) === \"<\" && selector.charAt(selector.length - 1) === \">\" && selector.length >= 3) {\n          // Assume that strings that start and end with <> are HTML and skip the regex check\n          match = [null, selector, null];\n        } else {\n          match = rquickExpr.exec(selector);\n        } // Match html or make sure no context is specified for #id\n\n\n        if (match && (match[1] || !context)) {\n          // HANDLE: $(html) -> $(array)\n          if (match[1]) {\n            context = context instanceof jQuery ? context[0] : context; // scripts is true for back-compat\n\n            jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true)); // HANDLE: $(html, props)\n\n            if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {\n              for (match in context) {\n                // Properties of context are called as methods if possible\n                if (jQuery.isFunction(this[match])) {\n                  this[match](context[match]); // ...and otherwise set as attributes\n                } else {\n                  this.attr(match, context[match]);\n                }\n              }\n            }\n\n            return this; // HANDLE: $(#id)\n          } else {\n            elem = document.getElementById(match[2]); // Check parentNode to catch when Blackberry 4.6 returns\n            // nodes that are no longer in the document #6963\n\n            if (elem && elem.parentNode) {\n              // Handle the case where IE and Opera return items\n              // by name instead of ID\n              if (elem.id !== match[2]) {\n                return rootjQuery.find(selector);\n              } // Otherwise, we inject the element directly into the jQuery object\n\n\n              this.length = 1;\n              this[0] = elem;\n            }\n\n            this.context = document;\n            this.selector = selector;\n            return this;\n          } // HANDLE: $(expr, $(...))\n\n        } else if (!context || context.jquery) {\n          return (context || rootjQuery).find(selector); // HANDLE: $(expr, context)\n          // (which is just equivalent to: $(context).find(expr)\n        } else {\n          return this.constructor(context).find(selector);\n        } // HANDLE: $(DOMElement)\n\n      } else if (selector.nodeType) {\n        this.context = this[0] = selector;\n        this.length = 1;\n        return this; // HANDLE: $(function)\n        // Shortcut for document ready\n      } else if (jQuery.isFunction(selector)) {\n        return rootjQuery.ready(selector);\n      }\n\n      if (selector.selector !== undefined) {\n        this.selector = selector.selector;\n        this.context = selector.context;\n      }\n\n      return jQuery.makeArray(selector, this);\n    },\n    // Start with an empty selector\n    selector: \"\",\n    // The default length of a jQuery object is 0\n    length: 0,\n    // The number of elements contained in the matched element set\n    size: function size() {\n      return this.length;\n    },\n    toArray: function toArray() {\n      return core_slice.call(this);\n    },\n    // Get the Nth element in the matched element set OR\n    // Get the whole matched element set as a clean array\n    get: function get(num) {\n      return num == null ? // Return a 'clean' array\n      this.toArray() : // Return just the object\n      num < 0 ? this[this.length + num] : this[num];\n    },\n    // Take an array of elements and push it onto the stack\n    // (returning the new matched element set)\n    pushStack: function pushStack(elems) {\n      // Build a new jQuery matched element set\n      var ret = jQuery.merge(this.constructor(), elems); // Add the old object onto the stack (as a reference)\n\n      ret.prevObject = this;\n      ret.context = this.context; // Return the newly-formed element set\n\n      return ret;\n    },\n    // Execute a callback for every element in the matched set.\n    // (You can seed the arguments with an array of args, but this is\n    // only used internally.)\n    each: function each(callback, args) {\n      return jQuery.each(this, callback, args);\n    },\n    ready: function ready(fn) {\n      // Add the callback\n      jQuery.ready.promise().done(fn);\n      return this;\n    },\n    slice: function slice() {\n      return this.pushStack(core_slice.apply(this, arguments));\n    },\n    first: function first() {\n      return this.eq(0);\n    },\n    last: function last() {\n      return this.eq(-1);\n    },\n    eq: function eq(i) {\n      var len = this.length,\n          j = +i + (i < 0 ? len : 0);\n      return this.pushStack(j >= 0 && j < len ? [this[j]] : []);\n    },\n    map: function map(callback) {\n      return this.pushStack(jQuery.map(this, function (elem, i) {\n        return callback.call(elem, i, elem);\n      }));\n    },\n    end: function end() {\n      return this.prevObject || this.constructor(null);\n    },\n    // For internal use only.\n    // Behaves like an Array's method, not like a jQuery method.\n    push: core_push,\n    sort: [].sort,\n    splice: [].splice\n  }; // Give the init function the jQuery prototype for later instantiation\n\n  jQuery.fn.init.prototype = jQuery.fn;\n\n  jQuery.extend = jQuery.fn.extend = function () {\n    var src,\n        copyIsArray,\n        copy,\n        name,\n        options,\n        clone,\n        target = arguments[0] || {},\n        i = 1,\n        length = arguments.length,\n        deep = false; // Handle a deep copy situation\n\n    if (typeof target === \"boolean\") {\n      deep = target;\n      target = arguments[1] || {}; // skip the boolean and the target\n\n      i = 2;\n    } // Handle case when target is a string or something (possible in deep copy)\n\n\n    if (_typeof(target) !== \"object\" && !jQuery.isFunction(target)) {\n      target = {};\n    } // extend jQuery itself if only one argument is passed\n\n\n    if (length === i) {\n      target = this;\n      --i;\n    }\n\n    for (; i < length; i++) {\n      // Only deal with non-null/undefined values\n      if ((options = arguments[i]) != null) {\n        // Extend the base object\n        for (name in options) {\n          src = target[name];\n          copy = options[name]; // Prevent never-ending loop\n\n          if (target === copy) {\n            continue;\n          } // Recurse if we're merging plain objects or arrays\n\n\n          if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {\n            if (copyIsArray) {\n              copyIsArray = false;\n              clone = src && jQuery.isArray(src) ? src : [];\n            } else {\n              clone = src && jQuery.isPlainObject(src) ? src : {};\n            } // Never move original objects, clone them\n\n\n            target[name] = jQuery.extend(deep, clone, copy); // Don't bring in undefined values\n          } else if (copy !== undefined) {\n            target[name] = copy;\n          }\n        }\n      }\n    } // Return the modified object\n\n\n    return target;\n  };\n\n  jQuery.extend({\n    noConflict: function noConflict(deep) {\n      if (window.$ === jQuery) {\n        window.$ = _$;\n      }\n\n      if (deep && window.jQuery === jQuery) {\n        window.jQuery = _jQuery;\n      }\n\n      return jQuery;\n    },\n    // Is the DOM ready to be used? Set to true once it occurs.\n    isReady: false,\n    // A counter to track how many items to wait for before\n    // the ready event fires. See #6781\n    readyWait: 1,\n    // Hold (or release) the ready event\n    holdReady: function holdReady(hold) {\n      if (hold) {\n        jQuery.readyWait++;\n      } else {\n        jQuery.ready(true);\n      }\n    },\n    // Handle when the DOM is ready\n    ready: function ready(wait) {\n      // Abort if there are pending holds or we're already ready\n      if (wait === true ? --jQuery.readyWait : jQuery.isReady) {\n        return;\n      } // Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).\n\n\n      if (!document.body) {\n        return setTimeout(jQuery.ready);\n      } // Remember that the DOM is ready\n\n\n      jQuery.isReady = true; // If a normal DOM Ready event fired, decrement, and wait if need be\n\n      if (wait !== true && --jQuery.readyWait > 0) {\n        return;\n      } // If there are functions bound, to execute\n\n\n      readyList.resolveWith(document, [jQuery]); // Trigger any bound ready events\n\n      if (jQuery.fn.trigger) {\n        jQuery(document).trigger(\"ready\").off(\"ready\");\n      }\n    },\n    // See test/unit/core.js for details concerning isFunction.\n    // Since version 1.3, DOM methods and functions like alert\n    // aren't supported. They return false on IE (#2968).\n    isFunction: function isFunction(obj) {\n      return jQuery.type(obj) === \"function\";\n    },\n    isArray: Array.isArray || function (obj) {\n      return jQuery.type(obj) === \"array\";\n    },\n    isWindow: function isWindow(obj) {\n      return obj != null && obj == obj.window;\n    },\n    isNumeric: function isNumeric(obj) {\n      return !isNaN(parseFloat(obj)) && isFinite(obj);\n    },\n    type: function type(obj) {\n      if (obj == null) {\n        return String(obj);\n      }\n\n      return _typeof(obj) === \"object\" || typeof obj === \"function\" ? class2type[core_toString.call(obj)] || \"object\" : _typeof(obj);\n    },\n    isPlainObject: function isPlainObject(obj) {\n      // Must be an Object.\n      // Because of IE, we also have to check the presence of the constructor property.\n      // Make sure that DOM nodes and window objects don't pass through, as well\n      if (!obj || jQuery.type(obj) !== \"object\" || obj.nodeType || jQuery.isWindow(obj)) {\n        return false;\n      }\n\n      try {\n        // Not own constructor property must be Object\n        if (obj.constructor && !core_hasOwn.call(obj, \"constructor\") && !core_hasOwn.call(obj.constructor.prototype, \"isPrototypeOf\")) {\n          return false;\n        }\n      } catch (e) {\n        // IE8,9 Will throw exceptions on certain host objects #9897\n        return false;\n      } // Own properties are enumerated firstly, so to speed up,\n      // if last one is own, then all properties are own.\n\n\n      var key;\n\n      for (key in obj) {}\n\n      return key === undefined || core_hasOwn.call(obj, key);\n    },\n    isEmptyObject: function isEmptyObject(obj) {\n      var name;\n\n      for (name in obj) {\n        return false;\n      }\n\n      return true;\n    },\n    error: function error(msg) {\n      throw new Error(msg);\n    },\n    // data: string of html\n    // context (optional): If specified, the fragment will be created in this context, defaults to document\n    // keepScripts (optional): If true, will include scripts passed in the html string\n    parseHTML: function parseHTML(data, context, keepScripts) {\n      if (!data || typeof data !== \"string\") {\n        return null;\n      }\n\n      if (typeof context === \"boolean\") {\n        keepScripts = context;\n        context = false;\n      }\n\n      context = context || document;\n      var parsed = rsingleTag.exec(data),\n          scripts = !keepScripts && []; // Single tag\n\n      if (parsed) {\n        return [context.createElement(parsed[1])];\n      }\n\n      parsed = jQuery.buildFragment([data], context, scripts);\n\n      if (scripts) {\n        jQuery(scripts).remove();\n      }\n\n      return jQuery.merge([], parsed.childNodes);\n    },\n    parseJSON: function parseJSON(data) {\n      // Attempt to parse using the native JSON parser first\n      if (window.JSON && window.JSON.parse) {\n        return window.JSON.parse(data);\n      }\n\n      if (data === null) {\n        return data;\n      }\n\n      if (typeof data === \"string\") {\n        // Make sure leading/trailing whitespace is removed (IE can't handle it)\n        data = jQuery.trim(data);\n\n        if (data) {\n          // Make sure the incoming data is actual JSON\n          // Logic borrowed from http://json.org/json2.js\n          if (rvalidchars.test(data.replace(rvalidescape, \"@\").replace(rvalidtokens, \"]\").replace(rvalidbraces, \"\"))) {\n            return new Function(\"return \" + data)();\n          }\n        }\n      }\n\n      jQuery.error(\"Invalid JSON: \" + data);\n    },\n    // Cross-browser xml parsing\n    parseXML: function parseXML(data) {\n      var xml, tmp;\n\n      if (!data || typeof data !== \"string\") {\n        return null;\n      }\n\n      try {\n        if (window.DOMParser) {\n          // Standard\n          tmp = new DOMParser();\n          xml = tmp.parseFromString(data, \"text/xml\");\n        } else {\n          // IE\n          xml = new ActiveXObject(\"Microsoft.XMLDOM\");\n          xml.async = \"false\";\n          xml.loadXML(data);\n        }\n      } catch (e) {\n        xml = undefined;\n      }\n\n      if (!xml || !xml.documentElement || xml.getElementsByTagName(\"parsererror\").length) {\n        jQuery.error(\"Invalid XML: \" + data);\n      }\n\n      return xml;\n    },\n    noop: function noop() {},\n    // Evaluates a script in a global context\n    // Workarounds based on findings by Jim Driscoll\n    // http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context\n    globalEval: function globalEval(data) {\n      if (data && jQuery.trim(data)) {\n        // We use execScript on Internet Explorer\n        // We use an anonymous function so that context is window\n        // rather than jQuery in Firefox\n        (window.execScript || function (data) {\n          window[\"eval\"].call(window, data);\n        })(data);\n      }\n    },\n    // Convert dashed to camelCase; used by the css and data modules\n    // Microsoft forgot to hump their vendor prefix (#9572)\n    camelCase: function camelCase(string) {\n      return string.replace(rmsPrefix, \"ms-\").replace(rdashAlpha, fcamelCase);\n    },\n    nodeName: function nodeName(elem, name) {\n      return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n    },\n    // args is for internal usage only\n    each: function each(obj, callback, args) {\n      var value,\n          i = 0,\n          length = obj.length,\n          isArray = isArraylike(obj);\n\n      if (args) {\n        if (isArray) {\n          for (; i < length; i++) {\n            value = callback.apply(obj[i], args);\n\n            if (value === false) {\n              break;\n            }\n          }\n        } else {\n          for (i in obj) {\n            value = callback.apply(obj[i], args);\n\n            if (value === false) {\n              break;\n            }\n          }\n        } // A special, fast, case for the most common use of each\n\n      } else {\n        if (isArray) {\n          for (; i < length; i++) {\n            value = callback.call(obj[i], i, obj[i]);\n\n            if (value === false) {\n              break;\n            }\n          }\n        } else {\n          for (i in obj) {\n            value = callback.call(obj[i], i, obj[i]);\n\n            if (value === false) {\n              break;\n            }\n          }\n        }\n      }\n\n      return obj;\n    },\n    // Use native String.trim function wherever possible\n    trim: core_trim && !core_trim.call(\"\\uFEFF\\xA0\") ? function (text) {\n      return text == null ? \"\" : core_trim.call(text);\n    } : // Otherwise use our own trimming functionality\n    function (text) {\n      return text == null ? \"\" : (text + \"\").replace(rtrim, \"\");\n    },\n    // results is for internal usage only\n    makeArray: function makeArray(arr, results) {\n      var ret = results || [];\n\n      if (arr != null) {\n        if (isArraylike(Object(arr))) {\n          jQuery.merge(ret, typeof arr === \"string\" ? [arr] : arr);\n        } else {\n          core_push.call(ret, arr);\n        }\n      }\n\n      return ret;\n    },\n    inArray: function inArray(elem, arr, i) {\n      var len;\n\n      if (arr) {\n        if (core_indexOf) {\n          return core_indexOf.call(arr, elem, i);\n        }\n\n        len = arr.length;\n        i = i ? i < 0 ? Math.max(0, len + i) : i : 0;\n\n        for (; i < len; i++) {\n          // Skip accessing in sparse arrays\n          if (i in arr && arr[i] === elem) {\n            return i;\n          }\n        }\n      }\n\n      return -1;\n    },\n    merge: function merge(first, second) {\n      var l = second.length,\n          i = first.length,\n          j = 0;\n\n      if (typeof l === \"number\") {\n        for (; j < l; j++) {\n          first[i++] = second[j];\n        }\n      } else {\n        while (second[j] !== undefined) {\n          first[i++] = second[j++];\n        }\n      }\n\n      first.length = i;\n      return first;\n    },\n    grep: function grep(elems, callback, inv) {\n      var retVal,\n          ret = [],\n          i = 0,\n          length = elems.length;\n      inv = !!inv; // Go through the array, only saving the items\n      // that pass the validator function\n\n      for (; i < length; i++) {\n        retVal = !!callback(elems[i], i);\n\n        if (inv !== retVal) {\n          ret.push(elems[i]);\n        }\n      }\n\n      return ret;\n    },\n    // arg is for internal usage only\n    map: function map(elems, callback, arg) {\n      var value,\n          i = 0,\n          length = elems.length,\n          isArray = isArraylike(elems),\n          ret = []; // Go through the array, translating each of the items to their\n\n      if (isArray) {\n        for (; i < length; i++) {\n          value = callback(elems[i], i, arg);\n\n          if (value != null) {\n            ret[ret.length] = value;\n          }\n        } // Go through every key on the object,\n\n      } else {\n        for (i in elems) {\n          value = callback(elems[i], i, arg);\n\n          if (value != null) {\n            ret[ret.length] = value;\n          }\n        }\n      } // Flatten any nested arrays\n\n\n      return core_concat.apply([], ret);\n    },\n    // A global GUID counter for objects\n    guid: 1,\n    // Bind a function to a context, optionally partially applying any\n    // arguments.\n    proxy: function proxy(fn, context) {\n      var args, proxy, tmp;\n\n      if (typeof context === \"string\") {\n        tmp = fn[context];\n        context = fn;\n        fn = tmp;\n      } // Quick check to determine if target is callable, in the spec\n      // this throws a TypeError, but we will just return undefined.\n\n\n      if (!jQuery.isFunction(fn)) {\n        return undefined;\n      } // Simulated bind\n\n\n      args = core_slice.call(arguments, 2);\n\n      proxy = function proxy() {\n        return fn.apply(context || this, args.concat(core_slice.call(arguments)));\n      }; // Set the guid of unique handler to the same of original handler, so it can be removed\n\n\n      proxy.guid = fn.guid = fn.guid || jQuery.guid++;\n      return proxy;\n    },\n    // Multifunctional method to get and set values of a collection\n    // The value/s can optionally be executed if it's a function\n    access: function access(elems, fn, key, value, chainable, emptyGet, raw) {\n      var i = 0,\n          length = elems.length,\n          bulk = key == null; // Sets many values\n\n      if (jQuery.type(key) === \"object\") {\n        chainable = true;\n\n        for (i in key) {\n          jQuery.access(elems, fn, i, key[i], true, emptyGet, raw);\n        } // Sets one value\n\n      } else if (value !== undefined) {\n        chainable = true;\n\n        if (!jQuery.isFunction(value)) {\n          raw = true;\n        }\n\n        if (bulk) {\n          // Bulk operations run against the entire set\n          if (raw) {\n            fn.call(elems, value);\n            fn = null; // ...except when executing function values\n          } else {\n            bulk = fn;\n\n            fn = function fn(elem, key, value) {\n              return bulk.call(jQuery(elem), value);\n            };\n          }\n        }\n\n        if (fn) {\n          for (; i < length; i++) {\n            fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));\n          }\n        }\n      }\n\n      return chainable ? elems : // Gets\n      bulk ? fn.call(elems) : length ? fn(elems[0], key) : emptyGet;\n    },\n    now: function now() {\n      return new Date().getTime();\n    }\n  });\n\n  jQuery.ready.promise = function (obj) {\n    if (!readyList) {\n      readyList = jQuery.Deferred(); // Catch cases where $(document).ready() is called after the browser event has already occurred.\n      // we once tried to use readyState \"interactive\" here, but it caused issues like the one\n      // discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15\n\n      if (document.readyState === \"complete\") {\n        // Handle it asynchronously to allow scripts the opportunity to delay ready\n        setTimeout(jQuery.ready); // Standards-based browsers support DOMContentLoaded\n      } else if (document.addEventListener) {\n        // Use the handy event callback\n        document.addEventListener(\"DOMContentLoaded\", completed, false); // A fallback to window.onload, that will always work\n\n        window.addEventListener(\"load\", completed, false); // If IE event model is used\n      } else {\n        // Ensure firing before onload, maybe late but safe also for iframes\n        document.attachEvent(\"onreadystatechange\", completed); // A fallback to window.onload, that will always work\n\n        window.attachEvent(\"onload\", completed); // If IE and not a frame\n        // continually check to see if the document is ready\n\n        var top = false;\n\n        try {\n          top = window.frameElement == null && document.documentElement;\n        } catch (e) {}\n\n        if (top && top.doScroll) {\n          (function doScrollCheck() {\n            if (!jQuery.isReady) {\n              try {\n                // Use the trick by Diego Perini\n                // http://javascript.nwbox.com/IEContentLoaded/\n                top.doScroll(\"left\");\n              } catch (e) {\n                return setTimeout(doScrollCheck, 50);\n              } // detach all dom ready events\n\n\n              detach(); // and execute any waiting functions\n\n              jQuery.ready();\n            }\n          })();\n        }\n      }\n    }\n\n    return readyList.promise(obj);\n  }; // Populate the class2type map\n\n\n  jQuery.each(\"Boolean Number String Function Array Date RegExp Object Error\".split(\" \"), function (i, name) {\n    class2type[\"[object \" + name + \"]\"] = name.toLowerCase();\n  });\n\n  function isArraylike(obj) {\n    var length = obj.length,\n        type = jQuery.type(obj);\n\n    if (jQuery.isWindow(obj)) {\n      return false;\n    }\n\n    if (obj.nodeType === 1 && length) {\n      return true;\n    }\n\n    return type === \"array\" || type !== \"function\" && (length === 0 || typeof length === \"number\" && length > 0 && length - 1 in obj);\n  } // All jQuery objects should point back to these\n\n\n  rootjQuery = jQuery(document); // String to Object options format cache\n\n  var optionsCache = {}; // Convert String-formatted options into Object-formatted ones and store in cache\n\n  function createOptions(options) {\n    var object = optionsCache[options] = {};\n    jQuery.each(options.match(core_rnotwhite) || [], function (_, flag) {\n      object[flag] = true;\n    });\n    return object;\n  }\n  /*\n   * Create a callback list using the following parameters:\n   *\n   *\toptions: an optional list of space-separated options that will change how\n   *\t\t\tthe callback list behaves or a more traditional option object\n   *\n   * By default a callback list will act like an event callback list and can be\n   * \"fired\" multiple times.\n   *\n   * Possible options:\n   *\n   *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n   *\n   *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n   *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n   *\t\t\t\t\tvalues (like a Deferred)\n   *\n   *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n   *\n   *\tstopOnFalse:\tinterrupt callings when a callback returns false\n   *\n   */\n\n\n  jQuery.Callbacks = function (options) {\n    // Convert options from String-formatted to Object-formatted if needed\n    // (we check in cache first)\n    options = typeof options === \"string\" ? optionsCache[options] || createOptions(options) : jQuery.extend({}, options);\n\n    var // Flag to know if list is currently firing\n    firing,\n        // Last fire value (for non-forgettable lists)\n    memory,\n        // Flag to know if list was already fired\n    _fired,\n        // End of the loop when firing\n    firingLength,\n        // Index of currently firing callback (modified by remove if needed)\n    firingIndex,\n        // First callback to fire (used internally by add and fireWith)\n    firingStart,\n        // Actual callback list\n    list = [],\n        // Stack of fire calls for repeatable lists\n    stack = !options.once && [],\n        // Fire callbacks\n    fire = function fire(data) {\n      memory = options.memory && data;\n      _fired = true;\n      firingIndex = firingStart || 0;\n      firingStart = 0;\n      firingLength = list.length;\n      firing = true;\n\n      for (; list && firingIndex < firingLength; firingIndex++) {\n        if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {\n          memory = false; // To prevent further calls using add\n\n          break;\n        }\n      }\n\n      firing = false;\n\n      if (list) {\n        if (stack) {\n          if (stack.length) {\n            fire(stack.shift());\n          }\n        } else if (memory) {\n          list = [];\n        } else {\n          self.disable();\n        }\n      }\n    },\n        // Actual Callbacks object\n    self = {\n      // Add a callback or a collection of callbacks to the list\n      add: function add() {\n        if (list) {\n          // First, we save the current length\n          var start = list.length;\n\n          (function add(args) {\n            jQuery.each(args, function (_, arg) {\n              var type = jQuery.type(arg);\n\n              if (type === \"function\") {\n                if (!options.unique || !self.has(arg)) {\n                  list.push(arg);\n                }\n              } else if (arg && arg.length && type !== \"string\") {\n                // Inspect recursively\n                add(arg);\n              }\n            });\n          })(arguments); // Do we need to add the callbacks to the\n          // current firing batch?\n\n\n          if (firing) {\n            firingLength = list.length; // With memory, if we're not firing then\n            // we should call right away\n          } else if (memory) {\n            firingStart = start;\n            fire(memory);\n          }\n        }\n\n        return this;\n      },\n      // Remove a callback from the list\n      remove: function remove() {\n        if (list) {\n          jQuery.each(arguments, function (_, arg) {\n            var index;\n\n            while ((index = jQuery.inArray(arg, list, index)) > -1) {\n              list.splice(index, 1); // Handle firing indexes\n\n              if (firing) {\n                if (index <= firingLength) {\n                  firingLength--;\n                }\n\n                if (index <= firingIndex) {\n                  firingIndex--;\n                }\n              }\n            }\n          });\n        }\n\n        return this;\n      },\n      // Check if a given callback is in the list.\n      // If no argument is given, return whether or not list has callbacks attached.\n      has: function has(fn) {\n        return fn ? jQuery.inArray(fn, list) > -1 : !!(list && list.length);\n      },\n      // Remove all callbacks from the list\n      empty: function empty() {\n        list = [];\n        return this;\n      },\n      // Have the list do nothing anymore\n      disable: function disable() {\n        list = stack = memory = undefined;\n        return this;\n      },\n      // Is it disabled?\n      disabled: function disabled() {\n        return !list;\n      },\n      // Lock the list in its current state\n      lock: function lock() {\n        stack = undefined;\n\n        if (!memory) {\n          self.disable();\n        }\n\n        return this;\n      },\n      // Is it locked?\n      locked: function locked() {\n        return !stack;\n      },\n      // Call all callbacks with the given context and arguments\n      fireWith: function fireWith(context, args) {\n        args = args || [];\n        args = [context, args.slice ? args.slice() : args];\n\n        if (list && (!_fired || stack)) {\n          if (firing) {\n            stack.push(args);\n          } else {\n            fire(args);\n          }\n        }\n\n        return this;\n      },\n      // Call all the callbacks with the given arguments\n      fire: function fire() {\n        self.fireWith(this, arguments);\n        return this;\n      },\n      // To know if the callbacks have already been called at least once\n      fired: function fired() {\n        return !!_fired;\n      }\n    };\n\n    return self;\n  };\n\n  jQuery.extend({\n    Deferred: function Deferred(func) {\n      var tuples = [// action, add listener, listener list, final state\n      [\"resolve\", \"done\", jQuery.Callbacks(\"once memory\"), \"resolved\"], [\"reject\", \"fail\", jQuery.Callbacks(\"once memory\"), \"rejected\"], [\"notify\", \"progress\", jQuery.Callbacks(\"memory\")]],\n          _state = \"pending\",\n          _promise = {\n        state: function state() {\n          return _state;\n        },\n        always: function always() {\n          deferred.done(arguments).fail(arguments);\n          return this;\n        },\n        then: function\n          /* fnDone, fnFail, fnProgress */\n        then() {\n          var fns = arguments;\n          return jQuery.Deferred(function (newDefer) {\n            jQuery.each(tuples, function (i, tuple) {\n              var action = tuple[0],\n                  fn = jQuery.isFunction(fns[i]) && fns[i]; // deferred[ done | fail | progress ] for forwarding actions to newDefer\n\n              deferred[tuple[1]](function () {\n                var returned = fn && fn.apply(this, arguments);\n\n                if (returned && jQuery.isFunction(returned.promise)) {\n                  returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);\n                } else {\n                  newDefer[action + \"With\"](this === _promise ? newDefer.promise() : this, fn ? [returned] : arguments);\n                }\n              });\n            });\n            fns = null;\n          }).promise();\n        },\n        // Get a promise for this deferred\n        // If obj is provided, the promise aspect is added to the object\n        promise: function promise(obj) {\n          return obj != null ? jQuery.extend(obj, _promise) : _promise;\n        }\n      },\n          deferred = {}; // Keep pipe for back-compat\n\n      _promise.pipe = _promise.then; // Add list-specific methods\n\n      jQuery.each(tuples, function (i, tuple) {\n        var list = tuple[2],\n            stateString = tuple[3]; // promise[ done | fail | progress ] = list.add\n\n        _promise[tuple[1]] = list.add; // Handle state\n\n        if (stateString) {\n          list.add(function () {\n            // state = [ resolved | rejected ]\n            _state = stateString; // [ reject_list | resolve_list ].disable; progress_list.lock\n          }, tuples[i ^ 1][2].disable, tuples[2][2].lock);\n        } // deferred[ resolve | reject | notify ]\n\n\n        deferred[tuple[0]] = function () {\n          deferred[tuple[0] + \"With\"](this === deferred ? _promise : this, arguments);\n          return this;\n        };\n\n        deferred[tuple[0] + \"With\"] = list.fireWith;\n      }); // Make the deferred a promise\n\n      _promise.promise(deferred); // Call given func if any\n\n\n      if (func) {\n        func.call(deferred, deferred);\n      } // All done!\n\n\n      return deferred;\n    },\n    // Deferred helper\n    when: function when(subordinate\n    /* , ..., subordinateN */\n    ) {\n      var i = 0,\n          resolveValues = core_slice.call(arguments),\n          length = resolveValues.length,\n          // the count of uncompleted subordinates\n      remaining = length !== 1 || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0,\n          // the master Deferred. If resolveValues consist of only a single Deferred, just use that.\n      deferred = remaining === 1 ? subordinate : jQuery.Deferred(),\n          // Update function for both resolve and progress values\n      updateFunc = function updateFunc(i, contexts, values) {\n        return function (value) {\n          contexts[i] = this;\n          values[i] = arguments.length > 1 ? core_slice.call(arguments) : value;\n\n          if (values === progressValues) {\n            deferred.notifyWith(contexts, values);\n          } else if (! --remaining) {\n            deferred.resolveWith(contexts, values);\n          }\n        };\n      },\n          progressValues,\n          progressContexts,\n          resolveContexts; // add listeners to Deferred subordinates; treat others as resolved\n\n\n      if (length > 1) {\n        progressValues = new Array(length);\n        progressContexts = new Array(length);\n        resolveContexts = new Array(length);\n\n        for (; i < length; i++) {\n          if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {\n            resolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues));\n          } else {\n            --remaining;\n          }\n        }\n      } // if we're not waiting on anything, resolve the master\n\n\n      if (!remaining) {\n        deferred.resolveWith(resolveContexts, resolveValues);\n      }\n\n      return deferred.promise();\n    }\n  });\n\n  jQuery.support = function () {\n    var support,\n        all,\n        a,\n        input,\n        select,\n        fragment,\n        opt,\n        eventName,\n        isSupported,\n        i,\n        div = document.createElement(\"div\"); // Setup\n\n    div.setAttribute(\"className\", \"t\");\n    div.innerHTML = \"  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>\"; // Support tests won't run in some limited or non-browser environments\n\n    all = div.getElementsByTagName(\"*\");\n    a = div.getElementsByTagName(\"a\")[0];\n\n    if (!all || !a || !all.length) {\n      return {};\n    } // First batch of tests\n\n\n    select = document.createElement(\"select\");\n    opt = select.appendChild(document.createElement(\"option\"));\n    input = div.getElementsByTagName(\"input\")[0];\n    a.style.cssText = \"top:1px;float:left;opacity:.5\";\n    support = {\n      // Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)\n      getSetAttribute: div.className !== \"t\",\n      // IE strips leading whitespace when .innerHTML is used\n      leadingWhitespace: div.firstChild.nodeType === 3,\n      // Make sure that tbody elements aren't automatically inserted\n      // IE will insert them into empty tables\n      tbody: !div.getElementsByTagName(\"tbody\").length,\n      // Make sure that link elements get serialized correctly by innerHTML\n      // This requires a wrapper element in IE\n      htmlSerialize: !!div.getElementsByTagName(\"link\").length,\n      // Get the style information from getAttribute\n      // (IE uses .cssText instead)\n      style: /top/.test(a.getAttribute(\"style\")),\n      // Make sure that URLs aren't manipulated\n      // (IE normalizes it by default)\n      hrefNormalized: a.getAttribute(\"href\") === \"/a\",\n      // Make sure that element opacity exists\n      // (IE uses filter instead)\n      // Use a regex to work around a WebKit issue. See #5145\n      opacity: /^0.5/.test(a.style.opacity),\n      // Verify style float existence\n      // (IE uses styleFloat instead of cssFloat)\n      cssFloat: !!a.style.cssFloat,\n      // Check the default checkbox/radio value (\"\" on WebKit; \"on\" elsewhere)\n      checkOn: !!input.value,\n      // Make sure that a selected-by-default option has a working selected property.\n      // (WebKit defaults to false instead of true, IE too, if it's in an optgroup)\n      optSelected: opt.selected,\n      // Tests for enctype support on a form (#6743)\n      enctype: !!document.createElement(\"form\").enctype,\n      // Makes sure cloning an html5 element does not cause problems\n      // Where outerHTML is undefined, this still works\n      html5Clone: document.createElement(\"nav\").cloneNode(true).outerHTML !== \"<:nav></:nav>\",\n      // jQuery.support.boxModel DEPRECATED in 1.8 since we don't support Quirks Mode\n      boxModel: document.compatMode === \"CSS1Compat\",\n      // Will be defined later\n      deleteExpando: true,\n      noCloneEvent: true,\n      inlineBlockNeedsLayout: false,\n      shrinkWrapBlocks: false,\n      reliableMarginRight: true,\n      boxSizingReliable: true,\n      pixelPosition: false\n    }; // Make sure checked status is properly cloned\n\n    input.checked = true;\n    support.noCloneChecked = input.cloneNode(true).checked; // Make sure that the options inside disabled selects aren't marked as disabled\n    // (WebKit marks them as disabled)\n\n    select.disabled = true;\n    support.optDisabled = !opt.disabled; // Support: IE<9\n\n    try {\n      delete div.test;\n    } catch (e) {\n      support.deleteExpando = false;\n    } // Check if we can trust getAttribute(\"value\")\n\n\n    input = document.createElement(\"input\");\n    input.setAttribute(\"value\", \"\");\n    support.input = input.getAttribute(\"value\") === \"\"; // Check if an input maintains its value after becoming a radio\n\n    input.value = \"t\";\n    input.setAttribute(\"type\", \"radio\");\n    support.radioValue = input.value === \"t\"; // #11217 - WebKit loses check when the name is after the checked attribute\n\n    input.setAttribute(\"checked\", \"t\");\n    input.setAttribute(\"name\", \"t\");\n    fragment = document.createDocumentFragment();\n    fragment.appendChild(input); // Check if a disconnected checkbox will retain its checked\n    // value of true after appended to the DOM (IE6/7)\n\n    support.appendChecked = input.checked; // WebKit doesn't clone checked state correctly in fragments\n\n    support.checkClone = fragment.cloneNode(true).cloneNode(true).lastChild.checked; // Support: IE<9\n    // Opera does not clone events (and typeof div.attachEvent === undefined).\n    // IE9-10 clones events bound via attachEvent, but they don't trigger with .click()\n\n    if (div.attachEvent) {\n      div.attachEvent(\"onclick\", function () {\n        support.noCloneEvent = false;\n      });\n      div.cloneNode(true).click();\n    } // Support: IE<9 (lack submit/change bubble), Firefox 17+ (lack focusin event)\n    // Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP), test/csp.php\n\n\n    for (i in {\n      submit: true,\n      change: true,\n      focusin: true\n    }) {\n      div.setAttribute(eventName = \"on\" + i, \"t\");\n      support[i + \"Bubbles\"] = eventName in window || div.attributes[eventName].expando === false;\n    }\n\n    div.style.backgroundClip = \"content-box\";\n    div.cloneNode(true).style.backgroundClip = \"\";\n    support.clearCloneStyle = div.style.backgroundClip === \"content-box\"; // Run tests that need a body at doc ready\n\n    jQuery(function () {\n      var container,\n          marginDiv,\n          tds,\n          divReset = \"padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;\",\n          body = document.getElementsByTagName(\"body\")[0];\n\n      if (!body) {\n        // Return for frameset docs that don't have a body\n        return;\n      }\n\n      container = document.createElement(\"div\");\n      container.style.cssText = \"border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px\";\n      body.appendChild(container).appendChild(div); // Support: IE8\n      // Check if table cells still have offsetWidth/Height when they are set\n      // to display:none and there are still other visible table cells in a\n      // table row; if so, offsetWidth/Height are not reliable for use when\n      // determining if an element has been hidden directly using\n      // display:none (it is still safe to use offsets if a parent element is\n      // hidden; don safety goggles and see bug #4512 for more information).\n\n      div.innerHTML = \"<table><tr><td></td><td>t</td></tr></table>\";\n      tds = div.getElementsByTagName(\"td\");\n      tds[0].style.cssText = \"padding:0;margin:0;border:0;display:none\";\n      isSupported = tds[0].offsetHeight === 0;\n      tds[0].style.display = \"\";\n      tds[1].style.display = \"none\"; // Support: IE8\n      // Check if empty table cells still have offsetWidth/Height\n\n      support.reliableHiddenOffsets = isSupported && tds[0].offsetHeight === 0; // Check box-sizing and margin behavior\n\n      div.innerHTML = \"\";\n      div.style.cssText = \"box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;\";\n      support.boxSizing = div.offsetWidth === 4;\n      support.doesNotIncludeMarginInBodyOffset = body.offsetTop !== 1; // Use window.getComputedStyle because jsdom on node.js will break without it.\n\n      if (window.getComputedStyle) {\n        support.pixelPosition = (window.getComputedStyle(div, null) || {}).top !== \"1%\";\n        support.boxSizingReliable = (window.getComputedStyle(div, null) || {\n          width: \"4px\"\n        }).width === \"4px\"; // Check if div with explicit width and no margin-right incorrectly\n        // gets computed margin-right based on width of container. (#3333)\n        // Fails in WebKit before Feb 2011 nightlies\n        // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right\n\n        marginDiv = div.appendChild(document.createElement(\"div\"));\n        marginDiv.style.cssText = div.style.cssText = divReset;\n        marginDiv.style.marginRight = marginDiv.style.width = \"0\";\n        div.style.width = \"1px\";\n        support.reliableMarginRight = !parseFloat((window.getComputedStyle(marginDiv, null) || {}).marginRight);\n      }\n\n      if (_typeof(div.style.zoom) !== core_strundefined) {\n        // Support: IE<8\n        // Check if natively block-level elements act like inline-block\n        // elements when setting their display to 'inline' and giving\n        // them layout\n        div.innerHTML = \"\";\n        div.style.cssText = divReset + \"width:1px;padding:1px;display:inline;zoom:1\";\n        support.inlineBlockNeedsLayout = div.offsetWidth === 3; // Support: IE6\n        // Check if elements with layout shrink-wrap their children\n\n        div.style.display = \"block\";\n        div.innerHTML = \"<div></div>\";\n        div.firstChild.style.width = \"5px\";\n        support.shrinkWrapBlocks = div.offsetWidth !== 3;\n\n        if (support.inlineBlockNeedsLayout) {\n          // Prevent IE 6 from affecting layout for positioned elements #11048\n          // Prevent IE from shrinking the body in IE 7 mode #12869\n          // Support: IE<8\n          body.style.zoom = 1;\n        }\n      }\n\n      body.removeChild(container); // Null elements to avoid leaks in IE\n\n      container = div = tds = marginDiv = null;\n    }); // Null elements to avoid leaks in IE\n\n    all = select = fragment = opt = a = input = null;\n    return support;\n  }();\n\n  var rbrace = /(?:\\{[\\s\\S]*\\}|\\[[\\s\\S]*\\])$/,\n      rmultiDash = /([A-Z])/g;\n\n  function internalData(elem, name, data, pvt\n  /* Internal Use Only */\n  ) {\n    if (!jQuery.acceptData(elem)) {\n      return;\n    }\n\n    var thisCache,\n        ret,\n        internalKey = jQuery.expando,\n        getByName = typeof name === \"string\",\n        // We have to handle DOM nodes and JS objects differently because IE6-7\n    // can't GC object references properly across the DOM-JS boundary\n    isNode = elem.nodeType,\n        // Only DOM nodes need the global jQuery cache; JS object data is\n    // attached directly to the object so GC can occur automatically\n    cache = isNode ? jQuery.cache : elem,\n        // Only defining an ID for JS objects if its cache already exists allows\n    // the code to shortcut on the same path as a DOM node with no cache\n    id = isNode ? elem[internalKey] : elem[internalKey] && internalKey; // Avoid doing any more work than we need to when trying to get data on an\n    // object that has no data at all\n\n    if ((!id || !cache[id] || !pvt && !cache[id].data) && getByName && data === undefined) {\n      return;\n    }\n\n    if (!id) {\n      // Only DOM nodes need a new unique ID for each element since their data\n      // ends up in the global cache\n      if (isNode) {\n        elem[internalKey] = id = core_deletedIds.pop() || jQuery.guid++;\n      } else {\n        id = internalKey;\n      }\n    }\n\n    if (!cache[id]) {\n      cache[id] = {}; // Avoids exposing jQuery metadata on plain JS objects when the object\n      // is serialized using JSON.stringify\n\n      if (!isNode) {\n        cache[id].toJSON = jQuery.noop;\n      }\n    } // An object can be passed to jQuery.data instead of a key/value pair; this gets\n    // shallow copied over onto the existing cache\n\n\n    if (_typeof(name) === \"object\" || typeof name === \"function\") {\n      if (pvt) {\n        cache[id] = jQuery.extend(cache[id], name);\n      } else {\n        cache[id].data = jQuery.extend(cache[id].data, name);\n      }\n    }\n\n    thisCache = cache[id]; // jQuery data() is stored in a separate object inside the object's internal data\n    // cache in order to avoid key collisions between internal data and user-defined\n    // data.\n\n    if (!pvt) {\n      if (!thisCache.data) {\n        thisCache.data = {};\n      }\n\n      thisCache = thisCache.data;\n    }\n\n    if (data !== undefined) {\n      thisCache[jQuery.camelCase(name)] = data;\n    } // Check for both converted-to-camel and non-converted data property names\n    // If a data property was specified\n\n\n    if (getByName) {\n      // First Try to find as-is property data\n      ret = thisCache[name]; // Test for null|undefined property data\n\n      if (ret == null) {\n        // Try to find the camelCased property\n        ret = thisCache[jQuery.camelCase(name)];\n      }\n    } else {\n      ret = thisCache;\n    }\n\n    return ret;\n  }\n\n  function internalRemoveData(elem, name, pvt) {\n    if (!jQuery.acceptData(elem)) {\n      return;\n    }\n\n    var i,\n        l,\n        thisCache,\n        isNode = elem.nodeType,\n        // See jQuery.data for more information\n    cache = isNode ? jQuery.cache : elem,\n        id = isNode ? elem[jQuery.expando] : jQuery.expando; // If there is already no cache entry for this object, there is no\n    // purpose in continuing\n\n    if (!cache[id]) {\n      return;\n    }\n\n    if (name) {\n      thisCache = pvt ? cache[id] : cache[id].data;\n\n      if (thisCache) {\n        // Support array or space separated string names for data keys\n        if (!jQuery.isArray(name)) {\n          // try the string as a key before any manipulation\n          if (name in thisCache) {\n            name = [name];\n          } else {\n            // split the camel cased version by spaces unless a key with the spaces exists\n            name = jQuery.camelCase(name);\n\n            if (name in thisCache) {\n              name = [name];\n            } else {\n              name = name.split(\" \");\n            }\n          }\n        } else {\n          // If \"name\" is an array of keys...\n          // When data is initially created, via (\"key\", \"val\") signature,\n          // keys will be converted to camelCase.\n          // Since there is no way to tell _how_ a key was added, remove\n          // both plain key and camelCase key. #12786\n          // This will only penalize the array argument path.\n          name = name.concat(jQuery.map(name, jQuery.camelCase));\n        }\n\n        for (i = 0, l = name.length; i < l; i++) {\n          delete thisCache[name[i]];\n        } // If there is no data left in the cache, we want to continue\n        // and let the cache object itself get destroyed\n\n\n        if (!(pvt ? isEmptyDataObject : jQuery.isEmptyObject)(thisCache)) {\n          return;\n        }\n      }\n    } // See jQuery.data for more information\n\n\n    if (!pvt) {\n      delete cache[id].data; // Don't destroy the parent cache unless the internal data object\n      // had been the only thing left in it\n\n      if (!isEmptyDataObject(cache[id])) {\n        return;\n      }\n    } // Destroy the cache\n\n\n    if (isNode) {\n      jQuery.cleanData([elem], true); // Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)\n    } else if (jQuery.support.deleteExpando || cache != cache.window) {\n      delete cache[id]; // When all else fails, null\n    } else {\n      cache[id] = null;\n    }\n  }\n\n  jQuery.extend({\n    cache: {},\n    // Unique for each copy of jQuery on the page\n    // Non-digits removed to match rinlinejQuery\n    expando: \"jQuery\" + (core_version + Math.random()).replace(/\\D/g, \"\"),\n    // The following elements throw uncatchable exceptions if you\n    // attempt to add expando properties to them.\n    noData: {\n      \"embed\": true,\n      // Ban all objects except for Flash (which handle expandos)\n      \"object\": \"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\",\n      \"applet\": true\n    },\n    hasData: function hasData(elem) {\n      elem = elem.nodeType ? jQuery.cache[elem[jQuery.expando]] : elem[jQuery.expando];\n      return !!elem && !isEmptyDataObject(elem);\n    },\n    data: function data(elem, name, _data) {\n      return internalData(elem, name, _data);\n    },\n    removeData: function removeData(elem, name) {\n      return internalRemoveData(elem, name);\n    },\n    // For internal use only.\n    _data: function _data(elem, name, data) {\n      return internalData(elem, name, data, true);\n    },\n    _removeData: function _removeData(elem, name) {\n      return internalRemoveData(elem, name, true);\n    },\n    // A method for determining if a DOM node can handle the data expando\n    acceptData: function acceptData(elem) {\n      // Do not set data on non-element because it will not be cleared (#8335).\n      if (elem.nodeType && elem.nodeType !== 1 && elem.nodeType !== 9) {\n        return false;\n      }\n\n      var noData = elem.nodeName && jQuery.noData[elem.nodeName.toLowerCase()]; // nodes accept data unless otherwise specified; rejection can be conditional\n\n      return !noData || noData !== true && elem.getAttribute(\"classid\") === noData;\n    }\n  });\n  jQuery.fn.extend({\n    data: function data(key, value) {\n      var attrs,\n          name,\n          elem = this[0],\n          i = 0,\n          data = null; // Gets all values\n\n      if (key === undefined) {\n        if (this.length) {\n          data = jQuery.data(elem);\n\n          if (elem.nodeType === 1 && !jQuery._data(elem, \"parsedAttrs\")) {\n            attrs = elem.attributes;\n\n            for (; i < attrs.length; i++) {\n              name = attrs[i].name;\n\n              if (!name.indexOf(\"data-\")) {\n                name = jQuery.camelCase(name.slice(5));\n                dataAttr(elem, name, data[name]);\n              }\n            }\n\n            jQuery._data(elem, \"parsedAttrs\", true);\n          }\n        }\n\n        return data;\n      } // Sets multiple values\n\n\n      if (_typeof(key) === \"object\") {\n        return this.each(function () {\n          jQuery.data(this, key);\n        });\n      }\n\n      return jQuery.access(this, function (value) {\n        if (value === undefined) {\n          // Try to fetch any internally stored data first\n          return elem ? dataAttr(elem, key, jQuery.data(elem, key)) : null;\n        }\n\n        this.each(function () {\n          jQuery.data(this, key, value);\n        });\n      }, null, value, arguments.length > 1, null, true);\n    },\n    removeData: function removeData(key) {\n      return this.each(function () {\n        jQuery.removeData(this, key);\n      });\n    }\n  });\n\n  function dataAttr(elem, key, data) {\n    // If nothing was found internally, try to fetch any\n    // data from the HTML5 data-* attribute\n    if (data === undefined && elem.nodeType === 1) {\n      var name = \"data-\" + key.replace(rmultiDash, \"-$1\").toLowerCase();\n      data = elem.getAttribute(name);\n\n      if (typeof data === \"string\") {\n        try {\n          data = data === \"true\" ? true : data === \"false\" ? false : data === \"null\" ? null : // Only convert to a number if it doesn't change the string\n          +data + \"\" === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data;\n        } catch (e) {} // Make sure we set the data so it isn't changed later\n\n\n        jQuery.data(elem, key, data);\n      } else {\n        data = undefined;\n      }\n    }\n\n    return data;\n  } // checks a cache object for emptiness\n\n\n  function isEmptyDataObject(obj) {\n    var name;\n\n    for (name in obj) {\n      // if the public data object is empty, the private is still empty\n      if (name === \"data\" && jQuery.isEmptyObject(obj[name])) {\n        continue;\n      }\n\n      if (name !== \"toJSON\") {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  jQuery.extend({\n    queue: function queue(elem, type, data) {\n      var queue;\n\n      if (elem) {\n        type = (type || \"fx\") + \"queue\";\n        queue = jQuery._data(elem, type); // Speed up dequeue by getting out quickly if this is just a lookup\n\n        if (data) {\n          if (!queue || jQuery.isArray(data)) {\n            queue = jQuery._data(elem, type, jQuery.makeArray(data));\n          } else {\n            queue.push(data);\n          }\n        }\n\n        return queue || [];\n      }\n    },\n    dequeue: function dequeue(elem, type) {\n      type = type || \"fx\";\n\n      var queue = jQuery.queue(elem, type),\n          startLength = queue.length,\n          fn = queue.shift(),\n          hooks = jQuery._queueHooks(elem, type),\n          next = function next() {\n        jQuery.dequeue(elem, type);\n      }; // If the fx queue is dequeued, always remove the progress sentinel\n\n\n      if (fn === \"inprogress\") {\n        fn = queue.shift();\n        startLength--;\n      }\n\n      hooks.cur = fn;\n\n      if (fn) {\n        // Add a progress sentinel to prevent the fx queue from being\n        // automatically dequeued\n        if (type === \"fx\") {\n          queue.unshift(\"inprogress\");\n        } // clear up the last queue stop function\n\n\n        delete hooks.stop;\n        fn.call(elem, next, hooks);\n      }\n\n      if (!startLength && hooks) {\n        hooks.empty.fire();\n      }\n    },\n    // not intended for public consumption - generates a queueHooks object, or returns the current one\n    _queueHooks: function _queueHooks(elem, type) {\n      var key = type + \"queueHooks\";\n      return jQuery._data(elem, key) || jQuery._data(elem, key, {\n        empty: jQuery.Callbacks(\"once memory\").add(function () {\n          jQuery._removeData(elem, type + \"queue\");\n\n          jQuery._removeData(elem, key);\n        })\n      });\n    }\n  });\n  jQuery.fn.extend({\n    queue: function queue(type, data) {\n      var setter = 2;\n\n      if (typeof type !== \"string\") {\n        data = type;\n        type = \"fx\";\n        setter--;\n      }\n\n      if (arguments.length < setter) {\n        return jQuery.queue(this[0], type);\n      }\n\n      return data === undefined ? this : this.each(function () {\n        var queue = jQuery.queue(this, type, data); // ensure a hooks for this queue\n\n        jQuery._queueHooks(this, type);\n\n        if (type === \"fx\" && queue[0] !== \"inprogress\") {\n          jQuery.dequeue(this, type);\n        }\n      });\n    },\n    dequeue: function dequeue(type) {\n      return this.each(function () {\n        jQuery.dequeue(this, type);\n      });\n    },\n    // Based off of the plugin by Clint Helfers, with permission.\n    // http://blindsignals.com/index.php/2009/07/jquery-delay/\n    delay: function delay(time, type) {\n      time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;\n      type = type || \"fx\";\n      return this.queue(type, function (next, hooks) {\n        var timeout = setTimeout(next, time);\n\n        hooks.stop = function () {\n          clearTimeout(timeout);\n        };\n      });\n    },\n    clearQueue: function clearQueue(type) {\n      return this.queue(type || \"fx\", []);\n    },\n    // Get a promise resolved when queues of a certain type\n    // are emptied (fx is the type by default)\n    promise: function promise(type, obj) {\n      var tmp,\n          count = 1,\n          defer = jQuery.Deferred(),\n          elements = this,\n          i = this.length,\n          resolve = function resolve() {\n        if (! --count) {\n          defer.resolveWith(elements, [elements]);\n        }\n      };\n\n      if (typeof type !== \"string\") {\n        obj = type;\n        type = undefined;\n      }\n\n      type = type || \"fx\";\n\n      while (i--) {\n        tmp = jQuery._data(elements[i], type + \"queueHooks\");\n\n        if (tmp && tmp.empty) {\n          count++;\n          tmp.empty.add(resolve);\n        }\n      }\n\n      resolve();\n      return defer.promise(obj);\n    }\n  });\n  var nodeHook,\n      boolHook,\n      rclass = /[\\t\\r\\n]/g,\n      rreturn = /\\r/g,\n      rfocusable = /^(?:input|select|textarea|button|object)$/i,\n      rclickable = /^(?:a|area)$/i,\n      rboolean = /^(?:checked|selected|autofocus|autoplay|async|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped)$/i,\n      ruseDefault = /^(?:checked|selected)$/i,\n      getSetAttribute = jQuery.support.getSetAttribute,\n      getSetInput = jQuery.support.input;\n  jQuery.fn.extend({\n    attr: function attr(name, value) {\n      return jQuery.access(this, jQuery.attr, name, value, arguments.length > 1);\n    },\n    removeAttr: function removeAttr(name) {\n      return this.each(function () {\n        jQuery.removeAttr(this, name);\n      });\n    },\n    prop: function prop(name, value) {\n      return jQuery.access(this, jQuery.prop, name, value, arguments.length > 1);\n    },\n    removeProp: function removeProp(name) {\n      name = jQuery.propFix[name] || name;\n      return this.each(function () {\n        // try/catch handles cases where IE balks (such as removing a property on window)\n        try {\n          this[name] = undefined;\n          delete this[name];\n        } catch (e) {}\n      });\n    },\n    addClass: function addClass(value) {\n      var classes,\n          elem,\n          cur,\n          clazz,\n          j,\n          i = 0,\n          len = this.length,\n          proceed = typeof value === \"string\" && value;\n\n      if (jQuery.isFunction(value)) {\n        return this.each(function (j) {\n          jQuery(this).addClass(value.call(this, j, this.className));\n        });\n      }\n\n      if (proceed) {\n        // The disjunction here is for better compressibility (see removeClass)\n        classes = (value || \"\").match(core_rnotwhite) || [];\n\n        for (; i < len; i++) {\n          elem = this[i];\n          cur = elem.nodeType === 1 && (elem.className ? (\" \" + elem.className + \" \").replace(rclass, \" \") : \" \");\n\n          if (cur) {\n            j = 0;\n\n            while (clazz = classes[j++]) {\n              if (cur.indexOf(\" \" + clazz + \" \") < 0) {\n                cur += clazz + \" \";\n              }\n            }\n\n            elem.className = jQuery.trim(cur);\n          }\n        }\n      }\n\n      return this;\n    },\n    removeClass: function removeClass(value) {\n      var classes,\n          elem,\n          cur,\n          clazz,\n          j,\n          i = 0,\n          len = this.length,\n          proceed = arguments.length === 0 || typeof value === \"string\" && value;\n\n      if (jQuery.isFunction(value)) {\n        return this.each(function (j) {\n          jQuery(this).removeClass(value.call(this, j, this.className));\n        });\n      }\n\n      if (proceed) {\n        classes = (value || \"\").match(core_rnotwhite) || [];\n\n        for (; i < len; i++) {\n          elem = this[i]; // This expression is here for better compressibility (see addClass)\n\n          cur = elem.nodeType === 1 && (elem.className ? (\" \" + elem.className + \" \").replace(rclass, \" \") : \"\");\n\n          if (cur) {\n            j = 0;\n\n            while (clazz = classes[j++]) {\n              // Remove *all* instances\n              while (cur.indexOf(\" \" + clazz + \" \") >= 0) {\n                cur = cur.replace(\" \" + clazz + \" \", \" \");\n              }\n            }\n\n            elem.className = value ? jQuery.trim(cur) : \"\";\n          }\n        }\n      }\n\n      return this;\n    },\n    toggleClass: function toggleClass(value, stateVal) {\n      var type = _typeof(value),\n          isBool = typeof stateVal === \"boolean\";\n\n      if (jQuery.isFunction(value)) {\n        return this.each(function (i) {\n          jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);\n        });\n      }\n\n      return this.each(function () {\n        if (type === \"string\") {\n          // toggle individual class names\n          var className,\n              i = 0,\n              self = jQuery(this),\n              state = stateVal,\n              classNames = value.match(core_rnotwhite) || [];\n\n          while (className = classNames[i++]) {\n            // check each className given, space separated list\n            state = isBool ? state : !self.hasClass(className);\n            self[state ? \"addClass\" : \"removeClass\"](className);\n          } // Toggle whole class name\n\n        } else if (type === core_strundefined || type === \"boolean\") {\n          if (this.className) {\n            // store className if set\n            jQuery._data(this, \"__className__\", this.className);\n          } // If the element has a class name or if we're passed \"false\",\n          // then remove the whole classname (if there was one, the above saved it).\n          // Otherwise bring back whatever was previously saved (if anything),\n          // falling back to the empty string if nothing was stored.\n\n\n          this.className = this.className || value === false ? \"\" : jQuery._data(this, \"__className__\") || \"\";\n        }\n      });\n    },\n    hasClass: function hasClass(selector) {\n      var className = \" \" + selector + \" \",\n          i = 0,\n          l = this.length;\n\n      for (; i < l; i++) {\n        if (this[i].nodeType === 1 && (\" \" + this[i].className + \" \").replace(rclass, \" \").indexOf(className) >= 0) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n    val: function val(value) {\n      var ret,\n          hooks,\n          isFunction,\n          elem = this[0];\n\n      if (!arguments.length) {\n        if (elem) {\n          hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];\n\n          if (hooks && \"get\" in hooks && (ret = hooks.get(elem, \"value\")) !== undefined) {\n            return ret;\n          }\n\n          ret = elem.value;\n          return typeof ret === \"string\" ? // handle most common string cases\n          ret.replace(rreturn, \"\") : // handle cases where value is null/undef or number\n          ret == null ? \"\" : ret;\n        }\n\n        return;\n      }\n\n      isFunction = jQuery.isFunction(value);\n      return this.each(function (i) {\n        var val,\n            self = jQuery(this);\n\n        if (this.nodeType !== 1) {\n          return;\n        }\n\n        if (isFunction) {\n          val = value.call(this, i, self.val());\n        } else {\n          val = value;\n        } // Treat null/undefined as \"\"; convert numbers to string\n\n\n        if (val == null) {\n          val = \"\";\n        } else if (typeof val === \"number\") {\n          val += \"\";\n        } else if (jQuery.isArray(val)) {\n          val = jQuery.map(val, function (value) {\n            return value == null ? \"\" : value + \"\";\n          });\n        }\n\n        hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()]; // If set returns undefined, fall back to normal setting\n\n        if (!hooks || !(\"set\" in hooks) || hooks.set(this, val, \"value\") === undefined) {\n          this.value = val;\n        }\n      });\n    }\n  });\n  jQuery.extend({\n    valHooks: {\n      option: {\n        get: function get(elem) {\n          // attributes.value is undefined in Blackberry 4.7 but\n          // uses .value. See #6932\n          var val = elem.attributes.value;\n          return !val || val.specified ? elem.value : elem.text;\n        }\n      },\n      select: {\n        get: function get(elem) {\n          var value,\n              option,\n              options = elem.options,\n              index = elem.selectedIndex,\n              one = elem.type === \"select-one\" || index < 0,\n              values = one ? null : [],\n              max = one ? index + 1 : options.length,\n              i = index < 0 ? max : one ? index : 0; // Loop through all the selected options\n\n          for (; i < max; i++) {\n            option = options[i]; // oldIE doesn't update selected after form reset (#2551)\n\n            if ((option.selected || i === index) && ( // Don't return options that are disabled or in a disabled optgroup\n            jQuery.support.optDisabled ? !option.disabled : option.getAttribute(\"disabled\") === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, \"optgroup\"))) {\n              // Get the specific value for the option\n              value = jQuery(option).val(); // We don't need an array for one selects\n\n              if (one) {\n                return value;\n              } // Multi-Selects return an array\n\n\n              values.push(value);\n            }\n          }\n\n          return values;\n        },\n        set: function set(elem, value) {\n          var values = jQuery.makeArray(value);\n          jQuery(elem).find(\"option\").each(function () {\n            this.selected = jQuery.inArray(jQuery(this).val(), values) >= 0;\n          });\n\n          if (!values.length) {\n            elem.selectedIndex = -1;\n          }\n\n          return values;\n        }\n      }\n    },\n    attr: function attr(elem, name, value) {\n      var hooks,\n          notxml,\n          ret,\n          nType = elem.nodeType; // don't get/set attributes on text, comment and attribute nodes\n\n      if (!elem || nType === 3 || nType === 8 || nType === 2) {\n        return;\n      } // Fallback to prop when attributes are not supported\n\n\n      if (_typeof(elem.getAttribute) === core_strundefined) {\n        return jQuery.prop(elem, name, value);\n      }\n\n      notxml = nType !== 1 || !jQuery.isXMLDoc(elem); // All attributes are lowercase\n      // Grab necessary hook if one is defined\n\n      if (notxml) {\n        name = name.toLowerCase();\n        hooks = jQuery.attrHooks[name] || (rboolean.test(name) ? boolHook : nodeHook);\n      }\n\n      if (value !== undefined) {\n        if (value === null) {\n          jQuery.removeAttr(elem, name);\n        } else if (hooks && notxml && \"set\" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {\n          return ret;\n        } else {\n          elem.setAttribute(name, value + \"\");\n          return value;\n        }\n      } else if (hooks && notxml && \"get\" in hooks && (ret = hooks.get(elem, name)) !== null) {\n        return ret;\n      } else {\n        // In IE9+, Flash objects don't have .getAttribute (#12945)\n        // Support: IE9+\n        if (_typeof(elem.getAttribute) !== core_strundefined) {\n          ret = elem.getAttribute(name);\n        } // Non-existent attributes return null, we normalize to undefined\n\n\n        return ret == null ? undefined : ret;\n      }\n    },\n    removeAttr: function removeAttr(elem, value) {\n      var name,\n          propName,\n          i = 0,\n          attrNames = value && value.match(core_rnotwhite);\n\n      if (attrNames && elem.nodeType === 1) {\n        while (name = attrNames[i++]) {\n          propName = jQuery.propFix[name] || name; // Boolean attributes get special treatment (#10870)\n\n          if (rboolean.test(name)) {\n            // Set corresponding property to false for boolean attributes\n            // Also clear defaultChecked/defaultSelected (if appropriate) for IE<8\n            if (!getSetAttribute && ruseDefault.test(name)) {\n              elem[jQuery.camelCase(\"default-\" + name)] = elem[propName] = false;\n            } else {\n              elem[propName] = false;\n            } // See #9699 for explanation of this approach (setting first, then removal)\n\n          } else {\n            jQuery.attr(elem, name, \"\");\n          }\n\n          elem.removeAttribute(getSetAttribute ? name : propName);\n        }\n      }\n    },\n    attrHooks: {\n      type: {\n        set: function set(elem, value) {\n          if (!jQuery.support.radioValue && value === \"radio\" && jQuery.nodeName(elem, \"input\")) {\n            // Setting the type on a radio button after the value resets the value in IE6-9\n            // Reset value to default in case type is set after value during creation\n            var val = elem.value;\n            elem.setAttribute(\"type\", value);\n\n            if (val) {\n              elem.value = val;\n            }\n\n            return value;\n          }\n        }\n      }\n    },\n    propFix: {\n      tabindex: \"tabIndex\",\n      readonly: \"readOnly\",\n      \"for\": \"htmlFor\",\n      \"class\": \"className\",\n      maxlength: \"maxLength\",\n      cellspacing: \"cellSpacing\",\n      cellpadding: \"cellPadding\",\n      rowspan: \"rowSpan\",\n      colspan: \"colSpan\",\n      usemap: \"useMap\",\n      frameborder: \"frameBorder\",\n      contenteditable: \"contentEditable\"\n    },\n    prop: function prop(elem, name, value) {\n      var ret,\n          hooks,\n          notxml,\n          nType = elem.nodeType; // don't get/set properties on text, comment and attribute nodes\n\n      if (!elem || nType === 3 || nType === 8 || nType === 2) {\n        return;\n      }\n\n      notxml = nType !== 1 || !jQuery.isXMLDoc(elem);\n\n      if (notxml) {\n        // Fix name and attach hooks\n        name = jQuery.propFix[name] || name;\n        hooks = jQuery.propHooks[name];\n      }\n\n      if (value !== undefined) {\n        if (hooks && \"set\" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {\n          return ret;\n        } else {\n          return elem[name] = value;\n        }\n      } else {\n        if (hooks && \"get\" in hooks && (ret = hooks.get(elem, name)) !== null) {\n          return ret;\n        } else {\n          return elem[name];\n        }\n      }\n    },\n    propHooks: {\n      tabIndex: {\n        get: function get(elem) {\n          // elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set\n          // http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n          var attributeNode = elem.getAttributeNode(\"tabindex\");\n          return attributeNode && attributeNode.specified ? parseInt(attributeNode.value, 10) : rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href ? 0 : undefined;\n        }\n      }\n    }\n  }); // Hook for boolean attributes\n\n  boolHook = {\n    get: function get(elem, name) {\n      var // Use .prop to determine if this attribute is understood as boolean\n      prop = jQuery.prop(elem, name),\n          // Fetch it accordingly\n      attr = typeof prop === \"boolean\" && elem.getAttribute(name),\n          detail = typeof prop === \"boolean\" ? getSetInput && getSetAttribute ? attr != null : // oldIE fabricates an empty string for missing boolean attributes\n      // and conflates checked/selected into attroperties\n      ruseDefault.test(name) ? elem[jQuery.camelCase(\"default-\" + name)] : !!attr : // fetch an attribute node for properties not recognized as boolean\n      elem.getAttributeNode(name);\n      return detail && detail.value !== false ? name.toLowerCase() : undefined;\n    },\n    set: function set(elem, value, name) {\n      if (value === false) {\n        // Remove boolean attributes when set to false\n        jQuery.removeAttr(elem, name);\n      } else if (getSetInput && getSetAttribute || !ruseDefault.test(name)) {\n        // IE<8 needs the *property* name\n        elem.setAttribute(!getSetAttribute && jQuery.propFix[name] || name, name); // Use defaultChecked and defaultSelected for oldIE\n      } else {\n        elem[jQuery.camelCase(\"default-\" + name)] = elem[name] = true;\n      }\n\n      return name;\n    }\n  }; // fix oldIE value attroperty\n\n  if (!getSetInput || !getSetAttribute) {\n    jQuery.attrHooks.value = {\n      get: function get(elem, name) {\n        var ret = elem.getAttributeNode(name);\n        return jQuery.nodeName(elem, \"input\") ? // Ignore the value *property* by using defaultValue\n        elem.defaultValue : ret && ret.specified ? ret.value : undefined;\n      },\n      set: function set(elem, value, name) {\n        if (jQuery.nodeName(elem, \"input\")) {\n          // Does not return so that setAttribute is also used\n          elem.defaultValue = value;\n        } else {\n          // Use nodeHook if defined (#1954); otherwise setAttribute is fine\n          return nodeHook && nodeHook.set(elem, value, name);\n        }\n      }\n    };\n  } // IE6/7 do not support getting/setting some attributes with get/setAttribute\n\n\n  if (!getSetAttribute) {\n    // Use this for any attribute in IE6/7\n    // This fixes almost every IE6/7 issue\n    nodeHook = jQuery.valHooks.button = {\n      get: function get(elem, name) {\n        var ret = elem.getAttributeNode(name);\n        return ret && (name === \"id\" || name === \"name\" || name === \"coords\" ? ret.value !== \"\" : ret.specified) ? ret.value : undefined;\n      },\n      set: function set(elem, value, name) {\n        // Set the existing or create a new attribute node\n        var ret = elem.getAttributeNode(name);\n\n        if (!ret) {\n          elem.setAttributeNode(ret = elem.ownerDocument.createAttribute(name));\n        }\n\n        ret.value = value += \"\"; // Break association with cloned elements by also using setAttribute (#9646)\n\n        return name === \"value\" || value === elem.getAttribute(name) ? value : undefined;\n      }\n    }; // Set contenteditable to false on removals(#10429)\n    // Setting to empty string throws an error as an invalid value\n\n    jQuery.attrHooks.contenteditable = {\n      get: nodeHook.get,\n      set: function set(elem, value, name) {\n        nodeHook.set(elem, value === \"\" ? false : value, name);\n      }\n    }; // Set width and height to auto instead of 0 on empty string( Bug #8150 )\n    // This is for removals\n\n    jQuery.each([\"width\", \"height\"], function (i, name) {\n      jQuery.attrHooks[name] = jQuery.extend(jQuery.attrHooks[name], {\n        set: function set(elem, value) {\n          if (value === \"\") {\n            elem.setAttribute(name, \"auto\");\n            return value;\n          }\n        }\n      });\n    });\n  } // Some attributes require a special call on IE\n  // http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\n\n\n  if (!jQuery.support.hrefNormalized) {\n    jQuery.each([\"href\", \"src\", \"width\", \"height\"], function (i, name) {\n      jQuery.attrHooks[name] = jQuery.extend(jQuery.attrHooks[name], {\n        get: function get(elem) {\n          var ret = elem.getAttribute(name, 2);\n          return ret == null ? undefined : ret;\n        }\n      });\n    }); // href/src property should get the full normalized URL (#10299/#12915)\n\n    jQuery.each([\"href\", \"src\"], function (i, name) {\n      jQuery.propHooks[name] = {\n        get: function get(elem) {\n          return elem.getAttribute(name, 4);\n        }\n      };\n    });\n  }\n\n  if (!jQuery.support.style) {\n    jQuery.attrHooks.style = {\n      get: function get(elem) {\n        // Return undefined in the case of empty string\n        // Note: IE uppercases css property names, but if we were to .toLowerCase()\n        // .cssText, that would destroy case senstitivity in URL's, like in \"background\"\n        return elem.style.cssText || undefined;\n      },\n      set: function set(elem, value) {\n        return elem.style.cssText = value + \"\";\n      }\n    };\n  } // Safari mis-reports the default selected property of an option\n  // Accessing the parent's selectedIndex property fixes it\n\n\n  if (!jQuery.support.optSelected) {\n    jQuery.propHooks.selected = jQuery.extend(jQuery.propHooks.selected, {\n      get: function get(elem) {\n        var parent = elem.parentNode;\n\n        if (parent) {\n          parent.selectedIndex; // Make sure that it also works with optgroups, see #5701\n\n          if (parent.parentNode) {\n            parent.parentNode.selectedIndex;\n          }\n        }\n\n        return null;\n      }\n    });\n  } // IE6/7 call enctype encoding\n\n\n  if (!jQuery.support.enctype) {\n    jQuery.propFix.enctype = \"encoding\";\n  } // Radios and checkboxes getter/setter\n\n\n  if (!jQuery.support.checkOn) {\n    jQuery.each([\"radio\", \"checkbox\"], function () {\n      jQuery.valHooks[this] = {\n        get: function get(elem) {\n          // Handle the case where in Webkit \"\" is returned instead of \"on\" if a value isn't specified\n          return elem.getAttribute(\"value\") === null ? \"on\" : elem.value;\n        }\n      };\n    });\n  }\n\n  jQuery.each([\"radio\", \"checkbox\"], function () {\n    jQuery.valHooks[this] = jQuery.extend(jQuery.valHooks[this], {\n      set: function set(elem, value) {\n        if (jQuery.isArray(value)) {\n          return elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0;\n        }\n      }\n    });\n  });\n  var rformElems = /^(?:input|select|textarea)$/i,\n      rkeyEvent = /^key/,\n      rmouseEvent = /^(?:mouse|contextmenu)|click/,\n      rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\n      rtypenamespace = /^([^.]*)(?:\\.(.+)|)$/;\n\n  function returnTrue() {\n    return true;\n  }\n\n  function returnFalse() {\n    return false;\n  }\n  /*\n   * Helper functions for managing events -- not part of the public interface.\n   * Props to Dean Edwards' addEvent library for many of the ideas.\n   */\n\n\n  jQuery.event = {\n    global: {},\n    add: function add(elem, types, handler, data, selector) {\n      var tmp,\n          events,\n          t,\n          handleObjIn,\n          special,\n          eventHandle,\n          handleObj,\n          handlers,\n          type,\n          namespaces,\n          origType,\n          elemData = jQuery._data(elem); // Don't attach events to noData or text/comment nodes (but allow plain objects)\n\n\n      if (!elemData) {\n        return;\n      } // Caller can pass in an object of custom data in lieu of the handler\n\n\n      if (handler.handler) {\n        handleObjIn = handler;\n        handler = handleObjIn.handler;\n        selector = handleObjIn.selector;\n      } // Make sure that the handler has a unique ID, used to find/remove it later\n\n\n      if (!handler.guid) {\n        handler.guid = jQuery.guid++;\n      } // Init the element's event structure and main handler, if this is the first\n\n\n      if (!(events = elemData.events)) {\n        events = elemData.events = {};\n      }\n\n      if (!(eventHandle = elemData.handle)) {\n        eventHandle = elemData.handle = function (e) {\n          // Discard the second event of a jQuery.event.trigger() and\n          // when an event is called after a page has unloaded\n          return _typeof(jQuery) !== core_strundefined && (!e || jQuery.event.triggered !== e.type) ? jQuery.event.dispatch.apply(eventHandle.elem, arguments) : undefined;\n        }; // Add elem as a property of the handle fn to prevent a memory leak with IE non-native events\n\n\n        eventHandle.elem = elem;\n      } // Handle multiple events separated by a space\n      // jQuery(...).bind(\"mouseover mouseout\", fn);\n\n\n      types = (types || \"\").match(core_rnotwhite) || [\"\"];\n      t = types.length;\n\n      while (t--) {\n        tmp = rtypenamespace.exec(types[t]) || [];\n        type = origType = tmp[1];\n        namespaces = (tmp[2] || \"\").split(\".\").sort(); // If event changes its type, use the special event handlers for the changed type\n\n        special = jQuery.event.special[type] || {}; // If selector defined, determine special event api type, otherwise given type\n\n        type = (selector ? special.delegateType : special.bindType) || type; // Update special based on newly reset type\n\n        special = jQuery.event.special[type] || {}; // handleObj is passed to all event handlers\n\n        handleObj = jQuery.extend({\n          type: type,\n          origType: origType,\n          data: data,\n          handler: handler,\n          guid: handler.guid,\n          selector: selector,\n          needsContext: selector && jQuery.expr.match.needsContext.test(selector),\n          namespace: namespaces.join(\".\")\n        }, handleObjIn); // Init the event handler queue if we're the first\n\n        if (!(handlers = events[type])) {\n          handlers = events[type] = [];\n          handlers.delegateCount = 0; // Only use addEventListener/attachEvent if the special events handler returns false\n\n          if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {\n            // Bind the global event handler to the element\n            if (elem.addEventListener) {\n              elem.addEventListener(type, eventHandle, false);\n            } else if (elem.attachEvent) {\n              elem.attachEvent(\"on\" + type, eventHandle);\n            }\n          }\n        }\n\n        if (special.add) {\n          special.add.call(elem, handleObj);\n\n          if (!handleObj.handler.guid) {\n            handleObj.handler.guid = handler.guid;\n          }\n        } // Add to the element's handler list, delegates in front\n\n\n        if (selector) {\n          handlers.splice(handlers.delegateCount++, 0, handleObj);\n        } else {\n          handlers.push(handleObj);\n        } // Keep track of which events have ever been used, for event optimization\n\n\n        jQuery.event.global[type] = true;\n      } // Nullify elem to prevent memory leaks in IE\n\n\n      elem = null;\n    },\n    // Detach an event or set of events from an element\n    remove: function remove(elem, types, handler, selector, mappedTypes) {\n      var j,\n          handleObj,\n          tmp,\n          origCount,\n          t,\n          events,\n          special,\n          handlers,\n          type,\n          namespaces,\n          origType,\n          elemData = jQuery.hasData(elem) && jQuery._data(elem);\n\n      if (!elemData || !(events = elemData.events)) {\n        return;\n      } // Once for each type.namespace in types; type may be omitted\n\n\n      types = (types || \"\").match(core_rnotwhite) || [\"\"];\n      t = types.length;\n\n      while (t--) {\n        tmp = rtypenamespace.exec(types[t]) || [];\n        type = origType = tmp[1];\n        namespaces = (tmp[2] || \"\").split(\".\").sort(); // Unbind all events (on this namespace, if provided) for the element\n\n        if (!type) {\n          for (type in events) {\n            jQuery.event.remove(elem, type + types[t], handler, selector, true);\n          }\n\n          continue;\n        }\n\n        special = jQuery.event.special[type] || {};\n        type = (selector ? special.delegateType : special.bindType) || type;\n        handlers = events[type] || [];\n        tmp = tmp[2] && new RegExp(\"(^|\\\\.)\" + namespaces.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\"); // Remove matching events\n\n        origCount = j = handlers.length;\n\n        while (j--) {\n          handleObj = handlers[j];\n\n          if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === \"**\" && handleObj.selector)) {\n            handlers.splice(j, 1);\n\n            if (handleObj.selector) {\n              handlers.delegateCount--;\n            }\n\n            if (special.remove) {\n              special.remove.call(elem, handleObj);\n            }\n          }\n        } // Remove generic event handler if we removed something and no more handlers exist\n        // (avoids potential for endless recursion during removal of special event handlers)\n\n\n        if (origCount && !handlers.length) {\n          if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {\n            jQuery.removeEvent(elem, type, elemData.handle);\n          }\n\n          delete events[type];\n        }\n      } // Remove the expando if it's no longer used\n\n\n      if (jQuery.isEmptyObject(events)) {\n        delete elemData.handle; // removeData also checks for emptiness and clears the expando if empty\n        // so use it instead of delete\n\n        jQuery._removeData(elem, \"events\");\n      }\n    },\n    trigger: function trigger(event, data, elem, onlyHandlers) {\n      var handle,\n          ontype,\n          cur,\n          bubbleType,\n          special,\n          tmp,\n          i,\n          eventPath = [elem || document],\n          type = core_hasOwn.call(event, \"type\") ? event.type : event,\n          namespaces = core_hasOwn.call(event, \"namespace\") ? event.namespace.split(\".\") : [];\n      cur = tmp = elem = elem || document; // Don't do events on text and comment nodes\n\n      if (elem.nodeType === 3 || elem.nodeType === 8) {\n        return;\n      } // focus/blur morphs to focusin/out; ensure we're not firing them right now\n\n\n      if (rfocusMorph.test(type + jQuery.event.triggered)) {\n        return;\n      }\n\n      if (type.indexOf(\".\") >= 0) {\n        // Namespaced trigger; create a regexp to match event type in handle()\n        namespaces = type.split(\".\");\n        type = namespaces.shift();\n        namespaces.sort();\n      }\n\n      ontype = type.indexOf(\":\") < 0 && \"on\" + type; // Caller can pass in a jQuery.Event object, Object, or just an event type string\n\n      event = event[jQuery.expando] ? event : new jQuery.Event(type, _typeof(event) === \"object\" && event);\n      event.isTrigger = true;\n      event.namespace = namespaces.join(\".\");\n      event.namespace_re = event.namespace ? new RegExp(\"(^|\\\\.)\" + namespaces.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\") : null; // Clean up the event in case it is being reused\n\n      event.result = undefined;\n\n      if (!event.target) {\n        event.target = elem;\n      } // Clone any incoming data and prepend the event, creating the handler arg list\n\n\n      data = data == null ? [event] : jQuery.makeArray(data, [event]); // Allow special events to draw outside the lines\n\n      special = jQuery.event.special[type] || {};\n\n      if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {\n        return;\n      } // Determine event propagation path in advance, per W3C events spec (#9951)\n      // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n\n\n      if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {\n        bubbleType = special.delegateType || type;\n\n        if (!rfocusMorph.test(bubbleType + type)) {\n          cur = cur.parentNode;\n        }\n\n        for (; cur; cur = cur.parentNode) {\n          eventPath.push(cur);\n          tmp = cur;\n        } // Only add window if we got to document (e.g., not plain obj or detached DOM)\n\n\n        if (tmp === (elem.ownerDocument || document)) {\n          eventPath.push(tmp.defaultView || tmp.parentWindow || window);\n        }\n      } // Fire handlers on the event path\n\n\n      i = 0;\n\n      while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {\n        event.type = i > 1 ? bubbleType : special.bindType || type; // jQuery handler\n\n        handle = (jQuery._data(cur, \"events\") || {})[event.type] && jQuery._data(cur, \"handle\");\n\n        if (handle) {\n          handle.apply(cur, data);\n        } // Native handler\n\n\n        handle = ontype && cur[ontype];\n\n        if (handle && jQuery.acceptData(cur) && handle.apply && handle.apply(cur, data) === false) {\n          event.preventDefault();\n        }\n      }\n\n      event.type = type; // If nobody prevented the default action, do it now\n\n      if (!onlyHandlers && !event.isDefaultPrevented()) {\n        if ((!special._default || special._default.apply(elem.ownerDocument, data) === false) && !(type === \"click\" && jQuery.nodeName(elem, \"a\")) && jQuery.acceptData(elem)) {\n          // Call a native DOM method on the target with the same name name as the event.\n          // Can't use an .isFunction() check here because IE6/7 fails that test.\n          // Don't do default actions on window, that's where global variables be (#6170)\n          if (ontype && elem[type] && !jQuery.isWindow(elem)) {\n            // Don't re-trigger an onFOO event when we call its FOO() method\n            tmp = elem[ontype];\n\n            if (tmp) {\n              elem[ontype] = null;\n            } // Prevent re-triggering of the same event, since we already bubbled it above\n\n\n            jQuery.event.triggered = type;\n\n            try {\n              elem[type]();\n            } catch (e) {// IE<9 dies on focus/blur to hidden element (#1486,#12518)\n              // only reproducible on winXP IE8 native, not IE9 in IE8 mode\n            }\n\n            jQuery.event.triggered = undefined;\n\n            if (tmp) {\n              elem[ontype] = tmp;\n            }\n          }\n        }\n      }\n\n      return event.result;\n    },\n    dispatch: function dispatch(event) {\n      // Make a writable jQuery.Event from the native event object\n      event = jQuery.event.fix(event);\n      var i,\n          ret,\n          handleObj,\n          matched,\n          j,\n          handlerQueue = [],\n          args = core_slice.call(arguments),\n          handlers = (jQuery._data(this, \"events\") || {})[event.type] || [],\n          special = jQuery.event.special[event.type] || {}; // Use the fix-ed jQuery.Event rather than the (read-only) native event\n\n      args[0] = event;\n      event.delegateTarget = this; // Call the preDispatch hook for the mapped type, and let it bail if desired\n\n      if (special.preDispatch && special.preDispatch.call(this, event) === false) {\n        return;\n      } // Determine handlers\n\n\n      handlerQueue = jQuery.event.handlers.call(this, event, handlers); // Run delegates first; they may want to stop propagation beneath us\n\n      i = 0;\n\n      while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {\n        event.currentTarget = matched.elem;\n        j = 0;\n\n        while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {\n          // Triggered event must either 1) have no namespace, or\n          // 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).\n          if (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {\n            event.handleObj = handleObj;\n            event.data = handleObj.data;\n            ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);\n\n            if (ret !== undefined) {\n              if ((event.result = ret) === false) {\n                event.preventDefault();\n                event.stopPropagation();\n              }\n            }\n          }\n        }\n      } // Call the postDispatch hook for the mapped type\n\n\n      if (special.postDispatch) {\n        special.postDispatch.call(this, event);\n      }\n\n      return event.result;\n    },\n    handlers: function handlers(event, _handlers) {\n      var sel,\n          handleObj,\n          matches,\n          i,\n          handlerQueue = [],\n          delegateCount = _handlers.delegateCount,\n          cur = event.target; // Find delegate handlers\n      // Black-hole SVG <use> instance trees (#13180)\n      // Avoid non-left-click bubbling in Firefox (#3861)\n\n      if (delegateCount && cur.nodeType && (!event.button || event.type !== \"click\")) {\n        for (; cur != this; cur = cur.parentNode || this) {\n          // Don't check non-elements (#13208)\n          // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)\n          if (cur.nodeType === 1 && (cur.disabled !== true || event.type !== \"click\")) {\n            matches = [];\n\n            for (i = 0; i < delegateCount; i++) {\n              handleObj = _handlers[i]; // Don't conflict with Object.prototype properties (#13203)\n\n              sel = handleObj.selector + \" \";\n\n              if (matches[sel] === undefined) {\n                matches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) >= 0 : jQuery.find(sel, this, null, [cur]).length;\n              }\n\n              if (matches[sel]) {\n                matches.push(handleObj);\n              }\n            }\n\n            if (matches.length) {\n              handlerQueue.push({\n                elem: cur,\n                handlers: matches\n              });\n            }\n          }\n        }\n      } // Add the remaining (directly-bound) handlers\n\n\n      if (delegateCount < _handlers.length) {\n        handlerQueue.push({\n          elem: this,\n          handlers: _handlers.slice(delegateCount)\n        });\n      }\n\n      return handlerQueue;\n    },\n    fix: function fix(event) {\n      if (event[jQuery.expando]) {\n        return event;\n      } // Create a writable copy of the event object and normalize some properties\n\n\n      var i,\n          prop,\n          copy,\n          type = event.type,\n          originalEvent = event,\n          fixHook = this.fixHooks[type];\n\n      if (!fixHook) {\n        this.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {};\n      }\n\n      copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;\n      event = new jQuery.Event(originalEvent);\n      i = copy.length;\n\n      while (i--) {\n        prop = copy[i];\n        event[prop] = originalEvent[prop];\n      } // Support: IE<9\n      // Fix target property (#1925)\n\n\n      if (!event.target) {\n        event.target = originalEvent.srcElement || document;\n      } // Support: Chrome 23+, Safari?\n      // Target should not be a text node (#504, #13143)\n\n\n      if (event.target.nodeType === 3) {\n        event.target = event.target.parentNode;\n      } // Support: IE<9\n      // For mouse/key events, metaKey==false if it's undefined (#3368, #11328)\n\n\n      event.metaKey = !!event.metaKey;\n      return fixHook.filter ? fixHook.filter(event, originalEvent) : event;\n    },\n    // Includes some event props shared by KeyEvent and MouseEvent\n    props: \"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which\".split(\" \"),\n    fixHooks: {},\n    keyHooks: {\n      props: \"char charCode key keyCode\".split(\" \"),\n      filter: function filter(event, original) {\n        // Add which for key events\n        if (event.which == null) {\n          event.which = original.charCode != null ? original.charCode : original.keyCode;\n        }\n\n        return event;\n      }\n    },\n    mouseHooks: {\n      props: \"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement\".split(\" \"),\n      filter: function filter(event, original) {\n        var body,\n            eventDoc,\n            doc,\n            button = original.button,\n            fromElement = original.fromElement; // Calculate pageX/Y if missing and clientX/Y available\n\n        if (event.pageX == null && original.clientX != null) {\n          eventDoc = event.target.ownerDocument || document;\n          doc = eventDoc.documentElement;\n          body = eventDoc.body;\n          event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);\n          event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);\n        } // Add relatedTarget, if necessary\n\n\n        if (!event.relatedTarget && fromElement) {\n          event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;\n        } // Add which for click: 1 === left; 2 === middle; 3 === right\n        // Note: button is not normalized, so don't use it\n\n\n        if (!event.which && button !== undefined) {\n          event.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;\n        }\n\n        return event;\n      }\n    },\n    special: {\n      load: {\n        // Prevent triggered image.load events from bubbling to window.load\n        noBubble: true\n      },\n      click: {\n        // For checkbox, fire native event so checked state will be right\n        trigger: function trigger() {\n          if (jQuery.nodeName(this, \"input\") && this.type === \"checkbox\" && this.click) {\n            this.click();\n            return false;\n          }\n        }\n      },\n      focus: {\n        // Fire native event if possible so blur/focus sequence is correct\n        trigger: function trigger() {\n          if (this !== document.activeElement && this.focus) {\n            try {\n              this.focus();\n              return false;\n            } catch (e) {// Support: IE<9\n              // If we error on focus to hidden element (#1486, #12518),\n              // let .trigger() run the handlers\n            }\n          }\n        },\n        delegateType: \"focusin\"\n      },\n      blur: {\n        trigger: function trigger() {\n          if (this === document.activeElement && this.blur) {\n            this.blur();\n            return false;\n          }\n        },\n        delegateType: \"focusout\"\n      },\n      beforeunload: {\n        postDispatch: function postDispatch(event) {\n          // Even when returnValue equals to undefined Firefox will still show alert\n          if (event.result !== undefined) {\n            event.originalEvent.returnValue = event.result;\n          }\n        }\n      }\n    },\n    simulate: function simulate(type, elem, event, bubble) {\n      // Piggyback on a donor event to simulate a different one.\n      // Fake originalEvent to avoid donor's stopPropagation, but if the\n      // simulated event prevents default then we do the same on the donor.\n      var e = jQuery.extend(new jQuery.Event(), event, {\n        type: type,\n        isSimulated: true,\n        originalEvent: {}\n      });\n\n      if (bubble) {\n        jQuery.event.trigger(e, null, elem);\n      } else {\n        jQuery.event.dispatch.call(elem, e);\n      }\n\n      if (e.isDefaultPrevented()) {\n        event.preventDefault();\n      }\n    }\n  };\n  jQuery.removeEvent = document.removeEventListener ? function (elem, type, handle) {\n    if (elem.removeEventListener) {\n      elem.removeEventListener(type, handle, false);\n    }\n  } : function (elem, type, handle) {\n    var name = \"on\" + type;\n\n    if (elem.detachEvent) {\n      // #8545, #7054, preventing memory leaks for custom events in IE6-8\n      // detachEvent needed property on element, by name of that event, to properly expose it to GC\n      if (_typeof(elem[name]) === core_strundefined) {\n        elem[name] = null;\n      }\n\n      elem.detachEvent(name, handle);\n    }\n  };\n\n  jQuery.Event = function (src, props) {\n    // Allow instantiation without the 'new' keyword\n    if (!(this instanceof jQuery.Event)) {\n      return new jQuery.Event(src, props);\n    } // Event object\n\n\n    if (src && src.type) {\n      this.originalEvent = src;\n      this.type = src.type; // Events bubbling up the document may have been marked as prevented\n      // by a handler lower down the tree; reflect the correct value.\n\n      this.isDefaultPrevented = src.defaultPrevented || src.returnValue === false || src.getPreventDefault && src.getPreventDefault() ? returnTrue : returnFalse; // Event type\n    } else {\n      this.type = src;\n    } // Put explicitly provided properties onto the event object\n\n\n    if (props) {\n      jQuery.extend(this, props);\n    } // Create a timestamp if incoming event doesn't have one\n\n\n    this.timeStamp = src && src.timeStamp || jQuery.now(); // Mark it as fixed\n\n    this[jQuery.expando] = true;\n  }; // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n  // http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\n\n\n  jQuery.Event.prototype = {\n    isDefaultPrevented: returnFalse,\n    isPropagationStopped: returnFalse,\n    isImmediatePropagationStopped: returnFalse,\n    preventDefault: function preventDefault() {\n      var e = this.originalEvent;\n      this.isDefaultPrevented = returnTrue;\n\n      if (!e) {\n        return;\n      } // If preventDefault exists, run it on the original event\n\n\n      if (e.preventDefault) {\n        e.preventDefault(); // Support: IE\n        // Otherwise set the returnValue property of the original event to false\n      } else {\n        e.returnValue = false;\n      }\n    },\n    stopPropagation: function stopPropagation() {\n      var e = this.originalEvent;\n      this.isPropagationStopped = returnTrue;\n\n      if (!e) {\n        return;\n      } // If stopPropagation exists, run it on the original event\n\n\n      if (e.stopPropagation) {\n        e.stopPropagation();\n      } // Support: IE\n      // Set the cancelBubble property of the original event to true\n\n\n      e.cancelBubble = true;\n    },\n    stopImmediatePropagation: function stopImmediatePropagation() {\n      this.isImmediatePropagationStopped = returnTrue;\n      this.stopPropagation();\n    }\n  }; // Create mouseenter/leave events using mouseover/out and event-time checks\n\n  jQuery.each({\n    mouseenter: \"mouseover\",\n    mouseleave: \"mouseout\"\n  }, function (orig, fix) {\n    jQuery.event.special[orig] = {\n      delegateType: fix,\n      bindType: fix,\n      handle: function handle(event) {\n        var ret,\n            target = this,\n            related = event.relatedTarget,\n            handleObj = event.handleObj; // For mousenter/leave call the handler if related is outside the target.\n        // NB: No relatedTarget if the mouse left/entered the browser window\n\n        if (!related || related !== target && !jQuery.contains(target, related)) {\n          event.type = handleObj.origType;\n          ret = handleObj.handler.apply(this, arguments);\n          event.type = fix;\n        }\n\n        return ret;\n      }\n    };\n  }); // IE submit delegation\n\n  if (!jQuery.support.submitBubbles) {\n    jQuery.event.special.submit = {\n      setup: function setup() {\n        // Only need this for delegated form submit events\n        if (jQuery.nodeName(this, \"form\")) {\n          return false;\n        } // Lazy-add a submit handler when a descendant form may potentially be submitted\n\n\n        jQuery.event.add(this, \"click._submit keypress._submit\", function (e) {\n          // Node name check avoids a VML-related crash in IE (#9807)\n          var elem = e.target,\n              form = jQuery.nodeName(elem, \"input\") || jQuery.nodeName(elem, \"button\") ? elem.form : undefined;\n\n          if (form && !jQuery._data(form, \"submitBubbles\")) {\n            jQuery.event.add(form, \"submit._submit\", function (event) {\n              event._submit_bubble = true;\n            });\n\n            jQuery._data(form, \"submitBubbles\", true);\n          }\n        }); // return undefined since we don't need an event listener\n      },\n      postDispatch: function postDispatch(event) {\n        // If form was submitted by the user, bubble the event up the tree\n        if (event._submit_bubble) {\n          delete event._submit_bubble;\n\n          if (this.parentNode && !event.isTrigger) {\n            jQuery.event.simulate(\"submit\", this.parentNode, event, true);\n          }\n        }\n      },\n      teardown: function teardown() {\n        // Only need this for delegated form submit events\n        if (jQuery.nodeName(this, \"form\")) {\n          return false;\n        } // Remove delegated handlers; cleanData eventually reaps submit handlers attached above\n\n\n        jQuery.event.remove(this, \"._submit\");\n      }\n    };\n  } // IE change delegation and checkbox/radio fix\n\n\n  if (!jQuery.support.changeBubbles) {\n    jQuery.event.special.change = {\n      setup: function setup() {\n        if (rformElems.test(this.nodeName)) {\n          // IE doesn't fire change on a check/radio until blur; trigger it on click\n          // after a propertychange. Eat the blur-change in special.change.handle.\n          // This still fires onchange a second time for check/radio after blur.\n          if (this.type === \"checkbox\" || this.type === \"radio\") {\n            jQuery.event.add(this, \"propertychange._change\", function (event) {\n              if (event.originalEvent.propertyName === \"checked\") {\n                this._just_changed = true;\n              }\n            });\n            jQuery.event.add(this, \"click._change\", function (event) {\n              if (this._just_changed && !event.isTrigger) {\n                this._just_changed = false;\n              } // Allow triggered, simulated change events (#11500)\n\n\n              jQuery.event.simulate(\"change\", this, event, true);\n            });\n          }\n\n          return false;\n        } // Delegated event; lazy-add a change handler on descendant inputs\n\n\n        jQuery.event.add(this, \"beforeactivate._change\", function (e) {\n          var elem = e.target;\n\n          if (rformElems.test(elem.nodeName) && !jQuery._data(elem, \"changeBubbles\")) {\n            jQuery.event.add(elem, \"change._change\", function (event) {\n              if (this.parentNode && !event.isSimulated && !event.isTrigger) {\n                jQuery.event.simulate(\"change\", this.parentNode, event, true);\n              }\n            });\n\n            jQuery._data(elem, \"changeBubbles\", true);\n          }\n        });\n      },\n      handle: function handle(event) {\n        var elem = event.target; // Swallow native change events from checkbox/radio, we already triggered them above\n\n        if (this !== elem || event.isSimulated || event.isTrigger || elem.type !== \"radio\" && elem.type !== \"checkbox\") {\n          return event.handleObj.handler.apply(this, arguments);\n        }\n      },\n      teardown: function teardown() {\n        jQuery.event.remove(this, \"._change\");\n        return !rformElems.test(this.nodeName);\n      }\n    };\n  } // Create \"bubbling\" focus and blur events\n\n\n  if (!jQuery.support.focusinBubbles) {\n    jQuery.each({\n      focus: \"focusin\",\n      blur: \"focusout\"\n    }, function (orig, fix) {\n      // Attach a single capturing handler while someone wants focusin/focusout\n      var attaches = 0,\n          handler = function handler(event) {\n        jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true);\n      };\n\n      jQuery.event.special[fix] = {\n        setup: function setup() {\n          if (attaches++ === 0) {\n            document.addEventListener(orig, handler, true);\n          }\n        },\n        teardown: function teardown() {\n          if (--attaches === 0) {\n            document.removeEventListener(orig, handler, true);\n          }\n        }\n      };\n    });\n  }\n\n  jQuery.fn.extend({\n    on: function on(types, selector, data, fn,\n    /*INTERNAL*/\n    one) {\n      var type, origFn; // Types can be a map of types/handlers\n\n      if (_typeof(types) === \"object\") {\n        // ( types-Object, selector, data )\n        if (typeof selector !== \"string\") {\n          // ( types-Object, data )\n          data = data || selector;\n          selector = undefined;\n        }\n\n        for (type in types) {\n          this.on(type, selector, data, types[type], one);\n        }\n\n        return this;\n      }\n\n      if (data == null && fn == null) {\n        // ( types, fn )\n        fn = selector;\n        data = selector = undefined;\n      } else if (fn == null) {\n        if (typeof selector === \"string\") {\n          // ( types, selector, fn )\n          fn = data;\n          data = undefined;\n        } else {\n          // ( types, data, fn )\n          fn = data;\n          data = selector;\n          selector = undefined;\n        }\n      }\n\n      if (fn === false) {\n        fn = returnFalse;\n      } else if (!fn) {\n        return this;\n      }\n\n      if (one === 1) {\n        origFn = fn;\n\n        fn = function fn(event) {\n          // Can use an empty set, since event contains the info\n          jQuery().off(event);\n          return origFn.apply(this, arguments);\n        }; // Use same guid so caller can remove using origFn\n\n\n        fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);\n      }\n\n      return this.each(function () {\n        jQuery.event.add(this, types, fn, data, selector);\n      });\n    },\n    one: function one(types, selector, data, fn) {\n      return this.on(types, selector, data, fn, 1);\n    },\n    off: function off(types, selector, fn) {\n      var handleObj, type;\n\n      if (types && types.preventDefault && types.handleObj) {\n        // ( event )  dispatched jQuery.Event\n        handleObj = types.handleObj;\n        jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + \".\" + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);\n        return this;\n      }\n\n      if (_typeof(types) === \"object\") {\n        // ( types-object [, selector] )\n        for (type in types) {\n          this.off(type, selector, types[type]);\n        }\n\n        return this;\n      }\n\n      if (selector === false || typeof selector === \"function\") {\n        // ( types [, fn] )\n        fn = selector;\n        selector = undefined;\n      }\n\n      if (fn === false) {\n        fn = returnFalse;\n      }\n\n      return this.each(function () {\n        jQuery.event.remove(this, types, fn, selector);\n      });\n    },\n    bind: function bind(types, data, fn) {\n      return this.on(types, null, data, fn);\n    },\n    unbind: function unbind(types, fn) {\n      return this.off(types, null, fn);\n    },\n    delegate: function delegate(selector, types, data, fn) {\n      return this.on(types, selector, data, fn);\n    },\n    undelegate: function undelegate(selector, types, fn) {\n      // ( namespace ) or ( selector, types [, fn] )\n      return arguments.length === 1 ? this.off(selector, \"**\") : this.off(types, selector || \"**\", fn);\n    },\n    trigger: function trigger(type, data) {\n      return this.each(function () {\n        jQuery.event.trigger(type, data, this);\n      });\n    },\n    triggerHandler: function triggerHandler(type, data) {\n      var elem = this[0];\n\n      if (elem) {\n        return jQuery.event.trigger(type, data, elem, true);\n      }\n    }\n  });\n  /*!\n   * Sizzle CSS Selector Engine\n   * Copyright 2012 jQuery Foundation and other contributors\n   * Released under the MIT license\n   * http://sizzlejs.com/\n   */\n\n  (function (window, undefined) {\n    var i,\n        cachedruns,\n        Expr,\n        getText,\n        isXML,\n        compile,\n        hasDuplicate,\n        outermostContext,\n        // Local document vars\n    setDocument,\n        document,\n        docElem,\n        documentIsXML,\n        rbuggyQSA,\n        rbuggyMatches,\n        matches,\n        contains,\n        sortOrder,\n        // Instance-specific data\n    expando = \"sizzle\" + -new Date(),\n        preferredDoc = window.document,\n        support = {},\n        dirruns = 0,\n        done = 0,\n        classCache = createCache(),\n        tokenCache = createCache(),\n        compilerCache = createCache(),\n        // General-purpose constants\n    strundefined = _typeof(undefined),\n        MAX_NEGATIVE = 1 << 31,\n        // Array methods\n    arr = [],\n        pop = arr.pop,\n        push = arr.push,\n        slice = arr.slice,\n        // Use a stripped-down indexOf if we can't use a native one\n    indexOf = arr.indexOf || function (elem) {\n      var i = 0,\n          len = this.length;\n\n      for (; i < len; i++) {\n        if (this[i] === elem) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n        // Regular expressions\n    // Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace\n    whitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n        // http://www.w3.org/TR/css3-syntax/#characters\n    characterEncoding = \"(?:\\\\\\\\.|[\\\\w-]|[^\\\\x00-\\\\xa0])+\",\n        // Loosely modeled on CSS identifier characters\n    // An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors\n    // Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\n    identifier = characterEncoding.replace(\"w\", \"w#\"),\n        // Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors\n    operators = \"([*^$|!~]?=)\",\n        attributes = \"\\\\[\" + whitespace + \"*(\" + characterEncoding + \")\" + whitespace + \"*(?:\" + operators + whitespace + \"*(?:(['\\\"])((?:\\\\\\\\.|[^\\\\\\\\])*?)\\\\3|(\" + identifier + \")|)|)\" + whitespace + \"*\\\\]\",\n        // Prefer arguments quoted,\n    //   then not containing pseudos/brackets,\n    //   then attribute selectors/non-parenthetical expressions,\n    //   then anything else\n    // These preferences are here to reduce the number of selectors\n    //   needing tokenize in the PSEUDO preFilter\n    pseudos = \":(\" + characterEncoding + \")(?:\\\\(((['\\\"])((?:\\\\\\\\.|[^\\\\\\\\])*?)\\\\3|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes.replace(3, 8) + \")*)|.*)\\\\)|)\",\n        // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n    rtrim = new RegExp(\"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\"),\n        rcomma = new RegExp(\"^\" + whitespace + \"*,\" + whitespace + \"*\"),\n        rcombinators = new RegExp(\"^\" + whitespace + \"*([\\\\x20\\\\t\\\\r\\\\n\\\\f>+~])\" + whitespace + \"*\"),\n        rpseudo = new RegExp(pseudos),\n        ridentifier = new RegExp(\"^\" + identifier + \"$\"),\n        matchExpr = {\n      \"ID\": new RegExp(\"^#(\" + characterEncoding + \")\"),\n      \"CLASS\": new RegExp(\"^\\\\.(\" + characterEncoding + \")\"),\n      \"NAME\": new RegExp(\"^\\\\[name=['\\\"]?(\" + characterEncoding + \")['\\\"]?\\\\]\"),\n      \"TAG\": new RegExp(\"^(\" + characterEncoding.replace(\"w\", \"w*\") + \")\"),\n      \"ATTR\": new RegExp(\"^\" + attributes),\n      \"PSEUDO\": new RegExp(\"^\" + pseudos),\n      \"CHILD\": new RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + whitespace + \"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" + whitespace + \"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\"),\n      // For use in libraries implementing .is()\n      // We use this for POS matching in `select`\n      \"needsContext\": new RegExp(\"^\" + whitespace + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" + whitespace + \"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\")\n    },\n        rsibling = /[\\x20\\t\\r\\n\\f]*[+~]/,\n        rnative = /^[^{]+\\{\\s*\\[native code/,\n        // Easily-parseable/retrievable ID or TAG or CLASS selectors\n    rquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n        rinputs = /^(?:input|select|textarea|button)$/i,\n        rheader = /^h\\d$/i,\n        rescape = /'|\\\\/g,\n        rattributeQuotes = /\\=[\\x20\\t\\r\\n\\f]*([^'\"\\]]*)[\\x20\\t\\r\\n\\f]*\\]/g,\n        // CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n    runescape = /\\\\([\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|.)/g,\n        funescape = function funescape(_, escaped) {\n      var high = \"0x\" + escaped - 0x10000; // NaN means non-codepoint\n\n      return high !== high ? escaped : // BMP codepoint\n      high < 0 ? String.fromCharCode(high + 0x10000) : // Supplemental Plane codepoint (surrogate pair)\n      String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);\n    }; // Use a stripped-down slice if we can't use a native one\n\n\n    try {\n      slice.call(preferredDoc.documentElement.childNodes, 0)[0].nodeType;\n    } catch (e) {\n      slice = function slice(i) {\n        var elem,\n            results = [];\n\n        while (elem = this[i++]) {\n          results.push(elem);\n        }\n\n        return results;\n      };\n    }\n    /**\n     * For feature detection\n     * @param {Function} fn The function to test for native support\n     */\n\n\n    function isNative(fn) {\n      return rnative.test(fn + \"\");\n    }\n    /**\n     * Create key-value caches of limited size\n     * @returns {Function(string, Object)} Returns the Object data after storing it on itself with\n     *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n     *\tdeleting the oldest entry\n     */\n\n\n    function createCache() {\n      var _cache,\n          keys = [];\n\n      return _cache = function cache(key, value) {\n        // Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n        if (keys.push(key += \" \") > Expr.cacheLength) {\n          // Only keep the most recent entries\n          delete _cache[keys.shift()];\n        }\n\n        return _cache[key] = value;\n      };\n    }\n    /**\n     * Mark a function for special use by Sizzle\n     * @param {Function} fn The function to mark\n     */\n\n\n    function markFunction(fn) {\n      fn[expando] = true;\n      return fn;\n    }\n    /**\n     * Support testing using an element\n     * @param {Function} fn Passed the created div and expects a boolean result\n     */\n\n\n    function assert(fn) {\n      var div = document.createElement(\"div\");\n\n      try {\n        return fn(div);\n      } catch (e) {\n        return false;\n      } finally {\n        // release memory in IE\n        div = null;\n      }\n    }\n\n    function Sizzle(selector, context, results, seed) {\n      var match, elem, m, nodeType, // QSA vars\n      i, groups, old, nid, newContext, newSelector;\n\n      if ((context ? context.ownerDocument || context : preferredDoc) !== document) {\n        setDocument(context);\n      }\n\n      context = context || document;\n      results = results || [];\n\n      if (!selector || typeof selector !== \"string\") {\n        return results;\n      }\n\n      if ((nodeType = context.nodeType) !== 1 && nodeType !== 9) {\n        return [];\n      }\n\n      if (!documentIsXML && !seed) {\n        // Shortcuts\n        if (match = rquickExpr.exec(selector)) {\n          // Speed-up: Sizzle(\"#ID\")\n          if (m = match[1]) {\n            if (nodeType === 9) {\n              elem = context.getElementById(m); // Check parentNode to catch when Blackberry 4.6 returns\n              // nodes that are no longer in the document #6963\n\n              if (elem && elem.parentNode) {\n                // Handle the case where IE, Opera, and Webkit return items\n                // by name instead of ID\n                if (elem.id === m) {\n                  results.push(elem);\n                  return results;\n                }\n              } else {\n                return results;\n              }\n            } else {\n              // Context is not a document\n              if (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) && contains(context, elem) && elem.id === m) {\n                results.push(elem);\n                return results;\n              }\n            } // Speed-up: Sizzle(\"TAG\")\n\n          } else if (match[2]) {\n            push.apply(results, slice.call(context.getElementsByTagName(selector), 0));\n            return results; // Speed-up: Sizzle(\".CLASS\")\n          } else if ((m = match[3]) && support.getByClassName && context.getElementsByClassName) {\n            push.apply(results, slice.call(context.getElementsByClassName(m), 0));\n            return results;\n          }\n        } // QSA path\n\n\n        if (support.qsa && !rbuggyQSA.test(selector)) {\n          old = true;\n          nid = expando;\n          newContext = context;\n          newSelector = nodeType === 9 && selector; // qSA works strangely on Element-rooted queries\n          // We can work around this by specifying an extra ID on the root\n          // and working up from there (Thanks to Andrew Dupont for the technique)\n          // IE 8 doesn't work on object elements\n\n          if (nodeType === 1 && context.nodeName.toLowerCase() !== \"object\") {\n            groups = tokenize(selector);\n\n            if (old = context.getAttribute(\"id\")) {\n              nid = old.replace(rescape, \"\\\\$&\");\n            } else {\n              context.setAttribute(\"id\", nid);\n            }\n\n            nid = \"[id='\" + nid + \"'] \";\n            i = groups.length;\n\n            while (i--) {\n              groups[i] = nid + toSelector(groups[i]);\n            }\n\n            newContext = rsibling.test(selector) && context.parentNode || context;\n            newSelector = groups.join(\",\");\n          }\n\n          if (newSelector) {\n            try {\n              push.apply(results, slice.call(newContext.querySelectorAll(newSelector), 0));\n              return results;\n            } catch (qsaError) {} finally {\n              if (!old) {\n                context.removeAttribute(\"id\");\n              }\n            }\n          }\n        }\n      } // All others\n\n\n      return select(selector.replace(rtrim, \"$1\"), context, results, seed);\n    }\n    /**\n     * Detect xml\n     * @param {Element|Object} elem An element or a document\n     */\n\n\n    isXML = Sizzle.isXML = function (elem) {\n      // documentElement is verified for cases where it doesn't yet exist\n      // (such as loading iframes in IE - #4833)\n      var documentElement = elem && (elem.ownerDocument || elem).documentElement;\n      return documentElement ? documentElement.nodeName !== \"HTML\" : false;\n    };\n    /**\n     * Sets document-related variables once based on the current document\n     * @param {Element|Object} [doc] An element or document object to use to set the document\n     * @returns {Object} Returns the current document\n     */\n\n\n    setDocument = Sizzle.setDocument = function (node) {\n      var doc = node ? node.ownerDocument || node : preferredDoc; // If no document and documentElement is available, return\n\n      if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {\n        return document;\n      } // Set our document\n\n\n      document = doc;\n      docElem = doc.documentElement; // Support tests\n\n      documentIsXML = isXML(doc); // Check if getElementsByTagName(\"*\") returns only elements\n\n      support.tagNameNoComments = assert(function (div) {\n        div.appendChild(doc.createComment(\"\"));\n        return !div.getElementsByTagName(\"*\").length;\n      }); // Check if attributes should be retrieved by attribute nodes\n\n      support.attributes = assert(function (div) {\n        div.innerHTML = \"<select></select>\";\n\n        var type = _typeof(div.lastChild.getAttribute(\"multiple\")); // IE8 returns a string for some attributes even when not present\n\n\n        return type !== \"boolean\" && type !== \"string\";\n      }); // Check if getElementsByClassName can be trusted\n\n      support.getByClassName = assert(function (div) {\n        // Opera can't find a second classname (in 9.6)\n        div.innerHTML = \"<div class='hidden e'></div><div class='hidden'></div>\";\n\n        if (!div.getElementsByClassName || !div.getElementsByClassName(\"e\").length) {\n          return false;\n        } // Safari 3.2 caches class attributes and doesn't catch changes\n\n\n        div.lastChild.className = \"e\";\n        return div.getElementsByClassName(\"e\").length === 2;\n      }); // Check if getElementById returns elements by name\n      // Check if getElementsByName privileges form controls or returns elements by ID\n\n      support.getByName = assert(function (div) {\n        // Inject content\n        div.id = expando + 0;\n        div.innerHTML = \"<a name='\" + expando + \"'></a><div name='\" + expando + \"'></div>\";\n        docElem.insertBefore(div, docElem.firstChild); // Test\n\n        var pass = doc.getElementsByName && // buggy browsers will return fewer than the correct 2\n        doc.getElementsByName(expando).length === 2 + // buggy browsers will return more than the correct 0\n        doc.getElementsByName(expando + 0).length;\n        support.getIdNotName = !doc.getElementById(expando); // Cleanup\n\n        docElem.removeChild(div);\n        return pass;\n      }); // IE6/7 return modified attributes\n\n      Expr.attrHandle = assert(function (div) {\n        div.innerHTML = \"<a href='#'></a>\";\n        return div.firstChild && _typeof(div.firstChild.getAttribute) !== strundefined && div.firstChild.getAttribute(\"href\") === \"#\";\n      }) ? {} : {\n        \"href\": function href(elem) {\n          return elem.getAttribute(\"href\", 2);\n        },\n        \"type\": function type(elem) {\n          return elem.getAttribute(\"type\");\n        }\n      }; // ID find and filter\n\n      if (support.getIdNotName) {\n        Expr.find[\"ID\"] = function (id, context) {\n          if (_typeof(context.getElementById) !== strundefined && !documentIsXML) {\n            var m = context.getElementById(id); // Check parentNode to catch when Blackberry 4.6 returns\n            // nodes that are no longer in the document #6963\n\n            return m && m.parentNode ? [m] : [];\n          }\n        };\n\n        Expr.filter[\"ID\"] = function (id) {\n          var attrId = id.replace(runescape, funescape);\n          return function (elem) {\n            return elem.getAttribute(\"id\") === attrId;\n          };\n        };\n      } else {\n        Expr.find[\"ID\"] = function (id, context) {\n          if (_typeof(context.getElementById) !== strundefined && !documentIsXML) {\n            var m = context.getElementById(id);\n            return m ? m.id === id || _typeof(m.getAttributeNode) !== strundefined && m.getAttributeNode(\"id\").value === id ? [m] : undefined : [];\n          }\n        };\n\n        Expr.filter[\"ID\"] = function (id) {\n          var attrId = id.replace(runescape, funescape);\n          return function (elem) {\n            var node = _typeof(elem.getAttributeNode) !== strundefined && elem.getAttributeNode(\"id\");\n            return node && node.value === attrId;\n          };\n        };\n      } // Tag\n\n\n      Expr.find[\"TAG\"] = support.tagNameNoComments ? function (tag, context) {\n        if (_typeof(context.getElementsByTagName) !== strundefined) {\n          return context.getElementsByTagName(tag);\n        }\n      } : function (tag, context) {\n        var elem,\n            tmp = [],\n            i = 0,\n            results = context.getElementsByTagName(tag); // Filter out possible comments\n\n        if (tag === \"*\") {\n          while (elem = results[i++]) {\n            if (elem.nodeType === 1) {\n              tmp.push(elem);\n            }\n          }\n\n          return tmp;\n        }\n\n        return results;\n      }; // Name\n\n      Expr.find[\"NAME\"] = support.getByName && function (tag, context) {\n        if (_typeof(context.getElementsByName) !== strundefined) {\n          return context.getElementsByName(name);\n        }\n      }; // Class\n\n\n      Expr.find[\"CLASS\"] = support.getByClassName && function (className, context) {\n        if (_typeof(context.getElementsByClassName) !== strundefined && !documentIsXML) {\n          return context.getElementsByClassName(className);\n        }\n      }; // QSA and matchesSelector support\n      // matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\n\n      rbuggyMatches = []; // qSa(:focus) reports false when true (Chrome 21),\n      // no need to also add to buggyMatches since matches checks buggyQSA\n      // A support test would require too much code (would include document ready)\n\n      rbuggyQSA = [\":focus\"];\n\n      if (support.qsa = isNative(doc.querySelectorAll)) {\n        // Build QSA regex\n        // Regex strategy adopted from Diego Perini\n        assert(function (div) {\n          // Select is set to empty string on purpose\n          // This is to test IE's treatment of not explictly\n          // setting a boolean content attribute,\n          // since its presence should be enough\n          // http://bugs.jquery.com/ticket/12359\n          div.innerHTML = \"<select><option selected=''></option></select>\"; // IE8 - Some boolean attributes are not treated correctly\n\n          if (!div.querySelectorAll(\"[selected]\").length) {\n            rbuggyQSA.push(\"\\\\[\" + whitespace + \"*(?:checked|disabled|ismap|multiple|readonly|selected|value)\");\n          } // Webkit/Opera - :checked should return selected option elements\n          // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n          // IE8 throws error here and will not see later tests\n\n\n          if (!div.querySelectorAll(\":checked\").length) {\n            rbuggyQSA.push(\":checked\");\n          }\n        });\n        assert(function (div) {\n          // Opera 10-12/IE8 - ^= $= *= and empty values\n          // Should not select anything\n          div.innerHTML = \"<input type='hidden' i=''/>\";\n\n          if (div.querySelectorAll(\"[i^='']\").length) {\n            rbuggyQSA.push(\"[*^$]=\" + whitespace + \"*(?:\\\"\\\"|'')\");\n          } // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n          // IE8 throws error here and will not see later tests\n\n\n          if (!div.querySelectorAll(\":enabled\").length) {\n            rbuggyQSA.push(\":enabled\", \":disabled\");\n          } // Opera 10-11 does not throw on post-comma invalid pseudos\n\n\n          div.querySelectorAll(\"*,:x\");\n          rbuggyQSA.push(\",.*:\");\n        });\n      }\n\n      if (support.matchesSelector = isNative(matches = docElem.matchesSelector || docElem.mozMatchesSelector || docElem.webkitMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {\n        assert(function (div) {\n          // Check to see if it's possible to do matchesSelector\n          // on a disconnected node (IE 9)\n          support.disconnectedMatch = matches.call(div, \"div\"); // This should fail with an exception\n          // Gecko does not error, returns false instead\n\n          matches.call(div, \"[s!='']:x\");\n          rbuggyMatches.push(\"!=\", pseudos);\n        });\n      }\n\n      rbuggyQSA = new RegExp(rbuggyQSA.join(\"|\"));\n      rbuggyMatches = new RegExp(rbuggyMatches.join(\"|\")); // Element contains another\n      // Purposefully does not implement inclusive descendent\n      // As in, an element does not contain itself\n\n      contains = isNative(docElem.contains) || docElem.compareDocumentPosition ? function (a, b) {\n        var adown = a.nodeType === 9 ? a.documentElement : a,\n            bup = b && b.parentNode;\n        return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));\n      } : function (a, b) {\n        if (b) {\n          while (b = b.parentNode) {\n            if (b === a) {\n              return true;\n            }\n          }\n        }\n\n        return false;\n      }; // Document order sorting\n\n      sortOrder = docElem.compareDocumentPosition ? function (a, b) {\n        var compare;\n\n        if (a === b) {\n          hasDuplicate = true;\n          return 0;\n        }\n\n        if (compare = b.compareDocumentPosition && a.compareDocumentPosition && a.compareDocumentPosition(b)) {\n          if (compare & 1 || a.parentNode && a.parentNode.nodeType === 11) {\n            if (a === doc || contains(preferredDoc, a)) {\n              return -1;\n            }\n\n            if (b === doc || contains(preferredDoc, b)) {\n              return 1;\n            }\n\n            return 0;\n          }\n\n          return compare & 4 ? -1 : 1;\n        }\n\n        return a.compareDocumentPosition ? -1 : 1;\n      } : function (a, b) {\n        var cur,\n            i = 0,\n            aup = a.parentNode,\n            bup = b.parentNode,\n            ap = [a],\n            bp = [b]; // Exit early if the nodes are identical\n\n        if (a === b) {\n          hasDuplicate = true;\n          return 0; // Parentless nodes are either documents or disconnected\n        } else if (!aup || !bup) {\n          return a === doc ? -1 : b === doc ? 1 : aup ? -1 : bup ? 1 : 0; // If the nodes are siblings, we can do a quick check\n        } else if (aup === bup) {\n          return siblingCheck(a, b);\n        } // Otherwise we need full lists of their ancestors for comparison\n\n\n        cur = a;\n\n        while (cur = cur.parentNode) {\n          ap.unshift(cur);\n        }\n\n        cur = b;\n\n        while (cur = cur.parentNode) {\n          bp.unshift(cur);\n        } // Walk down the tree looking for a discrepancy\n\n\n        while (ap[i] === bp[i]) {\n          i++;\n        }\n\n        return i ? // Do a sibling check if the nodes have a common ancestor\n        siblingCheck(ap[i], bp[i]) : // Otherwise nodes in our document sort first\n        ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;\n      }; // Always assume the presence of duplicates if sort doesn't\n      // pass them to our comparison function (as in Google Chrome).\n\n      hasDuplicate = false;\n      [0, 0].sort(sortOrder);\n      support.detectDuplicates = hasDuplicate;\n      return document;\n    };\n\n    Sizzle.matches = function (expr, elements) {\n      return Sizzle(expr, null, null, elements);\n    };\n\n    Sizzle.matchesSelector = function (elem, expr) {\n      // Set document vars if needed\n      if ((elem.ownerDocument || elem) !== document) {\n        setDocument(elem);\n      } // Make sure that attribute selectors are quoted\n\n\n      expr = expr.replace(rattributeQuotes, \"='$1']\"); // rbuggyQSA always contains :focus, so no need for an existence check\n\n      if (support.matchesSelector && !documentIsXML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && !rbuggyQSA.test(expr)) {\n        try {\n          var ret = matches.call(elem, expr); // IE 9's matchesSelector returns false on disconnected nodes\n\n          if (ret || support.disconnectedMatch || // As well, disconnected nodes are said to be in a document\n          // fragment in IE 9\n          elem.document && elem.document.nodeType !== 11) {\n            return ret;\n          }\n        } catch (e) {}\n      }\n\n      return Sizzle(expr, document, null, [elem]).length > 0;\n    };\n\n    Sizzle.contains = function (context, elem) {\n      // Set document vars if needed\n      if ((context.ownerDocument || context) !== document) {\n        setDocument(context);\n      }\n\n      return contains(context, elem);\n    };\n\n    Sizzle.attr = function (elem, name) {\n      var val; // Set document vars if needed\n\n      if ((elem.ownerDocument || elem) !== document) {\n        setDocument(elem);\n      }\n\n      if (!documentIsXML) {\n        name = name.toLowerCase();\n      }\n\n      if (val = Expr.attrHandle[name]) {\n        return val(elem);\n      }\n\n      if (documentIsXML || support.attributes) {\n        return elem.getAttribute(name);\n      }\n\n      return ((val = elem.getAttributeNode(name)) || elem.getAttribute(name)) && elem[name] === true ? name : val && val.specified ? val.value : null;\n    };\n\n    Sizzle.error = function (msg) {\n      throw new Error(\"Syntax error, unrecognized expression: \" + msg);\n    }; // Document sorting and removing duplicates\n\n\n    Sizzle.uniqueSort = function (results) {\n      var elem,\n          duplicates = [],\n          i = 1,\n          j = 0; // Unless we *know* we can detect duplicates, assume their presence\n\n      hasDuplicate = !support.detectDuplicates;\n      results.sort(sortOrder);\n\n      if (hasDuplicate) {\n        for (; elem = results[i]; i++) {\n          if (elem === results[i - 1]) {\n            j = duplicates.push(i);\n          }\n        }\n\n        while (j--) {\n          results.splice(duplicates[j], 1);\n        }\n      }\n\n      return results;\n    };\n\n    function siblingCheck(a, b) {\n      var cur = b && a,\n          diff = cur && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE); // Use IE sourceIndex if available on both nodes\n\n      if (diff) {\n        return diff;\n      } // Check if b follows a\n\n\n      if (cur) {\n        while (cur = cur.nextSibling) {\n          if (cur === b) {\n            return -1;\n          }\n        }\n      }\n\n      return a ? 1 : -1;\n    } // Returns a function to use in pseudos for input types\n\n\n    function createInputPseudo(type) {\n      return function (elem) {\n        var name = elem.nodeName.toLowerCase();\n        return name === \"input\" && elem.type === type;\n      };\n    } // Returns a function to use in pseudos for buttons\n\n\n    function createButtonPseudo(type) {\n      return function (elem) {\n        var name = elem.nodeName.toLowerCase();\n        return (name === \"input\" || name === \"button\") && elem.type === type;\n      };\n    } // Returns a function to use in pseudos for positionals\n\n\n    function createPositionalPseudo(fn) {\n      return markFunction(function (argument) {\n        argument = +argument;\n        return markFunction(function (seed, matches) {\n          var j,\n              matchIndexes = fn([], seed.length, argument),\n              i = matchIndexes.length; // Match elements found at the specified indexes\n\n          while (i--) {\n            if (seed[j = matchIndexes[i]]) {\n              seed[j] = !(matches[j] = seed[j]);\n            }\n          }\n        });\n      });\n    }\n    /**\n     * Utility function for retrieving the text value of an array of DOM nodes\n     * @param {Array|Element} elem\n     */\n\n\n    getText = Sizzle.getText = function (elem) {\n      var node,\n          ret = \"\",\n          i = 0,\n          nodeType = elem.nodeType;\n\n      if (!nodeType) {\n        // If no nodeType, this is expected to be an array\n        for (; node = elem[i]; i++) {\n          // Do not traverse comment nodes\n          ret += getText(node);\n        }\n      } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {\n        // Use textContent for elements\n        // innerText usage removed for consistency of new lines (see #11153)\n        if (typeof elem.textContent === \"string\") {\n          return elem.textContent;\n        } else {\n          // Traverse its children\n          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {\n            ret += getText(elem);\n          }\n        }\n      } else if (nodeType === 3 || nodeType === 4) {\n        return elem.nodeValue;\n      } // Do not include comment or processing instruction nodes\n\n\n      return ret;\n    };\n\n    Expr = Sizzle.selectors = {\n      // Can be adjusted by the user\n      cacheLength: 50,\n      createPseudo: markFunction,\n      match: matchExpr,\n      find: {},\n      relative: {\n        \">\": {\n          dir: \"parentNode\",\n          first: true\n        },\n        \" \": {\n          dir: \"parentNode\"\n        },\n        \"+\": {\n          dir: \"previousSibling\",\n          first: true\n        },\n        \"~\": {\n          dir: \"previousSibling\"\n        }\n      },\n      preFilter: {\n        \"ATTR\": function ATTR(match) {\n          match[1] = match[1].replace(runescape, funescape); // Move the given value to match[3] whether quoted or unquoted\n\n          match[3] = (match[4] || match[5] || \"\").replace(runescape, funescape);\n\n          if (match[2] === \"~=\") {\n            match[3] = \" \" + match[3] + \" \";\n          }\n\n          return match.slice(0, 4);\n        },\n        \"CHILD\": function CHILD(match) {\n          /* matches from matchExpr[\"CHILD\"]\n              1 type (only|nth|...)\n              2 what (child|of-type)\n              3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n              4 xn-component of xn+y argument ([+-]?\\d*n|)\n              5 sign of xn-component\n              6 x of xn-component\n              7 sign of y-component\n              8 y of y-component\n          */\n          match[1] = match[1].toLowerCase();\n\n          if (match[1].slice(0, 3) === \"nth\") {\n            // nth-* requires argument\n            if (!match[3]) {\n              Sizzle.error(match[0]);\n            } // numeric x and y parameters for Expr.filter.CHILD\n            // remember that false/true cast respectively to 0/1\n\n\n            match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === \"even\" || match[3] === \"odd\"));\n            match[5] = +(match[7] + match[8] || match[3] === \"odd\"); // other types prohibit arguments\n          } else if (match[3]) {\n            Sizzle.error(match[0]);\n          }\n\n          return match;\n        },\n        \"PSEUDO\": function PSEUDO(match) {\n          var excess,\n              unquoted = !match[5] && match[2];\n\n          if (matchExpr[\"CHILD\"].test(match[0])) {\n            return null;\n          } // Accept quoted arguments as-is\n\n\n          if (match[4]) {\n            match[2] = match[4]; // Strip excess characters from unquoted arguments\n          } else if (unquoted && rpseudo.test(unquoted) && ( // Get excess from tokenize (recursively)\n          excess = tokenize(unquoted, true)) && ( // advance to the next closing parenthesis\n          excess = unquoted.indexOf(\")\", unquoted.length - excess) - unquoted.length)) {\n            // excess is a negative index\n            match[0] = match[0].slice(0, excess);\n            match[2] = unquoted.slice(0, excess);\n          } // Return only captures needed by the pseudo filter method (type and argument)\n\n\n          return match.slice(0, 3);\n        }\n      },\n      filter: {\n        \"TAG\": function TAG(nodeName) {\n          if (nodeName === \"*\") {\n            return function () {\n              return true;\n            };\n          }\n\n          nodeName = nodeName.replace(runescape, funescape).toLowerCase();\n          return function (elem) {\n            return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n          };\n        },\n        \"CLASS\": function CLASS(className) {\n          var pattern = classCache[className + \" \"];\n          return pattern || (pattern = new RegExp(\"(^|\" + whitespace + \")\" + className + \"(\" + whitespace + \"|$)\")) && classCache(className, function (elem) {\n            return pattern.test(elem.className || _typeof(elem.getAttribute) !== strundefined && elem.getAttribute(\"class\") || \"\");\n          });\n        },\n        \"ATTR\": function ATTR(name, operator, check) {\n          return function (elem) {\n            var result = Sizzle.attr(elem, name);\n\n            if (result == null) {\n              return operator === \"!=\";\n            }\n\n            if (!operator) {\n              return true;\n            }\n\n            result += \"\";\n            return operator === \"=\" ? result === check : operator === \"!=\" ? result !== check : operator === \"^=\" ? check && result.indexOf(check) === 0 : operator === \"*=\" ? check && result.indexOf(check) > -1 : operator === \"$=\" ? check && result.slice(-check.length) === check : operator === \"~=\" ? (\" \" + result + \" \").indexOf(check) > -1 : operator === \"|=\" ? result === check || result.slice(0, check.length + 1) === check + \"-\" : false;\n          };\n        },\n        \"CHILD\": function CHILD(type, what, argument, first, last) {\n          var simple = type.slice(0, 3) !== \"nth\",\n              forward = type.slice(-4) !== \"last\",\n              ofType = what === \"of-type\";\n          return first === 1 && last === 0 ? // Shortcut for :nth-*(n)\n          function (elem) {\n            return !!elem.parentNode;\n          } : function (elem, context, xml) {\n            var cache,\n                outerCache,\n                node,\n                diff,\n                nodeIndex,\n                start,\n                dir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n                parent = elem.parentNode,\n                name = ofType && elem.nodeName.toLowerCase(),\n                useCache = !xml && !ofType;\n\n            if (parent) {\n              // :(first|last|only)-(child|of-type)\n              if (simple) {\n                while (dir) {\n                  node = elem;\n\n                  while (node = node[dir]) {\n                    if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {\n                      return false;\n                    }\n                  } // Reverse direction for :only-* (if we haven't yet done so)\n\n\n                  start = dir = type === \"only\" && !start && \"nextSibling\";\n                }\n\n                return true;\n              }\n\n              start = [forward ? parent.firstChild : parent.lastChild]; // non-xml :nth-child(...) stores cache data on `parent`\n\n              if (forward && useCache) {\n                // Seek `elem` from a previously-cached index\n                outerCache = parent[expando] || (parent[expando] = {});\n                cache = outerCache[type] || [];\n                nodeIndex = cache[0] === dirruns && cache[1];\n                diff = cache[0] === dirruns && cache[2];\n                node = nodeIndex && parent.childNodes[nodeIndex];\n\n                while (node = ++nodeIndex && node && node[dir] || ( // Fallback to seeking `elem` from the start\n                diff = nodeIndex = 0) || start.pop()) {\n                  // When found, cache indexes on `parent` and break\n                  if (node.nodeType === 1 && ++diff && node === elem) {\n                    outerCache[type] = [dirruns, nodeIndex, diff];\n                    break;\n                  }\n                } // Use previously-cached element index if available\n\n              } else if (useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns) {\n                diff = cache[1]; // xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)\n              } else {\n                // Use the same loop as above to seek `elem` from the start\n                while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {\n                  if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {\n                    // Cache the index of each encountered element\n                    if (useCache) {\n                      (node[expando] || (node[expando] = {}))[type] = [dirruns, diff];\n                    }\n\n                    if (node === elem) {\n                      break;\n                    }\n                  }\n                }\n              } // Incorporate the offset, then check against cycle size\n\n\n              diff -= last;\n              return diff === first || diff % first === 0 && diff / first >= 0;\n            }\n          };\n        },\n        \"PSEUDO\": function PSEUDO(pseudo, argument) {\n          // pseudo-class names are case-insensitive\n          // http://www.w3.org/TR/selectors/#pseudo-classes\n          // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n          // Remember that setFilters inherits from pseudos\n          var args,\n              fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error(\"unsupported pseudo: \" + pseudo); // The user may use createPseudo to indicate that\n          // arguments are needed to create the filter function\n          // just as Sizzle does\n\n          if (fn[expando]) {\n            return fn(argument);\n          } // But maintain support for old signatures\n\n\n          if (fn.length > 1) {\n            args = [pseudo, pseudo, \"\", argument];\n            return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {\n              var idx,\n                  matched = fn(seed, argument),\n                  i = matched.length;\n\n              while (i--) {\n                idx = indexOf.call(seed, matched[i]);\n                seed[idx] = !(matches[idx] = matched[i]);\n              }\n            }) : function (elem) {\n              return fn(elem, 0, args);\n            };\n          }\n\n          return fn;\n        }\n      },\n      pseudos: {\n        // Potentially complex pseudos\n        \"not\": markFunction(function (selector) {\n          // Trim the selector passed to compile\n          // to avoid treating leading and trailing\n          // spaces as combinators\n          var input = [],\n              results = [],\n              matcher = compile(selector.replace(rtrim, \"$1\"));\n          return matcher[expando] ? markFunction(function (seed, matches, context, xml) {\n            var elem,\n                unmatched = matcher(seed, null, xml, []),\n                i = seed.length; // Match elements unmatched by `matcher`\n\n            while (i--) {\n              if (elem = unmatched[i]) {\n                seed[i] = !(matches[i] = elem);\n              }\n            }\n          }) : function (elem, context, xml) {\n            input[0] = elem;\n            matcher(input, null, xml, results);\n            return !results.pop();\n          };\n        }),\n        \"has\": markFunction(function (selector) {\n          return function (elem) {\n            return Sizzle(selector, elem).length > 0;\n          };\n        }),\n        \"contains\": markFunction(function (text) {\n          return function (elem) {\n            return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;\n          };\n        }),\n        // \"Whether an element is represented by a :lang() selector\n        // is based solely on the element's language value\n        // being equal to the identifier C,\n        // or beginning with the identifier C immediately followed by \"-\".\n        // The matching of C against the element's language value is performed case-insensitively.\n        // The identifier C does not have to be a valid language name.\"\n        // http://www.w3.org/TR/selectors/#lang-pseudo\n        \"lang\": markFunction(function (lang) {\n          // lang value must be a valid identifider\n          if (!ridentifier.test(lang || \"\")) {\n            Sizzle.error(\"unsupported lang: \" + lang);\n          }\n\n          lang = lang.replace(runescape, funescape).toLowerCase();\n          return function (elem) {\n            var elemLang;\n\n            do {\n              if (elemLang = documentIsXML ? elem.getAttribute(\"xml:lang\") || elem.getAttribute(\"lang\") : elem.lang) {\n                elemLang = elemLang.toLowerCase();\n                return elemLang === lang || elemLang.indexOf(lang + \"-\") === 0;\n              }\n            } while ((elem = elem.parentNode) && elem.nodeType === 1);\n\n            return false;\n          };\n        }),\n        // Miscellaneous\n        \"target\": function target(elem) {\n          var hash = window.location && window.location.hash;\n          return hash && hash.slice(1) === elem.id;\n        },\n        \"root\": function root(elem) {\n          return elem === docElem;\n        },\n        \"focus\": function focus(elem) {\n          return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\n        },\n        // Boolean properties\n        \"enabled\": function enabled(elem) {\n          return elem.disabled === false;\n        },\n        \"disabled\": function disabled(elem) {\n          return elem.disabled === true;\n        },\n        \"checked\": function checked(elem) {\n          // In CSS3, :checked should return both checked and selected elements\n          // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n          var nodeName = elem.nodeName.toLowerCase();\n          return nodeName === \"input\" && !!elem.checked || nodeName === \"option\" && !!elem.selected;\n        },\n        \"selected\": function selected(elem) {\n          // Accessing this property makes selected-by-default\n          // options in Safari work properly\n          if (elem.parentNode) {\n            elem.parentNode.selectedIndex;\n          }\n\n          return elem.selected === true;\n        },\n        // Contents\n        \"empty\": function empty(elem) {\n          // http://www.w3.org/TR/selectors/#empty-pseudo\n          // :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),\n          //   not comment, processing instructions, or others\n          // Thanks to Diego Perini for the nodeName shortcut\n          //   Greater than \"@\" means alpha characters (specifically not starting with \"#\" or \"?\")\n          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {\n            if (elem.nodeName > \"@\" || elem.nodeType === 3 || elem.nodeType === 4) {\n              return false;\n            }\n          }\n\n          return true;\n        },\n        \"parent\": function parent(elem) {\n          return !Expr.pseudos[\"empty\"](elem);\n        },\n        // Element/input types\n        \"header\": function header(elem) {\n          return rheader.test(elem.nodeName);\n        },\n        \"input\": function input(elem) {\n          return rinputs.test(elem.nodeName);\n        },\n        \"button\": function button(elem) {\n          var name = elem.nodeName.toLowerCase();\n          return name === \"input\" && elem.type === \"button\" || name === \"button\";\n        },\n        \"text\": function text(elem) {\n          var attr; // IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)\n          // use getAttribute instead to test this case\n\n          return elem.nodeName.toLowerCase() === \"input\" && elem.type === \"text\" && ((attr = elem.getAttribute(\"type\")) == null || attr.toLowerCase() === elem.type);\n        },\n        // Position-in-collection\n        \"first\": createPositionalPseudo(function () {\n          return [0];\n        }),\n        \"last\": createPositionalPseudo(function (matchIndexes, length) {\n          return [length - 1];\n        }),\n        \"eq\": createPositionalPseudo(function (matchIndexes, length, argument) {\n          return [argument < 0 ? argument + length : argument];\n        }),\n        \"even\": createPositionalPseudo(function (matchIndexes, length) {\n          var i = 0;\n\n          for (; i < length; i += 2) {\n            matchIndexes.push(i);\n          }\n\n          return matchIndexes;\n        }),\n        \"odd\": createPositionalPseudo(function (matchIndexes, length) {\n          var i = 1;\n\n          for (; i < length; i += 2) {\n            matchIndexes.push(i);\n          }\n\n          return matchIndexes;\n        }),\n        \"lt\": createPositionalPseudo(function (matchIndexes, length, argument) {\n          var i = argument < 0 ? argument + length : argument;\n\n          for (; --i >= 0;) {\n            matchIndexes.push(i);\n          }\n\n          return matchIndexes;\n        }),\n        \"gt\": createPositionalPseudo(function (matchIndexes, length, argument) {\n          var i = argument < 0 ? argument + length : argument;\n\n          for (; ++i < length;) {\n            matchIndexes.push(i);\n          }\n\n          return matchIndexes;\n        })\n      }\n    }; // Add button/input type pseudos\n\n    for (i in {\n      radio: true,\n      checkbox: true,\n      file: true,\n      password: true,\n      image: true\n    }) {\n      Expr.pseudos[i] = createInputPseudo(i);\n    }\n\n    for (i in {\n      submit: true,\n      reset: true\n    }) {\n      Expr.pseudos[i] = createButtonPseudo(i);\n    }\n\n    function tokenize(selector, parseOnly) {\n      var matched,\n          match,\n          tokens,\n          type,\n          soFar,\n          groups,\n          preFilters,\n          cached = tokenCache[selector + \" \"];\n\n      if (cached) {\n        return parseOnly ? 0 : cached.slice(0);\n      }\n\n      soFar = selector;\n      groups = [];\n      preFilters = Expr.preFilter;\n\n      while (soFar) {\n        // Comma and first run\n        if (!matched || (match = rcomma.exec(soFar))) {\n          if (match) {\n            // Don't consume trailing commas as valid\n            soFar = soFar.slice(match[0].length) || soFar;\n          }\n\n          groups.push(tokens = []);\n        }\n\n        matched = false; // Combinators\n\n        if (match = rcombinators.exec(soFar)) {\n          matched = match.shift();\n          tokens.push({\n            value: matched,\n            // Cast descendant combinators to space\n            type: match[0].replace(rtrim, \" \")\n          });\n          soFar = soFar.slice(matched.length);\n        } // Filters\n\n\n        for (type in Expr.filter) {\n          if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {\n            matched = match.shift();\n            tokens.push({\n              value: matched,\n              type: type,\n              matches: match\n            });\n            soFar = soFar.slice(matched.length);\n          }\n        }\n\n        if (!matched) {\n          break;\n        }\n      } // Return the length of the invalid excess\n      // if we're just parsing\n      // Otherwise, throw an error or return tokens\n\n\n      return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : // Cache the tokens\n      tokenCache(selector, groups).slice(0);\n    }\n\n    function toSelector(tokens) {\n      var i = 0,\n          len = tokens.length,\n          selector = \"\";\n\n      for (; i < len; i++) {\n        selector += tokens[i].value;\n      }\n\n      return selector;\n    }\n\n    function addCombinator(matcher, combinator, base) {\n      var dir = combinator.dir,\n          checkNonElements = base && dir === \"parentNode\",\n          doneName = done++;\n      return combinator.first ? // Check against closest ancestor/preceding element\n      function (elem, context, xml) {\n        while (elem = elem[dir]) {\n          if (elem.nodeType === 1 || checkNonElements) {\n            return matcher(elem, context, xml);\n          }\n        }\n      } : // Check against all ancestor/preceding elements\n      function (elem, context, xml) {\n        var data,\n            cache,\n            outerCache,\n            dirkey = dirruns + \" \" + doneName; // We can't set arbitrary data on XML nodes, so they don't benefit from dir caching\n\n        if (xml) {\n          while (elem = elem[dir]) {\n            if (elem.nodeType === 1 || checkNonElements) {\n              if (matcher(elem, context, xml)) {\n                return true;\n              }\n            }\n          }\n        } else {\n          while (elem = elem[dir]) {\n            if (elem.nodeType === 1 || checkNonElements) {\n              outerCache = elem[expando] || (elem[expando] = {});\n\n              if ((cache = outerCache[dir]) && cache[0] === dirkey) {\n                if ((data = cache[1]) === true || data === cachedruns) {\n                  return data === true;\n                }\n              } else {\n                cache = outerCache[dir] = [dirkey];\n                cache[1] = matcher(elem, context, xml) || cachedruns;\n\n                if (cache[1] === true) {\n                  return true;\n                }\n              }\n            }\n          }\n        }\n      };\n    }\n\n    function elementMatcher(matchers) {\n      return matchers.length > 1 ? function (elem, context, xml) {\n        var i = matchers.length;\n\n        while (i--) {\n          if (!matchers[i](elem, context, xml)) {\n            return false;\n          }\n        }\n\n        return true;\n      } : matchers[0];\n    }\n\n    function condense(unmatched, map, filter, context, xml) {\n      var elem,\n          newUnmatched = [],\n          i = 0,\n          len = unmatched.length,\n          mapped = map != null;\n\n      for (; i < len; i++) {\n        if (elem = unmatched[i]) {\n          if (!filter || filter(elem, context, xml)) {\n            newUnmatched.push(elem);\n\n            if (mapped) {\n              map.push(i);\n            }\n          }\n        }\n      }\n\n      return newUnmatched;\n    }\n\n    function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {\n      if (postFilter && !postFilter[expando]) {\n        postFilter = setMatcher(postFilter);\n      }\n\n      if (postFinder && !postFinder[expando]) {\n        postFinder = setMatcher(postFinder, postSelector);\n      }\n\n      return markFunction(function (seed, results, context, xml) {\n        var temp,\n            i,\n            elem,\n            preMap = [],\n            postMap = [],\n            preexisting = results.length,\n            // Get initial elements from seed or context\n        elems = seed || multipleContexts(selector || \"*\", context.nodeType ? [context] : context, []),\n            // Prefilter to get matcher input, preserving a map for seed-results synchronization\n        matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,\n            matcherOut = matcher ? // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n        postFinder || (seed ? preFilter : preexisting || postFilter) ? // ...intermediate processing is necessary\n        [] : // ...otherwise use results directly\n        results : matcherIn; // Find primary matches\n\n        if (matcher) {\n          matcher(matcherIn, matcherOut, context, xml);\n        } // Apply postFilter\n\n\n        if (postFilter) {\n          temp = condense(matcherOut, postMap);\n          postFilter(temp, [], context, xml); // Un-match failing elements by moving them back to matcherIn\n\n          i = temp.length;\n\n          while (i--) {\n            if (elem = temp[i]) {\n              matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);\n            }\n          }\n        }\n\n        if (seed) {\n          if (postFinder || preFilter) {\n            if (postFinder) {\n              // Get the final matcherOut by condensing this intermediate into postFinder contexts\n              temp = [];\n              i = matcherOut.length;\n\n              while (i--) {\n                if (elem = matcherOut[i]) {\n                  // Restore matcherIn since elem is not yet a final match\n                  temp.push(matcherIn[i] = elem);\n                }\n              }\n\n              postFinder(null, matcherOut = [], temp, xml);\n            } // Move matched elements from seed to results to keep them synchronized\n\n\n            i = matcherOut.length;\n\n            while (i--) {\n              if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf.call(seed, elem) : preMap[i]) > -1) {\n                seed[temp] = !(results[temp] = elem);\n              }\n            }\n          } // Add elements to results, through postFinder if defined\n\n        } else {\n          matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);\n\n          if (postFinder) {\n            postFinder(null, results, matcherOut, xml);\n          } else {\n            push.apply(results, matcherOut);\n          }\n        }\n      });\n    }\n\n    function matcherFromTokens(tokens) {\n      var checkContext,\n          matcher,\n          j,\n          len = tokens.length,\n          leadingRelative = Expr.relative[tokens[0].type],\n          implicitRelative = leadingRelative || Expr.relative[\" \"],\n          i = leadingRelative ? 1 : 0,\n          // The foundational matcher ensures that elements are reachable from top-level context(s)\n      matchContext = addCombinator(function (elem) {\n        return elem === checkContext;\n      }, implicitRelative, true),\n          matchAnyContext = addCombinator(function (elem) {\n        return indexOf.call(checkContext, elem) > -1;\n      }, implicitRelative, true),\n          matchers = [function (elem, context, xml) {\n        return !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));\n      }];\n\n      for (; i < len; i++) {\n        if (matcher = Expr.relative[tokens[i].type]) {\n          matchers = [addCombinator(elementMatcher(matchers), matcher)];\n        } else {\n          matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches); // Return special upon seeing a positional matcher\n\n          if (matcher[expando]) {\n            // Find the next relative operator (if any) for proper handling\n            j = ++i;\n\n            for (; j < len; j++) {\n              if (Expr.relative[tokens[j].type]) {\n                break;\n              }\n            }\n\n            return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(tokens.slice(0, i - 1)).replace(rtrim, \"$1\"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));\n          }\n\n          matchers.push(matcher);\n        }\n      }\n\n      return elementMatcher(matchers);\n    }\n\n    function matcherFromGroupMatchers(elementMatchers, setMatchers) {\n      // A counter to specify which element is currently being matched\n      var matcherCachedRuns = 0,\n          bySet = setMatchers.length > 0,\n          byElement = elementMatchers.length > 0,\n          superMatcher = function superMatcher(seed, context, xml, results, expandContext) {\n        var elem,\n            j,\n            matcher,\n            setMatched = [],\n            matchedCount = 0,\n            i = \"0\",\n            unmatched = seed && [],\n            outermost = expandContext != null,\n            contextBackup = outermostContext,\n            // We must always have either seed elements or context\n        elems = seed || byElement && Expr.find[\"TAG\"](\"*\", expandContext && context.parentNode || context),\n            // Use integer dirruns iff this is the outermost matcher\n        dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1;\n\n        if (outermost) {\n          outermostContext = context !== document && context;\n          cachedruns = matcherCachedRuns;\n        } // Add elements passing elementMatchers directly to results\n        // Keep `i` a string if there are no elements so `matchedCount` will be \"00\" below\n\n\n        for (; (elem = elems[i]) != null; i++) {\n          if (byElement && elem) {\n            j = 0;\n\n            while (matcher = elementMatchers[j++]) {\n              if (matcher(elem, context, xml)) {\n                results.push(elem);\n                break;\n              }\n            }\n\n            if (outermost) {\n              dirruns = dirrunsUnique;\n              cachedruns = ++matcherCachedRuns;\n            }\n          } // Track unmatched elements for set filters\n\n\n          if (bySet) {\n            // They will have gone through all possible matchers\n            if (elem = !matcher && elem) {\n              matchedCount--;\n            } // Lengthen the array for every element, matched or not\n\n\n            if (seed) {\n              unmatched.push(elem);\n            }\n          }\n        } // Apply set filters to unmatched elements\n\n\n        matchedCount += i;\n\n        if (bySet && i !== matchedCount) {\n          j = 0;\n\n          while (matcher = setMatchers[j++]) {\n            matcher(unmatched, setMatched, context, xml);\n          }\n\n          if (seed) {\n            // Reintegrate element matches to eliminate the need for sorting\n            if (matchedCount > 0) {\n              while (i--) {\n                if (!(unmatched[i] || setMatched[i])) {\n                  setMatched[i] = pop.call(results);\n                }\n              }\n            } // Discard index placeholder values to get only actual matches\n\n\n            setMatched = condense(setMatched);\n          } // Add matches to results\n\n\n          push.apply(results, setMatched); // Seedless set matches succeeding multiple successful matchers stipulate sorting\n\n          if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {\n            Sizzle.uniqueSort(results);\n          }\n        } // Override manipulation of globals by nested matchers\n\n\n        if (outermost) {\n          dirruns = dirrunsUnique;\n          outermostContext = contextBackup;\n        }\n\n        return unmatched;\n      };\n\n      return bySet ? markFunction(superMatcher) : superMatcher;\n    }\n\n    compile = Sizzle.compile = function (selector, group\n    /* Internal Use Only */\n    ) {\n      var i,\n          setMatchers = [],\n          elementMatchers = [],\n          cached = compilerCache[selector + \" \"];\n\n      if (!cached) {\n        // Generate a function of recursive functions that can be used to check each element\n        if (!group) {\n          group = tokenize(selector);\n        }\n\n        i = group.length;\n\n        while (i--) {\n          cached = matcherFromTokens(group[i]);\n\n          if (cached[expando]) {\n            setMatchers.push(cached);\n          } else {\n            elementMatchers.push(cached);\n          }\n        } // Cache the compiled function\n\n\n        cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));\n      }\n\n      return cached;\n    };\n\n    function multipleContexts(selector, contexts, results) {\n      var i = 0,\n          len = contexts.length;\n\n      for (; i < len; i++) {\n        Sizzle(selector, contexts[i], results);\n      }\n\n      return results;\n    }\n\n    function select(selector, context, results, seed) {\n      var i,\n          tokens,\n          token,\n          type,\n          find,\n          match = tokenize(selector);\n\n      if (!seed) {\n        // Try to minimize operations if there is only one group\n        if (match.length === 1) {\n          // Take a shortcut and set the context if the root selector is an ID\n          tokens = match[0] = match[0].slice(0);\n\n          if (tokens.length > 2 && (token = tokens[0]).type === \"ID\" && context.nodeType === 9 && !documentIsXML && Expr.relative[tokens[1].type]) {\n            context = Expr.find[\"ID\"](token.matches[0].replace(runescape, funescape), context)[0];\n\n            if (!context) {\n              return results;\n            }\n\n            selector = selector.slice(tokens.shift().value.length);\n          } // Fetch a seed set for right-to-left matching\n\n\n          i = matchExpr[\"needsContext\"].test(selector) ? 0 : tokens.length;\n\n          while (i--) {\n            token = tokens[i]; // Abort if we hit a combinator\n\n            if (Expr.relative[type = token.type]) {\n              break;\n            }\n\n            if (find = Expr.find[type]) {\n              // Search, expanding context for leading sibling combinators\n              if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && context.parentNode || context)) {\n                // If seed is empty or no tokens remain, we can return early\n                tokens.splice(i, 1);\n                selector = seed.length && toSelector(tokens);\n\n                if (!selector) {\n                  push.apply(results, slice.call(seed, 0));\n                  return results;\n                }\n\n                break;\n              }\n            }\n          }\n        }\n      } // Compile and execute a filtering function\n      // Provide `match` to avoid retokenization if we modified the selector above\n\n\n      compile(selector, match)(seed, context, documentIsXML, results, rsibling.test(selector));\n      return results;\n    } // Deprecated\n\n\n    Expr.pseudos[\"nth\"] = Expr.pseudos[\"eq\"]; // Easy API for creating new setFilters\n\n    function setFilters() {}\n\n    Expr.filters = setFilters.prototype = Expr.pseudos;\n    Expr.setFilters = new setFilters(); // Initialize with the default document\n\n    setDocument(); // Override sizzle attribute retrieval\n\n    Sizzle.attr = jQuery.attr;\n    jQuery.find = Sizzle;\n    jQuery.expr = Sizzle.selectors;\n    jQuery.expr[\":\"] = jQuery.expr.pseudos;\n    jQuery.unique = Sizzle.uniqueSort;\n    jQuery.text = Sizzle.getText;\n    jQuery.isXMLDoc = Sizzle.isXML;\n    jQuery.contains = Sizzle.contains;\n  })(window);\n\n  var runtil = /Until$/,\n      rparentsprev = /^(?:parents|prev(?:Until|All))/,\n      isSimple = /^.[^:#\\[\\.,]*$/,\n      rneedsContext = jQuery.expr.match.needsContext,\n      // methods guaranteed to produce a unique set when starting from a unique set\n  guaranteedUnique = {\n    children: true,\n    contents: true,\n    next: true,\n    prev: true\n  };\n  jQuery.fn.extend({\n    find: function find(selector) {\n      var i,\n          ret,\n          self,\n          len = this.length;\n\n      if (typeof selector !== \"string\") {\n        self = this;\n        return this.pushStack(jQuery(selector).filter(function () {\n          for (i = 0; i < len; i++) {\n            if (jQuery.contains(self[i], this)) {\n              return true;\n            }\n          }\n        }));\n      }\n\n      ret = [];\n\n      for (i = 0; i < len; i++) {\n        jQuery.find(selector, this[i], ret);\n      } // Needed because $( selector, context ) becomes $( context ).find( selector )\n\n\n      ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);\n      ret.selector = (this.selector ? this.selector + \" \" : \"\") + selector;\n      return ret;\n    },\n    has: function has(target) {\n      var i,\n          targets = jQuery(target, this),\n          len = targets.length;\n      return this.filter(function () {\n        for (i = 0; i < len; i++) {\n          if (jQuery.contains(this, targets[i])) {\n            return true;\n          }\n        }\n      });\n    },\n    not: function not(selector) {\n      return this.pushStack(winnow(this, selector, false));\n    },\n    filter: function filter(selector) {\n      return this.pushStack(winnow(this, selector, true));\n    },\n    is: function is(selector) {\n      return !!selector && (typeof selector === \"string\" ? // If this is a positional/relative selector, check membership in the returned set\n      // so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n      rneedsContext.test(selector) ? jQuery(selector, this.context).index(this[0]) >= 0 : jQuery.filter(selector, this).length > 0 : this.filter(selector).length > 0);\n    },\n    closest: function closest(selectors, context) {\n      var cur,\n          i = 0,\n          l = this.length,\n          ret = [],\n          pos = rneedsContext.test(selectors) || typeof selectors !== \"string\" ? jQuery(selectors, context || this.context) : 0;\n\n      for (; i < l; i++) {\n        cur = this[i];\n\n        while (cur && cur.ownerDocument && cur !== context && cur.nodeType !== 11) {\n          if (pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors)) {\n            ret.push(cur);\n            break;\n          }\n\n          cur = cur.parentNode;\n        }\n      }\n\n      return this.pushStack(ret.length > 1 ? jQuery.unique(ret) : ret);\n    },\n    // Determine the position of an element within\n    // the matched set of elements\n    index: function index(elem) {\n      // No argument, return index in parent\n      if (!elem) {\n        return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;\n      } // index in selector\n\n\n      if (typeof elem === \"string\") {\n        return jQuery.inArray(this[0], jQuery(elem));\n      } // Locate the position of the desired element\n\n\n      return jQuery.inArray( // If it receives a jQuery object, the first element is used\n      elem.jquery ? elem[0] : elem, this);\n    },\n    add: function add(selector, context) {\n      var set = typeof selector === \"string\" ? jQuery(selector, context) : jQuery.makeArray(selector && selector.nodeType ? [selector] : selector),\n          all = jQuery.merge(this.get(), set);\n      return this.pushStack(jQuery.unique(all));\n    },\n    addBack: function addBack(selector) {\n      return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));\n    }\n  });\n  jQuery.fn.andSelf = jQuery.fn.addBack;\n\n  function sibling(cur, dir) {\n    do {\n      cur = cur[dir];\n    } while (cur && cur.nodeType !== 1);\n\n    return cur;\n  }\n\n  jQuery.each({\n    parent: function parent(elem) {\n      var parent = elem.parentNode;\n      return parent && parent.nodeType !== 11 ? parent : null;\n    },\n    parents: function parents(elem) {\n      return jQuery.dir(elem, \"parentNode\");\n    },\n    parentsUntil: function parentsUntil(elem, i, until) {\n      return jQuery.dir(elem, \"parentNode\", until);\n    },\n    next: function next(elem) {\n      return sibling(elem, \"nextSibling\");\n    },\n    prev: function prev(elem) {\n      return sibling(elem, \"previousSibling\");\n    },\n    nextAll: function nextAll(elem) {\n      return jQuery.dir(elem, \"nextSibling\");\n    },\n    prevAll: function prevAll(elem) {\n      return jQuery.dir(elem, \"previousSibling\");\n    },\n    nextUntil: function nextUntil(elem, i, until) {\n      return jQuery.dir(elem, \"nextSibling\", until);\n    },\n    prevUntil: function prevUntil(elem, i, until) {\n      return jQuery.dir(elem, \"previousSibling\", until);\n    },\n    siblings: function siblings(elem) {\n      return jQuery.sibling((elem.parentNode || {}).firstChild, elem);\n    },\n    children: function children(elem) {\n      return jQuery.sibling(elem.firstChild);\n    },\n    contents: function contents(elem) {\n      return jQuery.nodeName(elem, \"iframe\") ? elem.contentDocument || elem.contentWindow.document : jQuery.merge([], elem.childNodes);\n    }\n  }, function (name, fn) {\n    jQuery.fn[name] = function (until, selector) {\n      var ret = jQuery.map(this, fn, until);\n\n      if (!runtil.test(name)) {\n        selector = until;\n      }\n\n      if (selector && typeof selector === \"string\") {\n        ret = jQuery.filter(selector, ret);\n      }\n\n      ret = this.length > 1 && !guaranteedUnique[name] ? jQuery.unique(ret) : ret;\n\n      if (this.length > 1 && rparentsprev.test(name)) {\n        ret = ret.reverse();\n      }\n\n      return this.pushStack(ret);\n    };\n  });\n  jQuery.extend({\n    filter: function filter(expr, elems, not) {\n      if (not) {\n        expr = \":not(\" + expr + \")\";\n      }\n\n      return elems.length === 1 ? jQuery.find.matchesSelector(elems[0], expr) ? [elems[0]] : [] : jQuery.find.matches(expr, elems);\n    },\n    dir: function dir(elem, _dir, until) {\n      var matched = [],\n          cur = elem[_dir];\n\n      while (cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery(cur).is(until))) {\n        if (cur.nodeType === 1) {\n          matched.push(cur);\n        }\n\n        cur = cur[_dir];\n      }\n\n      return matched;\n    },\n    sibling: function sibling(n, elem) {\n      var r = [];\n\n      for (; n; n = n.nextSibling) {\n        if (n.nodeType === 1 && n !== elem) {\n          r.push(n);\n        }\n      }\n\n      return r;\n    }\n  }); // Implement the identical functionality for filter and not\n\n  function winnow(elements, qualifier, keep) {\n    // Can't pass null or undefined to indexOf in Firefox 4\n    // Set to 0 to skip string check\n    qualifier = qualifier || 0;\n\n    if (jQuery.isFunction(qualifier)) {\n      return jQuery.grep(elements, function (elem, i) {\n        var retVal = !!qualifier.call(elem, i, elem);\n        return retVal === keep;\n      });\n    } else if (qualifier.nodeType) {\n      return jQuery.grep(elements, function (elem) {\n        return elem === qualifier === keep;\n      });\n    } else if (typeof qualifier === \"string\") {\n      var filtered = jQuery.grep(elements, function (elem) {\n        return elem.nodeType === 1;\n      });\n\n      if (isSimple.test(qualifier)) {\n        return jQuery.filter(qualifier, filtered, !keep);\n      } else {\n        qualifier = jQuery.filter(qualifier, filtered);\n      }\n    }\n\n    return jQuery.grep(elements, function (elem) {\n      return jQuery.inArray(elem, qualifier) >= 0 === keep;\n    });\n  }\n\n  function createSafeFragment(document) {\n    var list = nodeNames.split(\"|\"),\n        safeFrag = document.createDocumentFragment();\n\n    if (safeFrag.createElement) {\n      while (list.length) {\n        safeFrag.createElement(list.pop());\n      }\n    }\n\n    return safeFrag;\n  }\n\n  var nodeNames = \"abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|\" + \"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video\",\n      rinlinejQuery = / jQuery\\d+=\"(?:null|\\d+)\"/g,\n      rnoshimcache = new RegExp(\"<(?:\" + nodeNames + \")[\\\\s/>]\", \"i\"),\n      rleadingWhitespace = /^\\s+/,\n      rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:]+)[^>]*)\\/>/gi,\n      rtagName = /<([\\w:]+)/,\n      rtbody = /<tbody/i,\n      rhtml = /<|&#?\\w+;/,\n      rnoInnerhtml = /<(?:script|style|link)/i,\n      manipulation_rcheckableType = /^(?:checkbox|radio)$/i,\n      // checked=\"checked\" or checked\n  rchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n      rscriptType = /^$|\\/(?:java|ecma)script/i,\n      rscriptTypeMasked = /^true\\/(.*)/,\n      rcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g,\n      // We have to close these tags to support XHTML (#13200)\n  wrapMap = {\n    option: [1, \"<select multiple='multiple'>\", \"</select>\"],\n    legend: [1, \"<fieldset>\", \"</fieldset>\"],\n    area: [1, \"<map>\", \"</map>\"],\n    param: [1, \"<object>\", \"</object>\"],\n    thead: [1, \"<table>\", \"</table>\"],\n    tr: [2, \"<table><tbody>\", \"</tbody></table>\"],\n    col: [2, \"<table><tbody></tbody><colgroup>\", \"</colgroup></table>\"],\n    td: [3, \"<table><tbody><tr>\", \"</tr></tbody></table>\"],\n    // IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,\n    // unless wrapped in a div with non-breaking characters in front of it.\n    _default: jQuery.support.htmlSerialize ? [0, \"\", \"\"] : [1, \"X<div>\", \"</div>\"]\n  },\n      safeFragment = createSafeFragment(document),\n      fragmentDiv = safeFragment.appendChild(document.createElement(\"div\"));\n  wrapMap.optgroup = wrapMap.option;\n  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\n  wrapMap.th = wrapMap.td;\n  jQuery.fn.extend({\n    text: function text(value) {\n      return jQuery.access(this, function (value) {\n        return value === undefined ? jQuery.text(this) : this.empty().append((this[0] && this[0].ownerDocument || document).createTextNode(value));\n      }, null, value, arguments.length);\n    },\n    wrapAll: function wrapAll(html) {\n      if (jQuery.isFunction(html)) {\n        return this.each(function (i) {\n          jQuery(this).wrapAll(html.call(this, i));\n        });\n      }\n\n      if (this[0]) {\n        // The elements to wrap the target around\n        var wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);\n\n        if (this[0].parentNode) {\n          wrap.insertBefore(this[0]);\n        }\n\n        wrap.map(function () {\n          var elem = this;\n\n          while (elem.firstChild && elem.firstChild.nodeType === 1) {\n            elem = elem.firstChild;\n          }\n\n          return elem;\n        }).append(this);\n      }\n\n      return this;\n    },\n    wrapInner: function wrapInner(html) {\n      if (jQuery.isFunction(html)) {\n        return this.each(function (i) {\n          jQuery(this).wrapInner(html.call(this, i));\n        });\n      }\n\n      return this.each(function () {\n        var self = jQuery(this),\n            contents = self.contents();\n\n        if (contents.length) {\n          contents.wrapAll(html);\n        } else {\n          self.append(html);\n        }\n      });\n    },\n    wrap: function wrap(html) {\n      var isFunction = jQuery.isFunction(html);\n      return this.each(function (i) {\n        jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);\n      });\n    },\n    unwrap: function unwrap() {\n      return this.parent().each(function () {\n        if (!jQuery.nodeName(this, \"body\")) {\n          jQuery(this).replaceWith(this.childNodes);\n        }\n      }).end();\n    },\n    append: function append() {\n      return this.domManip(arguments, true, function (elem) {\n        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n          this.appendChild(elem);\n        }\n      });\n    },\n    prepend: function prepend() {\n      return this.domManip(arguments, true, function (elem) {\n        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n          this.insertBefore(elem, this.firstChild);\n        }\n      });\n    },\n    before: function before() {\n      return this.domManip(arguments, false, function (elem) {\n        if (this.parentNode) {\n          this.parentNode.insertBefore(elem, this);\n        }\n      });\n    },\n    after: function after() {\n      return this.domManip(arguments, false, function (elem) {\n        if (this.parentNode) {\n          this.parentNode.insertBefore(elem, this.nextSibling);\n        }\n      });\n    },\n    // keepData is for internal use only--do not document\n    remove: function remove(selector, keepData) {\n      var elem,\n          i = 0;\n\n      for (; (elem = this[i]) != null; i++) {\n        if (!selector || jQuery.filter(selector, [elem]).length > 0) {\n          if (!keepData && elem.nodeType === 1) {\n            jQuery.cleanData(getAll(elem));\n          }\n\n          if (elem.parentNode) {\n            if (keepData && jQuery.contains(elem.ownerDocument, elem)) {\n              setGlobalEval(getAll(elem, \"script\"));\n            }\n\n            elem.parentNode.removeChild(elem);\n          }\n        }\n      }\n\n      return this;\n    },\n    empty: function empty() {\n      var elem,\n          i = 0;\n\n      for (; (elem = this[i]) != null; i++) {\n        // Remove element nodes and prevent memory leaks\n        if (elem.nodeType === 1) {\n          jQuery.cleanData(getAll(elem, false));\n        } // Remove any remaining nodes\n\n\n        while (elem.firstChild) {\n          elem.removeChild(elem.firstChild);\n        } // If this is a select, ensure that it displays empty (#12336)\n        // Support: IE<9\n\n\n        if (elem.options && jQuery.nodeName(elem, \"select\")) {\n          elem.options.length = 0;\n        }\n      }\n\n      return this;\n    },\n    clone: function clone(dataAndEvents, deepDataAndEvents) {\n      dataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n      deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n      return this.map(function () {\n        return jQuery.clone(this, dataAndEvents, deepDataAndEvents);\n      });\n    },\n    html: function html(value) {\n      return jQuery.access(this, function (value) {\n        var elem = this[0] || {},\n            i = 0,\n            l = this.length;\n\n        if (value === undefined) {\n          return elem.nodeType === 1 ? elem.innerHTML.replace(rinlinejQuery, \"\") : undefined;\n        } // See if we can take a shortcut and just use innerHTML\n\n\n        if (typeof value === \"string\" && !rnoInnerhtml.test(value) && (jQuery.support.htmlSerialize || !rnoshimcache.test(value)) && (jQuery.support.leadingWhitespace || !rleadingWhitespace.test(value)) && !wrapMap[(rtagName.exec(value) || [\"\", \"\"])[1].toLowerCase()]) {\n          value = value.replace(rxhtmlTag, \"<$1></$2>\");\n\n          try {\n            for (; i < l; i++) {\n              // Remove element nodes and prevent memory leaks\n              elem = this[i] || {};\n\n              if (elem.nodeType === 1) {\n                jQuery.cleanData(getAll(elem, false));\n                elem.innerHTML = value;\n              }\n            }\n\n            elem = 0; // If using innerHTML throws an exception, use the fallback method\n          } catch (e) {}\n        }\n\n        if (elem) {\n          this.empty().append(value);\n        }\n      }, null, value, arguments.length);\n    },\n    replaceWith: function replaceWith(value) {\n      var isFunc = jQuery.isFunction(value); // Make sure that the elements are removed from the DOM before they are inserted\n      // this can help fix replacing a parent with child elements\n\n      if (!isFunc && typeof value !== \"string\") {\n        value = jQuery(value).not(this).detach();\n      }\n\n      return this.domManip([value], true, function (elem) {\n        var next = this.nextSibling,\n            parent = this.parentNode;\n\n        if (parent) {\n          jQuery(this).remove();\n          parent.insertBefore(elem, next);\n        }\n      });\n    },\n    detach: function detach(selector) {\n      return this.remove(selector, true);\n    },\n    domManip: function domManip(args, table, callback) {\n      // Flatten any nested arrays\n      args = core_concat.apply([], args);\n      var first,\n          node,\n          hasScripts,\n          scripts,\n          doc,\n          fragment,\n          i = 0,\n          l = this.length,\n          set = this,\n          iNoClone = l - 1,\n          value = args[0],\n          isFunction = jQuery.isFunction(value); // We can't cloneNode fragments that contain checked, in WebKit\n\n      if (isFunction || !(l <= 1 || typeof value !== \"string\" || jQuery.support.checkClone || !rchecked.test(value))) {\n        return this.each(function (index) {\n          var self = set.eq(index);\n\n          if (isFunction) {\n            args[0] = value.call(this, index, table ? self.html() : undefined);\n          }\n\n          self.domManip(args, table, callback);\n        });\n      }\n\n      if (l) {\n        fragment = jQuery.buildFragment(args, this[0].ownerDocument, false, this);\n        first = fragment.firstChild;\n\n        if (fragment.childNodes.length === 1) {\n          fragment = first;\n        }\n\n        if (first) {\n          table = table && jQuery.nodeName(first, \"tr\");\n          scripts = jQuery.map(getAll(fragment, \"script\"), disableScript);\n          hasScripts = scripts.length; // Use the original fragment for the last item instead of the first because it can end up\n          // being emptied incorrectly in certain situations (#8070).\n\n          for (; i < l; i++) {\n            node = fragment;\n\n            if (i !== iNoClone) {\n              node = jQuery.clone(node, true, true); // Keep references to cloned scripts for later restoration\n\n              if (hasScripts) {\n                jQuery.merge(scripts, getAll(node, \"script\"));\n              }\n            }\n\n            callback.call(table && jQuery.nodeName(this[i], \"table\") ? findOrAppend(this[i], \"tbody\") : this[i], node, i);\n          }\n\n          if (hasScripts) {\n            doc = scripts[scripts.length - 1].ownerDocument; // Reenable scripts\n\n            jQuery.map(scripts, restoreScript); // Evaluate executable scripts on first document insertion\n\n            for (i = 0; i < hasScripts; i++) {\n              node = scripts[i];\n\n              if (rscriptType.test(node.type || \"\") && !jQuery._data(node, \"globalEval\") && jQuery.contains(doc, node)) {\n                if (node.src) {\n                  // Hope ajax is available...\n                  jQuery.ajax({\n                    url: node.src,\n                    type: \"GET\",\n                    dataType: \"script\",\n                    async: false,\n                    global: false,\n                    \"throws\": true\n                  });\n                } else {\n                  jQuery.globalEval((node.text || node.textContent || node.innerHTML || \"\").replace(rcleanScript, \"\"));\n                }\n              }\n            }\n          } // Fix #11809: Avoid leaking memory\n\n\n          fragment = first = null;\n        }\n      }\n\n      return this;\n    }\n  });\n\n  function findOrAppend(elem, tag) {\n    return elem.getElementsByTagName(tag)[0] || elem.appendChild(elem.ownerDocument.createElement(tag));\n  } // Replace/restore the type attribute of script elements for safe DOM manipulation\n\n\n  function disableScript(elem) {\n    var attr = elem.getAttributeNode(\"type\");\n    elem.type = (attr && attr.specified) + \"/\" + elem.type;\n    return elem;\n  }\n\n  function restoreScript(elem) {\n    var match = rscriptTypeMasked.exec(elem.type);\n\n    if (match) {\n      elem.type = match[1];\n    } else {\n      elem.removeAttribute(\"type\");\n    }\n\n    return elem;\n  } // Mark scripts as having already been evaluated\n\n\n  function setGlobalEval(elems, refElements) {\n    var elem,\n        i = 0;\n\n    for (; (elem = elems[i]) != null; i++) {\n      jQuery._data(elem, \"globalEval\", !refElements || jQuery._data(refElements[i], \"globalEval\"));\n    }\n  }\n\n  function cloneCopyEvent(src, dest) {\n    if (dest.nodeType !== 1 || !jQuery.hasData(src)) {\n      return;\n    }\n\n    var type,\n        i,\n        l,\n        oldData = jQuery._data(src),\n        curData = jQuery._data(dest, oldData),\n        events = oldData.events;\n\n    if (events) {\n      delete curData.handle;\n      curData.events = {};\n\n      for (type in events) {\n        for (i = 0, l = events[type].length; i < l; i++) {\n          jQuery.event.add(dest, type, events[type][i]);\n        }\n      }\n    } // make the cloned public data object a copy from the original\n\n\n    if (curData.data) {\n      curData.data = jQuery.extend({}, curData.data);\n    }\n  }\n\n  function fixCloneNodeIssues(src, dest) {\n    var nodeName, e, data; // We do not need to do anything for non-Elements\n\n    if (dest.nodeType !== 1) {\n      return;\n    }\n\n    nodeName = dest.nodeName.toLowerCase(); // IE6-8 copies events bound via attachEvent when using cloneNode.\n\n    if (!jQuery.support.noCloneEvent && dest[jQuery.expando]) {\n      data = jQuery._data(dest);\n\n      for (e in data.events) {\n        jQuery.removeEvent(dest, e, data.handle);\n      } // Event data gets referenced instead of copied if the expando gets copied too\n\n\n      dest.removeAttribute(jQuery.expando);\n    } // IE blanks contents when cloning scripts, and tries to evaluate newly-set text\n\n\n    if (nodeName === \"script\" && dest.text !== src.text) {\n      disableScript(dest).text = src.text;\n      restoreScript(dest); // IE6-10 improperly clones children of object elements using classid.\n      // IE10 throws NoModificationAllowedError if parent is null, #12132.\n    } else if (nodeName === \"object\") {\n      if (dest.parentNode) {\n        dest.outerHTML = src.outerHTML;\n      } // This path appears unavoidable for IE9. When cloning an object\n      // element in IE9, the outerHTML strategy above is not sufficient.\n      // If the src has innerHTML and the destination does not,\n      // copy the src.innerHTML into the dest.innerHTML. #10324\n\n\n      if (jQuery.support.html5Clone && src.innerHTML && !jQuery.trim(dest.innerHTML)) {\n        dest.innerHTML = src.innerHTML;\n      }\n    } else if (nodeName === \"input\" && manipulation_rcheckableType.test(src.type)) {\n      // IE6-8 fails to persist the checked state of a cloned checkbox\n      // or radio button. Worse, IE6-7 fail to give the cloned element\n      // a checked appearance if the defaultChecked value isn't also set\n      dest.defaultChecked = dest.checked = src.checked; // IE6-7 get confused and end up setting the value of a cloned\n      // checkbox/radio button to an empty string instead of \"on\"\n\n      if (dest.value !== src.value) {\n        dest.value = src.value;\n      } // IE6-8 fails to return the selected option to the default selected\n      // state when cloning options\n\n    } else if (nodeName === \"option\") {\n      dest.defaultSelected = dest.selected = src.defaultSelected; // IE6-8 fails to set the defaultValue to the correct value when\n      // cloning other types of input fields\n    } else if (nodeName === \"input\" || nodeName === \"textarea\") {\n      dest.defaultValue = src.defaultValue;\n    }\n  }\n\n  jQuery.each({\n    appendTo: \"append\",\n    prependTo: \"prepend\",\n    insertBefore: \"before\",\n    insertAfter: \"after\",\n    replaceAll: \"replaceWith\"\n  }, function (name, original) {\n    jQuery.fn[name] = function (selector) {\n      var elems,\n          i = 0,\n          ret = [],\n          insert = jQuery(selector),\n          last = insert.length - 1;\n\n      for (; i <= last; i++) {\n        elems = i === last ? this : this.clone(true);\n        jQuery(insert[i])[original](elems); // Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()\n\n        core_push.apply(ret, elems.get());\n      }\n\n      return this.pushStack(ret);\n    };\n  });\n\n  function getAll(context, tag) {\n    var elems,\n        elem,\n        i = 0,\n        found = _typeof(context.getElementsByTagName) !== core_strundefined ? context.getElementsByTagName(tag || \"*\") : _typeof(context.querySelectorAll) !== core_strundefined ? context.querySelectorAll(tag || \"*\") : undefined;\n\n    if (!found) {\n      for (found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++) {\n        if (!tag || jQuery.nodeName(elem, tag)) {\n          found.push(elem);\n        } else {\n          jQuery.merge(found, getAll(elem, tag));\n        }\n      }\n    }\n\n    return tag === undefined || tag && jQuery.nodeName(context, tag) ? jQuery.merge([context], found) : found;\n  } // Used in buildFragment, fixes the defaultChecked property\n\n\n  function fixDefaultChecked(elem) {\n    if (manipulation_rcheckableType.test(elem.type)) {\n      elem.defaultChecked = elem.checked;\n    }\n  }\n\n  jQuery.extend({\n    clone: function clone(elem, dataAndEvents, deepDataAndEvents) {\n      var destElements,\n          node,\n          clone,\n          i,\n          srcElements,\n          inPage = jQuery.contains(elem.ownerDocument, elem);\n\n      if (jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test(\"<\" + elem.nodeName + \">\")) {\n        clone = elem.cloneNode(true); // IE<=8 does not properly clone detached, unknown element nodes\n      } else {\n        fragmentDiv.innerHTML = elem.outerHTML;\n        fragmentDiv.removeChild(clone = fragmentDiv.firstChild);\n      }\n\n      if ((!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {\n        // We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2\n        destElements = getAll(clone);\n        srcElements = getAll(elem); // Fix all IE cloning issues\n\n        for (i = 0; (node = srcElements[i]) != null; ++i) {\n          // Ensure that the destination node is not null; Fixes #9587\n          if (destElements[i]) {\n            fixCloneNodeIssues(node, destElements[i]);\n          }\n        }\n      } // Copy the events from the original to the clone\n\n\n      if (dataAndEvents) {\n        if (deepDataAndEvents) {\n          srcElements = srcElements || getAll(elem);\n          destElements = destElements || getAll(clone);\n\n          for (i = 0; (node = srcElements[i]) != null; i++) {\n            cloneCopyEvent(node, destElements[i]);\n          }\n        } else {\n          cloneCopyEvent(elem, clone);\n        }\n      } // Preserve script evaluation history\n\n\n      destElements = getAll(clone, \"script\");\n\n      if (destElements.length > 0) {\n        setGlobalEval(destElements, !inPage && getAll(elem, \"script\"));\n      }\n\n      destElements = srcElements = node = null; // Return the cloned set\n\n      return clone;\n    },\n    buildFragment: function buildFragment(elems, context, scripts, selection) {\n      var j,\n          elem,\n          contains,\n          tmp,\n          tag,\n          tbody,\n          wrap,\n          l = elems.length,\n          // Ensure a safe fragment\n      safe = createSafeFragment(context),\n          nodes = [],\n          i = 0;\n\n      for (; i < l; i++) {\n        elem = elems[i];\n\n        if (elem || elem === 0) {\n          // Add nodes directly\n          if (jQuery.type(elem) === \"object\") {\n            jQuery.merge(nodes, elem.nodeType ? [elem] : elem); // Convert non-html into a text node\n          } else if (!rhtml.test(elem)) {\n            nodes.push(context.createTextNode(elem)); // Convert html into DOM nodes\n          } else {\n            tmp = tmp || safe.appendChild(context.createElement(\"div\")); // Deserialize a standard representation\n\n            tag = (rtagName.exec(elem) || [\"\", \"\"])[1].toLowerCase();\n            wrap = wrapMap[tag] || wrapMap._default;\n            tmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, \"<$1></$2>\") + wrap[2]; // Descend through wrappers to the right content\n\n            j = wrap[0];\n\n            while (j--) {\n              tmp = tmp.lastChild;\n            } // Manually add leading whitespace removed by IE\n\n\n            if (!jQuery.support.leadingWhitespace && rleadingWhitespace.test(elem)) {\n              nodes.push(context.createTextNode(rleadingWhitespace.exec(elem)[0]));\n            } // Remove IE's autoinserted <tbody> from table fragments\n\n\n            if (!jQuery.support.tbody) {\n              // String was a <table>, *may* have spurious <tbody>\n              elem = tag === \"table\" && !rtbody.test(elem) ? tmp.firstChild : // String was a bare <thead> or <tfoot>\n              wrap[1] === \"<table>\" && !rtbody.test(elem) ? tmp : 0;\n              j = elem && elem.childNodes.length;\n\n              while (j--) {\n                if (jQuery.nodeName(tbody = elem.childNodes[j], \"tbody\") && !tbody.childNodes.length) {\n                  elem.removeChild(tbody);\n                }\n              }\n            }\n\n            jQuery.merge(nodes, tmp.childNodes); // Fix #12392 for WebKit and IE > 9\n\n            tmp.textContent = \"\"; // Fix #12392 for oldIE\n\n            while (tmp.firstChild) {\n              tmp.removeChild(tmp.firstChild);\n            } // Remember the top-level container for proper cleanup\n\n\n            tmp = safe.lastChild;\n          }\n        }\n      } // Fix #11356: Clear elements from fragment\n\n\n      if (tmp) {\n        safe.removeChild(tmp);\n      } // Reset defaultChecked for any radios and checkboxes\n      // about to be appended to the DOM in IE 6/7 (#8060)\n\n\n      if (!jQuery.support.appendChecked) {\n        jQuery.grep(getAll(nodes, \"input\"), fixDefaultChecked);\n      }\n\n      i = 0;\n\n      while (elem = nodes[i++]) {\n        // #4087 - If origin and destination elements are the same, and this is\n        // that element, do not do anything\n        if (selection && jQuery.inArray(elem, selection) !== -1) {\n          continue;\n        }\n\n        contains = jQuery.contains(elem.ownerDocument, elem); // Append to fragment\n\n        tmp = getAll(safe.appendChild(elem), \"script\"); // Preserve script evaluation history\n\n        if (contains) {\n          setGlobalEval(tmp);\n        } // Capture executables\n\n\n        if (scripts) {\n          j = 0;\n\n          while (elem = tmp[j++]) {\n            if (rscriptType.test(elem.type || \"\")) {\n              scripts.push(elem);\n            }\n          }\n        }\n      }\n\n      tmp = null;\n      return safe;\n    },\n    cleanData: function cleanData(elems,\n    /* internal */\n    acceptData) {\n      var elem,\n          type,\n          id,\n          data,\n          i = 0,\n          internalKey = jQuery.expando,\n          cache = jQuery.cache,\n          deleteExpando = jQuery.support.deleteExpando,\n          special = jQuery.event.special;\n\n      for (; (elem = elems[i]) != null; i++) {\n        if (acceptData || jQuery.acceptData(elem)) {\n          id = elem[internalKey];\n          data = id && cache[id];\n\n          if (data) {\n            if (data.events) {\n              for (type in data.events) {\n                if (special[type]) {\n                  jQuery.event.remove(elem, type); // This is a shortcut to avoid jQuery.event.remove's overhead\n                } else {\n                  jQuery.removeEvent(elem, type, data.handle);\n                }\n              }\n            } // Remove cache only if it was not already removed by jQuery.event.remove\n\n\n            if (cache[id]) {\n              delete cache[id]; // IE does not allow us to delete expando properties from nodes,\n              // nor does it have a removeAttribute function on Document nodes;\n              // we must handle all of these cases\n\n              if (deleteExpando) {\n                delete elem[internalKey];\n              } else if (_typeof(elem.removeAttribute) !== core_strundefined) {\n                elem.removeAttribute(internalKey);\n              } else {\n                elem[internalKey] = null;\n              }\n\n              core_deletedIds.push(id);\n            }\n          }\n        }\n      }\n    }\n  });\n  var iframe,\n      getStyles,\n      curCSS,\n      ralpha = /alpha\\([^)]*\\)/i,\n      ropacity = /opacity\\s*=\\s*([^)]*)/,\n      rposition = /^(top|right|bottom|left)$/,\n      // swappable if display is none or starts with table except \"table\", \"table-cell\", or \"table-caption\"\n  // see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n  rdisplayswap = /^(none|table(?!-c[ea]).+)/,\n      rmargin = /^margin/,\n      rnumsplit = new RegExp(\"^(\" + core_pnum + \")(.*)$\", \"i\"),\n      rnumnonpx = new RegExp(\"^(\" + core_pnum + \")(?!px)[a-z%]+$\", \"i\"),\n      rrelNum = new RegExp(\"^([+-])=(\" + core_pnum + \")\", \"i\"),\n      elemdisplay = {\n    BODY: \"block\"\n  },\n      cssShow = {\n    position: \"absolute\",\n    visibility: \"hidden\",\n    display: \"block\"\n  },\n      cssNormalTransform = {\n    letterSpacing: 0,\n    fontWeight: 400\n  },\n      cssExpand = [\"Top\", \"Right\", \"Bottom\", \"Left\"],\n      cssPrefixes = [\"Webkit\", \"O\", \"Moz\", \"ms\"]; // return a css property mapped to a potentially vendor prefixed property\n\n  function vendorPropName(style, name) {\n    // shortcut for names that are not vendor prefixed\n    if (name in style) {\n      return name;\n    } // check for vendor prefixed names\n\n\n    var capName = name.charAt(0).toUpperCase() + name.slice(1),\n        origName = name,\n        i = cssPrefixes.length;\n\n    while (i--) {\n      name = cssPrefixes[i] + capName;\n\n      if (name in style) {\n        return name;\n      }\n    }\n\n    return origName;\n  }\n\n  function isHidden(elem, el) {\n    // isHidden might be called from jQuery#filter function;\n    // in that case, element will be second argument\n    elem = el || elem;\n    return jQuery.css(elem, \"display\") === \"none\" || !jQuery.contains(elem.ownerDocument, elem);\n  }\n\n  function showHide(elements, show) {\n    var display,\n        elem,\n        hidden,\n        values = [],\n        index = 0,\n        length = elements.length;\n\n    for (; index < length; index++) {\n      elem = elements[index];\n\n      if (!elem.style) {\n        continue;\n      }\n\n      values[index] = jQuery._data(elem, \"olddisplay\");\n      display = elem.style.display;\n\n      if (show) {\n        // Reset the inline display of this element to learn if it is\n        // being hidden by cascaded rules or not\n        if (!values[index] && display === \"none\") {\n          elem.style.display = \"\";\n        } // Set elements which have been overridden with display: none\n        // in a stylesheet to whatever the default browser style is\n        // for such an element\n\n\n        if (elem.style.display === \"\" && isHidden(elem)) {\n          values[index] = jQuery._data(elem, \"olddisplay\", css_defaultDisplay(elem.nodeName));\n        }\n      } else {\n        if (!values[index]) {\n          hidden = isHidden(elem);\n\n          if (display && display !== \"none\" || !hidden) {\n            jQuery._data(elem, \"olddisplay\", hidden ? display : jQuery.css(elem, \"display\"));\n          }\n        }\n      }\n    } // Set the display of most of the elements in a second loop\n    // to avoid the constant reflow\n\n\n    for (index = 0; index < length; index++) {\n      elem = elements[index];\n\n      if (!elem.style) {\n        continue;\n      }\n\n      if (!show || elem.style.display === \"none\" || elem.style.display === \"\") {\n        elem.style.display = show ? values[index] || \"\" : \"none\";\n      }\n    }\n\n    return elements;\n  }\n\n  jQuery.fn.extend({\n    css: function css(name, value) {\n      return jQuery.access(this, function (elem, name, value) {\n        var len,\n            styles,\n            map = {},\n            i = 0;\n\n        if (jQuery.isArray(name)) {\n          styles = getStyles(elem);\n          len = name.length;\n\n          for (; i < len; i++) {\n            map[name[i]] = jQuery.css(elem, name[i], false, styles);\n          }\n\n          return map;\n        }\n\n        return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);\n      }, name, value, arguments.length > 1);\n    },\n    show: function show() {\n      return showHide(this, true);\n    },\n    hide: function hide() {\n      return showHide(this);\n    },\n    toggle: function toggle(state) {\n      var bool = typeof state === \"boolean\";\n      return this.each(function () {\n        if (bool ? state : isHidden(this)) {\n          jQuery(this).show();\n        } else {\n          jQuery(this).hide();\n        }\n      });\n    }\n  });\n  jQuery.extend({\n    // Add in style property hooks for overriding the default\n    // behavior of getting and setting a style property\n    cssHooks: {\n      opacity: {\n        get: function get(elem, computed) {\n          if (computed) {\n            // We should always get a number back from opacity\n            var ret = curCSS(elem, \"opacity\");\n            return ret === \"\" ? \"1\" : ret;\n          }\n        }\n      }\n    },\n    // Exclude the following css properties to add px\n    cssNumber: {\n      \"columnCount\": true,\n      \"fillOpacity\": true,\n      \"fontWeight\": true,\n      \"lineHeight\": true,\n      \"opacity\": true,\n      \"orphans\": true,\n      \"widows\": true,\n      \"zIndex\": true,\n      \"zoom\": true\n    },\n    // Add in properties whose names you wish to fix before\n    // setting or getting the value\n    cssProps: {\n      // normalize float css property\n      \"float\": jQuery.support.cssFloat ? \"cssFloat\" : \"styleFloat\"\n    },\n    // Get and set the style property on a DOM Node\n    style: function style(elem, name, value, extra) {\n      // Don't set styles on text and comment nodes\n      if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {\n        return;\n      } // Make sure that we're working with the right name\n\n\n      var ret,\n          type,\n          hooks,\n          origName = jQuery.camelCase(name),\n          style = elem.style;\n      name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName)); // gets hook for the prefixed version\n      // followed by the unprefixed version\n\n      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // Check if we're setting a value\n\n      if (value !== undefined) {\n        type = _typeof(value); // convert relative number strings (+= or -=) to relative numbers. #7345\n\n        if (type === \"string\" && (ret = rrelNum.exec(value))) {\n          value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name)); // Fixes bug #9237\n\n          type = \"number\";\n        } // Make sure that NaN and null values aren't set. See: #7116\n\n\n        if (value == null || type === \"number\" && isNaN(value)) {\n          return;\n        } // If a number was passed in, add 'px' to the (except for certain CSS properties)\n\n\n        if (type === \"number\" && !jQuery.cssNumber[origName]) {\n          value += \"px\";\n        } // Fixes #8908, it can be done more correctly by specifing setters in cssHooks,\n        // but it would mean to define eight (for every problematic property) identical functions\n\n\n        if (!jQuery.support.clearCloneStyle && value === \"\" && name.indexOf(\"background\") === 0) {\n          style[name] = \"inherit\";\n        } // If a hook was provided, use that value, otherwise just set the specified value\n\n\n        if (!hooks || !(\"set\" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {\n          // Wrapped to prevent IE from throwing errors when 'invalid' values are provided\n          // Fixes bug #5509\n          try {\n            style[name] = value;\n          } catch (e) {}\n        }\n      } else {\n        // If a hook was provided get the non-computed value from there\n        if (hooks && \"get\" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {\n          return ret;\n        } // Otherwise just get the value from the style object\n\n\n        return style[name];\n      }\n    },\n    css: function css(elem, name, extra, styles) {\n      var num,\n          val,\n          hooks,\n          origName = jQuery.camelCase(name); // Make sure that we're working with the right name\n\n      name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName)); // gets hook for the prefixed version\n      // followed by the unprefixed version\n\n      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // If a hook was provided get the computed value from there\n\n      if (hooks && \"get\" in hooks) {\n        val = hooks.get(elem, true, extra);\n      } // Otherwise, if a way to get the computed value exists, use that\n\n\n      if (val === undefined) {\n        val = curCSS(elem, name, styles);\n      } //convert \"normal\" to computed value\n\n\n      if (val === \"normal\" && name in cssNormalTransform) {\n        val = cssNormalTransform[name];\n      } // Return, converting to number if forced or a qualifier was provided and val looks numeric\n\n\n      if (extra === \"\" || extra) {\n        num = parseFloat(val);\n        return extra === true || jQuery.isNumeric(num) ? num || 0 : val;\n      }\n\n      return val;\n    },\n    // A method for quickly swapping in/out CSS properties to get correct calculations\n    swap: function swap(elem, options, callback, args) {\n      var ret,\n          name,\n          old = {}; // Remember the old values, and insert the new ones\n\n      for (name in options) {\n        old[name] = elem.style[name];\n        elem.style[name] = options[name];\n      }\n\n      ret = callback.apply(elem, args || []); // Revert the old values\n\n      for (name in options) {\n        elem.style[name] = old[name];\n      }\n\n      return ret;\n    }\n  }); // NOTE: we've included the \"window\" in window.getComputedStyle\n  // because jsdom on node.js will break without it.\n\n  if (window.getComputedStyle) {\n    getStyles = function getStyles(elem) {\n      return window.getComputedStyle(elem, null);\n    };\n\n    curCSS = function curCSS(elem, name, _computed) {\n      var width,\n          minWidth,\n          maxWidth,\n          computed = _computed || getStyles(elem),\n          // getPropertyValue is only needed for .css('filter') in IE9, see #12537\n      ret = computed ? computed.getPropertyValue(name) || computed[name] : undefined,\n          style = elem.style;\n\n      if (computed) {\n        if (ret === \"\" && !jQuery.contains(elem.ownerDocument, elem)) {\n          ret = jQuery.style(elem, name);\n        } // A tribute to the \"awesome hack by Dean Edwards\"\n        // Chrome < 17 and Safari 5.0 uses \"computed value\" instead of \"used value\" for margin-right\n        // Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels\n        // this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values\n\n\n        if (rnumnonpx.test(ret) && rmargin.test(name)) {\n          // Remember the original values\n          width = style.width;\n          minWidth = style.minWidth;\n          maxWidth = style.maxWidth; // Put in the new values to get a computed value out\n\n          style.minWidth = style.maxWidth = style.width = ret;\n          ret = computed.width; // Revert the changed values\n\n          style.width = width;\n          style.minWidth = minWidth;\n          style.maxWidth = maxWidth;\n        }\n      }\n\n      return ret;\n    };\n  } else if (document.documentElement.currentStyle) {\n    getStyles = function getStyles(elem) {\n      return elem.currentStyle;\n    };\n\n    curCSS = function curCSS(elem, name, _computed) {\n      var left,\n          rs,\n          rsLeft,\n          computed = _computed || getStyles(elem),\n          ret = computed ? computed[name] : undefined,\n          style = elem.style; // Avoid setting ret to empty string here\n      // so we don't default to auto\n\n\n      if (ret == null && style && style[name]) {\n        ret = style[name];\n      } // From the awesome hack by Dean Edwards\n      // http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291\n      // If we're not dealing with a regular pixel number\n      // but a number that has a weird ending, we need to convert it to pixels\n      // but not position css attributes, as those are proportional to the parent element instead\n      // and we can't measure the parent instead because it might trigger a \"stacking dolls\" problem\n\n\n      if (rnumnonpx.test(ret) && !rposition.test(name)) {\n        // Remember the original values\n        left = style.left;\n        rs = elem.runtimeStyle;\n        rsLeft = rs && rs.left; // Put in the new values to get a computed value out\n\n        if (rsLeft) {\n          rs.left = elem.currentStyle.left;\n        }\n\n        style.left = name === \"fontSize\" ? \"1em\" : ret;\n        ret = style.pixelLeft + \"px\"; // Revert the changed values\n\n        style.left = left;\n\n        if (rsLeft) {\n          rs.left = rsLeft;\n        }\n      }\n\n      return ret === \"\" ? \"auto\" : ret;\n    };\n  }\n\n  function setPositiveNumber(elem, value, subtract) {\n    var matches = rnumsplit.exec(value);\n    return matches ? // Guard against undefined \"subtract\", e.g., when used as in cssHooks\n    Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || \"px\") : value;\n  }\n\n  function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {\n    var i = extra === (isBorderBox ? \"border\" : \"content\") ? // If we already have the right measurement, avoid augmentation\n    4 : // Otherwise initialize for horizontal or vertical properties\n    name === \"width\" ? 1 : 0,\n        val = 0;\n\n    for (; i < 4; i += 2) {\n      // both box models exclude margin, so add it if we want it\n      if (extra === \"margin\") {\n        val += jQuery.css(elem, extra + cssExpand[i], true, styles);\n      }\n\n      if (isBorderBox) {\n        // border-box includes padding, so remove it if we want content\n        if (extra === \"content\") {\n          val -= jQuery.css(elem, \"padding\" + cssExpand[i], true, styles);\n        } // at this point, extra isn't border nor margin, so remove border\n\n\n        if (extra !== \"margin\") {\n          val -= jQuery.css(elem, \"border\" + cssExpand[i] + \"Width\", true, styles);\n        }\n      } else {\n        // at this point, extra isn't content, so add padding\n        val += jQuery.css(elem, \"padding\" + cssExpand[i], true, styles); // at this point, extra isn't content nor padding, so add border\n\n        if (extra !== \"padding\") {\n          val += jQuery.css(elem, \"border\" + cssExpand[i] + \"Width\", true, styles);\n        }\n      }\n    }\n\n    return val;\n  }\n\n  function getWidthOrHeight(elem, name, extra) {\n    // Start with offset property, which is equivalent to the border-box value\n    var valueIsBorderBox = true,\n        val = name === \"width\" ? elem.offsetWidth : elem.offsetHeight,\n        styles = getStyles(elem),\n        isBorderBox = jQuery.support.boxSizing && jQuery.css(elem, \"boxSizing\", false, styles) === \"border-box\"; // some non-html elements return undefined for offsetWidth, so check for null/undefined\n    // svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285\n    // MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668\n\n    if (val <= 0 || val == null) {\n      // Fall back to computed then uncomputed css if necessary\n      val = curCSS(elem, name, styles);\n\n      if (val < 0 || val == null) {\n        val = elem.style[name];\n      } // Computed unit is not pixels. Stop here and return.\n\n\n      if (rnumnonpx.test(val)) {\n        return val;\n      } // we need the check for style in case a browser which returns unreliable values\n      // for getComputedStyle silently falls back to the reliable elem.style\n\n\n      valueIsBorderBox = isBorderBox && (jQuery.support.boxSizingReliable || val === elem.style[name]); // Normalize \"\", auto, and prepare for extra\n\n      val = parseFloat(val) || 0;\n    } // use the active box-sizing model to add/subtract irrelevant styles\n\n\n    return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? \"border\" : \"content\"), valueIsBorderBox, styles) + \"px\";\n  } // Try to determine the default display value of an element\n\n\n  function css_defaultDisplay(nodeName) {\n    var doc = document,\n        display = elemdisplay[nodeName];\n\n    if (!display) {\n      display = actualDisplay(nodeName, doc); // If the simple way fails, read from inside an iframe\n\n      if (display === \"none\" || !display) {\n        // Use the already-created iframe if possible\n        iframe = (iframe || jQuery(\"<iframe frameborder='0' width='0' height='0'/>\").css(\"cssText\", \"display:block !important\")).appendTo(doc.documentElement); // Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse\n\n        doc = (iframe[0].contentWindow || iframe[0].contentDocument).document;\n        doc.write(\"<!doctype html><html><body>\");\n        doc.close();\n        display = actualDisplay(nodeName, doc);\n        iframe.detach();\n      } // Store the correct default display\n\n\n      elemdisplay[nodeName] = display;\n    }\n\n    return display;\n  } // Called ONLY from within css_defaultDisplay\n\n\n  function actualDisplay(name, doc) {\n    var elem = jQuery(doc.createElement(name)).appendTo(doc.body),\n        display = jQuery.css(elem[0], \"display\");\n    elem.remove();\n    return display;\n  }\n\n  jQuery.each([\"height\", \"width\"], function (i, name) {\n    jQuery.cssHooks[name] = {\n      get: function get(elem, computed, extra) {\n        if (computed) {\n          // certain elements can have dimension info if we invisibly show them\n          // however, it must have a current display style that would benefit from this\n          return elem.offsetWidth === 0 && rdisplayswap.test(jQuery.css(elem, \"display\")) ? jQuery.swap(elem, cssShow, function () {\n            return getWidthOrHeight(elem, name, extra);\n          }) : getWidthOrHeight(elem, name, extra);\n        }\n      },\n      set: function set(elem, value, extra) {\n        var styles = extra && getStyles(elem);\n        return setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name, extra, jQuery.support.boxSizing && jQuery.css(elem, \"boxSizing\", false, styles) === \"border-box\", styles) : 0);\n      }\n    };\n  });\n\n  if (!jQuery.support.opacity) {\n    jQuery.cssHooks.opacity = {\n      get: function get(elem, computed) {\n        // IE uses filters for opacity\n        return ropacity.test((computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || \"\") ? 0.01 * parseFloat(RegExp.$1) + \"\" : computed ? \"1\" : \"\";\n      },\n      set: function set(elem, value) {\n        var style = elem.style,\n            currentStyle = elem.currentStyle,\n            opacity = jQuery.isNumeric(value) ? \"alpha(opacity=\" + value * 100 + \")\" : \"\",\n            filter = currentStyle && currentStyle.filter || style.filter || \"\"; // IE has trouble with opacity if it does not have layout\n        // Force it by setting the zoom level\n\n        style.zoom = 1; // if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652\n        // if value === \"\", then remove inline opacity #12685\n\n        if ((value >= 1 || value === \"\") && jQuery.trim(filter.replace(ralpha, \"\")) === \"\" && style.removeAttribute) {\n          // Setting style.filter to null, \"\" & \" \" still leave \"filter:\" in the cssText\n          // if \"filter:\" is present at all, clearType is disabled, we want to avoid this\n          // style.removeAttribute is IE Only, but so apparently is this code path...\n          style.removeAttribute(\"filter\"); // if there is no filter style applied in a css rule or unset inline opacity, we are done\n\n          if (value === \"\" || currentStyle && !currentStyle.filter) {\n            return;\n          }\n        } // otherwise, set new filter values\n\n\n        style.filter = ralpha.test(filter) ? filter.replace(ralpha, opacity) : filter + \" \" + opacity;\n      }\n    };\n  } // These hooks cannot be added until DOM ready because the support test\n  // for it is not run until after DOM ready\n\n\n  jQuery(function () {\n    if (!jQuery.support.reliableMarginRight) {\n      jQuery.cssHooks.marginRight = {\n        get: function get(elem, computed) {\n          if (computed) {\n            // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right\n            // Work around by temporarily setting element display to inline-block\n            return jQuery.swap(elem, {\n              \"display\": \"inline-block\"\n            }, curCSS, [elem, \"marginRight\"]);\n          }\n        }\n      };\n    } // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n    // getComputedStyle returns percent when specified for top/left/bottom/right\n    // rather than make the css module depend on the offset module, we just check for it here\n\n\n    if (!jQuery.support.pixelPosition && jQuery.fn.position) {\n      jQuery.each([\"top\", \"left\"], function (i, prop) {\n        jQuery.cssHooks[prop] = {\n          get: function get(elem, computed) {\n            if (computed) {\n              computed = curCSS(elem, prop); // if curCSS returns percentage, fallback to offset\n\n              return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + \"px\" : computed;\n            }\n          }\n        };\n      });\n    }\n  });\n\n  if (jQuery.expr && jQuery.expr.filters) {\n    jQuery.expr.filters.hidden = function (elem) {\n      // Support: Opera <= 12.12\n      // Opera reports offsetWidths and offsetHeights less than zero on some elements\n      return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 || !jQuery.support.reliableHiddenOffsets && (elem.style && elem.style.display || jQuery.css(elem, \"display\")) === \"none\";\n    };\n\n    jQuery.expr.filters.visible = function (elem) {\n      return !jQuery.expr.filters.hidden(elem);\n    };\n  } // These hooks are used by animate to expand properties\n\n\n  jQuery.each({\n    margin: \"\",\n    padding: \"\",\n    border: \"Width\"\n  }, function (prefix, suffix) {\n    jQuery.cssHooks[prefix + suffix] = {\n      expand: function expand(value) {\n        var i = 0,\n            expanded = {},\n            // assumes a single number if not a string\n        parts = typeof value === \"string\" ? value.split(\" \") : [value];\n\n        for (; i < 4; i++) {\n          expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];\n        }\n\n        return expanded;\n      }\n    };\n\n    if (!rmargin.test(prefix)) {\n      jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;\n    }\n  });\n  var r20 = /%20/g,\n      rbracket = /\\[\\]$/,\n      rCRLF = /\\r?\\n/g,\n      rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n      rsubmittable = /^(?:input|select|textarea|keygen)/i;\n  jQuery.fn.extend({\n    serialize: function serialize() {\n      return jQuery.param(this.serializeArray());\n    },\n    serializeArray: function serializeArray() {\n      return this.map(function () {\n        // Can add propHook for \"elements\" to filter or add form elements\n        var elements = jQuery.prop(this, \"elements\");\n        return elements ? jQuery.makeArray(elements) : this;\n      }).filter(function () {\n        var type = this.type; // Use .is(\":disabled\") so that fieldset[disabled] works\n\n        return this.name && !jQuery(this).is(\":disabled\") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !manipulation_rcheckableType.test(type));\n      }).map(function (i, elem) {\n        var val = jQuery(this).val();\n        return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function (val) {\n          return {\n            name: elem.name,\n            value: val.replace(rCRLF, \"\\r\\n\")\n          };\n        }) : {\n          name: elem.name,\n          value: val.replace(rCRLF, \"\\r\\n\")\n        };\n      }).get();\n    }\n  }); //Serialize an array of form elements or a set of\n  //key/values into a query string\n\n  jQuery.param = function (a, traditional) {\n    var prefix,\n        s = [],\n        add = function add(key, value) {\n      // If value is a function, invoke it and return its value\n      value = jQuery.isFunction(value) ? value() : value == null ? \"\" : value;\n      s[s.length] = encodeURIComponent(key) + \"=\" + encodeURIComponent(value);\n    }; // Set traditional to true for jQuery <= 1.3.2 behavior.\n\n\n    if (traditional === undefined) {\n      traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;\n    } // If an array was passed in, assume that it is an array of form elements.\n\n\n    if (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {\n      // Serialize the form elements\n      jQuery.each(a, function () {\n        add(this.name, this.value);\n      });\n    } else {\n      // If traditional, encode the \"old\" way (the way 1.3.2 or older\n      // did it), otherwise encode params recursively.\n      for (prefix in a) {\n        buildParams(prefix, a[prefix], traditional, add);\n      }\n    } // Return the resulting serialization\n\n\n    return s.join(\"&\").replace(r20, \"+\");\n  };\n\n  function buildParams(prefix, obj, traditional, add) {\n    var name;\n\n    if (jQuery.isArray(obj)) {\n      // Serialize array item.\n      jQuery.each(obj, function (i, v) {\n        if (traditional || rbracket.test(prefix)) {\n          // Treat each array item as a scalar.\n          add(prefix, v);\n        } else {\n          // Item is non-scalar (array or object), encode its numeric index.\n          buildParams(prefix + \"[\" + (_typeof(v) === \"object\" ? i : \"\") + \"]\", v, traditional, add);\n        }\n      });\n    } else if (!traditional && jQuery.type(obj) === \"object\") {\n      // Serialize object item.\n      for (name in obj) {\n        buildParams(prefix + \"[\" + name + \"]\", obj[name], traditional, add);\n      }\n    } else {\n      // Serialize scalar item.\n      add(prefix, obj);\n    }\n  }\n\n  jQuery.each((\"blur focus focusin focusout load resize scroll unload click dblclick \" + \"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" + \"change select submit keydown keypress keyup error contextmenu\").split(\" \"), function (i, name) {\n    // Handle event binding\n    jQuery.fn[name] = function (data, fn) {\n      return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);\n    };\n  });\n\n  jQuery.fn.hover = function (fnOver, fnOut) {\n    return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);\n  };\n\n  var // Document location\n  ajaxLocParts,\n      ajaxLocation,\n      ajax_nonce = jQuery.now(),\n      ajax_rquery = /\\?/,\n      rhash = /#.*$/,\n      rts = /([?&])_=[^&]*/,\n      rheaders = /^(.*?):[ \\t]*([^\\r\\n]*)\\r?$/mg,\n      // IE leaves an \\r character at EOL\n  // #7653, #8125, #8152: local protocol detection\n  rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n      rnoContent = /^(?:GET|HEAD)$/,\n      rprotocol = /^\\/\\//,\n      rurl = /^([\\w.+-]+:)(?:\\/\\/([^\\/?#:]*)(?::(\\d+)|)|)/,\n      // Keep a copy of the old load method\n  _load = jQuery.fn.load,\n\n  /* Prefilters\n   * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n   * 2) These are called:\n   *    - BEFORE asking for a transport\n   *    - AFTER param serialization (s.data is a string if s.processData is true)\n   * 3) key is the dataType\n   * 4) the catchall symbol \"*\" can be used\n   * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n   */\n  prefilters = {},\n\n  /* Transports bindings\n   * 1) key is the dataType\n   * 2) the catchall symbol \"*\" can be used\n   * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n   */\n  transports = {},\n      // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n  allTypes = \"*/\".concat(\"*\"); // #8138, IE may throw an exception when accessing\n  // a field from window.location if document.domain has been set\n\n  try {\n    ajaxLocation = location.href;\n  } catch (e) {\n    // Use the href attribute of an A element\n    // since IE will modify it given document.location\n    ajaxLocation = document.createElement(\"a\");\n    ajaxLocation.href = \"\";\n    ajaxLocation = ajaxLocation.href;\n  } // Segment location into parts\n\n\n  ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || []; // Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\n\n  function addToPrefiltersOrTransports(structure) {\n    // dataTypeExpression is optional and defaults to \"*\"\n    return function (dataTypeExpression, func) {\n      if (typeof dataTypeExpression !== \"string\") {\n        func = dataTypeExpression;\n        dataTypeExpression = \"*\";\n      }\n\n      var dataType,\n          i = 0,\n          dataTypes = dataTypeExpression.toLowerCase().match(core_rnotwhite) || [];\n\n      if (jQuery.isFunction(func)) {\n        // For each dataType in the dataTypeExpression\n        while (dataType = dataTypes[i++]) {\n          // Prepend if requested\n          if (dataType[0] === \"+\") {\n            dataType = dataType.slice(1) || \"*\";\n            (structure[dataType] = structure[dataType] || []).unshift(func); // Otherwise append\n          } else {\n            (structure[dataType] = structure[dataType] || []).push(func);\n          }\n        }\n      }\n    };\n  } // Base inspection function for prefilters and transports\n\n\n  function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {\n    var inspected = {},\n        seekingTransport = structure === transports;\n\n    function inspect(dataType) {\n      var selected;\n      inspected[dataType] = true;\n      jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {\n        var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);\n\n        if (typeof dataTypeOrTransport === \"string\" && !seekingTransport && !inspected[dataTypeOrTransport]) {\n          options.dataTypes.unshift(dataTypeOrTransport);\n          inspect(dataTypeOrTransport);\n          return false;\n        } else if (seekingTransport) {\n          return !(selected = dataTypeOrTransport);\n        }\n      });\n      return selected;\n    }\n\n    return inspect(options.dataTypes[0]) || !inspected[\"*\"] && inspect(\"*\");\n  } // A special extend for ajax options\n  // that takes \"flat\" options (not to be deep extended)\n  // Fixes #9887\n\n\n  function ajaxExtend(target, src) {\n    var deep,\n        key,\n        flatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n    for (key in src) {\n      if (src[key] !== undefined) {\n        (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];\n      }\n    }\n\n    if (deep) {\n      jQuery.extend(true, target, deep);\n    }\n\n    return target;\n  }\n\n  jQuery.fn.load = function (url, params, callback) {\n    if (typeof url !== \"string\" && _load) {\n      return _load.apply(this, arguments);\n    }\n\n    var selector,\n        response,\n        type,\n        self = this,\n        off = url.indexOf(\" \");\n\n    if (off >= 0) {\n      selector = url.slice(off, url.length);\n      url = url.slice(0, off);\n    } // If it's a function\n\n\n    if (jQuery.isFunction(params)) {\n      // We assume that it's the callback\n      callback = params;\n      params = undefined; // Otherwise, build a param string\n    } else if (params && _typeof(params) === \"object\") {\n      type = \"POST\";\n    } // If we have elements to modify, make the request\n\n\n    if (self.length > 0) {\n      jQuery.ajax({\n        url: url,\n        // if \"type\" variable is undefined, then \"GET\" method will be used\n        type: type,\n        dataType: \"html\",\n        data: params\n      }).done(function (responseText) {\n        // Save response for use in complete callback\n        response = arguments;\n        self.html(selector ? // If a selector was specified, locate the right elements in a dummy div\n        // Exclude scripts to avoid IE 'Permission Denied' errors\n        jQuery(\"<div>\").append(jQuery.parseHTML(responseText)).find(selector) : // Otherwise use the full result\n        responseText);\n      }).complete(callback && function (jqXHR, status) {\n        self.each(callback, response || [jqXHR.responseText, status, jqXHR]);\n      });\n    }\n\n    return this;\n  }; // Attach a bunch of functions for handling common AJAX events\n\n\n  jQuery.each([\"ajaxStart\", \"ajaxStop\", \"ajaxComplete\", \"ajaxError\", \"ajaxSuccess\", \"ajaxSend\"], function (i, type) {\n    jQuery.fn[type] = function (fn) {\n      return this.on(type, fn);\n    };\n  });\n  jQuery.each([\"get\", \"post\"], function (i, method) {\n    jQuery[method] = function (url, data, callback, type) {\n      // shift arguments if data argument was omitted\n      if (jQuery.isFunction(data)) {\n        type = type || callback;\n        callback = data;\n        data = undefined;\n      }\n\n      return jQuery.ajax({\n        url: url,\n        type: method,\n        dataType: type,\n        data: data,\n        success: callback\n      });\n    };\n  });\n  jQuery.extend({\n    // Counter for holding the number of active queries\n    active: 0,\n    // Last-Modified header cache for next request\n    lastModified: {},\n    etag: {},\n    ajaxSettings: {\n      url: ajaxLocation,\n      type: \"GET\",\n      isLocal: rlocalProtocol.test(ajaxLocParts[1]),\n      global: true,\n      processData: true,\n      async: true,\n      contentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\n      /*\n      timeout: 0,\n      data: null,\n      dataType: null,\n      username: null,\n      password: null,\n      cache: null,\n      throws: false,\n      traditional: false,\n      headers: {},\n      */\n      accepts: {\n        \"*\": allTypes,\n        text: \"text/plain\",\n        html: \"text/html\",\n        xml: \"application/xml, text/xml\",\n        json: \"application/json, text/javascript\"\n      },\n      contents: {\n        xml: /xml/,\n        html: /html/,\n        json: /json/\n      },\n      responseFields: {\n        xml: \"responseXML\",\n        text: \"responseText\"\n      },\n      // Data converters\n      // Keys separate source (or catchall \"*\") and destination types with a single space\n      converters: {\n        // Convert anything to text\n        \"* text\": window.String,\n        // Text to html (true = no transformation)\n        \"text html\": true,\n        // Evaluate text as a json expression\n        \"text json\": jQuery.parseJSON,\n        // Parse text as xml\n        \"text xml\": jQuery.parseXML\n      },\n      // For options that shouldn't be deep extended:\n      // you can add your own custom options here if\n      // and when you create one that shouldn't be\n      // deep extended (see ajaxExtend)\n      flatOptions: {\n        url: true,\n        context: true\n      }\n    },\n    // Creates a full fledged settings object into target\n    // with both ajaxSettings and settings fields.\n    // If target is omitted, writes into ajaxSettings.\n    ajaxSetup: function ajaxSetup(target, settings) {\n      return settings ? // Building a settings object\n      ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : // Extending ajaxSettings\n      ajaxExtend(jQuery.ajaxSettings, target);\n    },\n    ajaxPrefilter: addToPrefiltersOrTransports(prefilters),\n    ajaxTransport: addToPrefiltersOrTransports(transports),\n    // Main method\n    ajax: function ajax(url, options) {\n      // If url is an object, simulate pre-1.5 signature\n      if (_typeof(url) === \"object\") {\n        options = url;\n        url = undefined;\n      } // Force options to be an object\n\n\n      options = options || {};\n\n      var // Cross-domain detection vars\n      parts,\n          // Loop variable\n      i,\n          // URL without anti-cache param\n      cacheURL,\n          // Response headers as string\n      responseHeadersString,\n          // timeout handle\n      timeoutTimer,\n          // To know if global events are to be dispatched\n      fireGlobals,\n          transport,\n          // Response headers\n      responseHeaders,\n          // Create the final options object\n      s = jQuery.ajaxSetup({}, options),\n          // Callbacks context\n      callbackContext = s.context || s,\n          // Context for global events is callbackContext if it is a DOM node or jQuery collection\n      globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,\n          // Deferreds\n      deferred = jQuery.Deferred(),\n          completeDeferred = jQuery.Callbacks(\"once memory\"),\n          // Status-dependent callbacks\n      _statusCode = s.statusCode || {},\n          // Headers (they are sent all at once)\n      requestHeaders = {},\n          requestHeadersNames = {},\n          // The jqXHR state\n      state = 0,\n          // Default abort message\n      strAbort = \"canceled\",\n          // Fake xhr\n      jqXHR = {\n        readyState: 0,\n        // Builds headers hashtable if needed\n        getResponseHeader: function getResponseHeader(key) {\n          var match;\n\n          if (state === 2) {\n            if (!responseHeaders) {\n              responseHeaders = {};\n\n              while (match = rheaders.exec(responseHeadersString)) {\n                responseHeaders[match[1].toLowerCase()] = match[2];\n              }\n            }\n\n            match = responseHeaders[key.toLowerCase()];\n          }\n\n          return match == null ? null : match;\n        },\n        // Raw string\n        getAllResponseHeaders: function getAllResponseHeaders() {\n          return state === 2 ? responseHeadersString : null;\n        },\n        // Caches the header\n        setRequestHeader: function setRequestHeader(name, value) {\n          var lname = name.toLowerCase();\n\n          if (!state) {\n            name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;\n            requestHeaders[name] = value;\n          }\n\n          return this;\n        },\n        // Overrides response content-type header\n        overrideMimeType: function overrideMimeType(type) {\n          if (!state) {\n            s.mimeType = type;\n          }\n\n          return this;\n        },\n        // Status-dependent callbacks\n        statusCode: function statusCode(map) {\n          var code;\n\n          if (map) {\n            if (state < 2) {\n              for (code in map) {\n                // Lazy-add the new callback in a way that preserves old ones\n                _statusCode[code] = [_statusCode[code], map[code]];\n              }\n            } else {\n              // Execute the appropriate callbacks\n              jqXHR.always(map[jqXHR.status]);\n            }\n          }\n\n          return this;\n        },\n        // Cancel the request\n        abort: function abort(statusText) {\n          var finalText = statusText || strAbort;\n\n          if (transport) {\n            transport.abort(finalText);\n          }\n\n          done(0, finalText);\n          return this;\n        }\n      }; // Attach deferreds\n\n\n      deferred.promise(jqXHR).complete = completeDeferred.add;\n      jqXHR.success = jqXHR.done;\n      jqXHR.error = jqXHR.fail; // Remove hash character (#7531: and string promotion)\n      // Add protocol if not provided (#5866: IE7 issue with protocol-less urls)\n      // Handle falsy url in the settings object (#10093: consistency with old signature)\n      // We also use the url parameter if available\n\n      s.url = ((url || s.url || ajaxLocation) + \"\").replace(rhash, \"\").replace(rprotocol, ajaxLocParts[1] + \"//\"); // Alias method option to type as per ticket #12004\n\n      s.type = options.method || options.type || s.method || s.type; // Extract dataTypes list\n\n      s.dataTypes = jQuery.trim(s.dataType || \"*\").toLowerCase().match(core_rnotwhite) || [\"\"]; // A cross-domain request is in order when we have a protocol:host:port mismatch\n\n      if (s.crossDomain == null) {\n        parts = rurl.exec(s.url.toLowerCase());\n        s.crossDomain = !!(parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || (parts[3] || (parts[1] === \"http:\" ? 80 : 443)) != (ajaxLocParts[3] || (ajaxLocParts[1] === \"http:\" ? 80 : 443))));\n      } // Convert data if not already a string\n\n\n      if (s.data && s.processData && typeof s.data !== \"string\") {\n        s.data = jQuery.param(s.data, s.traditional);\n      } // Apply prefilters\n\n\n      inspectPrefiltersOrTransports(prefilters, s, options, jqXHR); // If request was aborted inside a prefilter, stop there\n\n      if (state === 2) {\n        return jqXHR;\n      } // We can fire global events as of now if asked to\n\n\n      fireGlobals = s.global; // Watch for a new set of requests\n\n      if (fireGlobals && jQuery.active++ === 0) {\n        jQuery.event.trigger(\"ajaxStart\");\n      } // Uppercase the type\n\n\n      s.type = s.type.toUpperCase(); // Determine if request has content\n\n      s.hasContent = !rnoContent.test(s.type); // Save the URL in case we're toying with the If-Modified-Since\n      // and/or If-None-Match header later on\n\n      cacheURL = s.url; // More options handling for requests with no content\n\n      if (!s.hasContent) {\n        // If data is available, append data to url\n        if (s.data) {\n          cacheURL = s.url += (ajax_rquery.test(cacheURL) ? \"&\" : \"?\") + s.data; // #9682: remove data so that it's not used in an eventual retry\n\n          delete s.data;\n        } // Add anti-cache in url if needed\n\n\n        if (s.cache === false) {\n          s.url = rts.test(cacheURL) ? // If there is already a '_' parameter, set its value\n          cacheURL.replace(rts, \"$1_=\" + ajax_nonce++) : // Otherwise add one to the end\n          cacheURL + (ajax_rquery.test(cacheURL) ? \"&\" : \"?\") + \"_=\" + ajax_nonce++;\n        }\n      } // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\n\n      if (s.ifModified) {\n        if (jQuery.lastModified[cacheURL]) {\n          jqXHR.setRequestHeader(\"If-Modified-Since\", jQuery.lastModified[cacheURL]);\n        }\n\n        if (jQuery.etag[cacheURL]) {\n          jqXHR.setRequestHeader(\"If-None-Match\", jQuery.etag[cacheURL]);\n        }\n      } // Set the correct header, if data is being sent\n\n\n      if (s.data && s.hasContent && s.contentType !== false || options.contentType) {\n        jqXHR.setRequestHeader(\"Content-Type\", s.contentType);\n      } // Set the Accepts header for the server, depending on the dataType\n\n\n      jqXHR.setRequestHeader(\"Accept\", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\") : s.accepts[\"*\"]); // Check for headers option\n\n      for (i in s.headers) {\n        jqXHR.setRequestHeader(i, s.headers[i]);\n      } // Allow custom headers/mimetypes and early abort\n\n\n      if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {\n        // Abort if not done already and return\n        return jqXHR.abort();\n      } // aborting is no longer a cancellation\n\n\n      strAbort = \"abort\"; // Install callbacks on deferreds\n\n      for (i in {\n        success: 1,\n        error: 1,\n        complete: 1\n      }) {\n        jqXHR[i](s[i]);\n      } // Get transport\n\n\n      transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR); // If no transport, we auto-abort\n\n      if (!transport) {\n        done(-1, \"No Transport\");\n      } else {\n        jqXHR.readyState = 1; // Send global event\n\n        if (fireGlobals) {\n          globalEventContext.trigger(\"ajaxSend\", [jqXHR, s]);\n        } // Timeout\n\n\n        if (s.async && s.timeout > 0) {\n          timeoutTimer = setTimeout(function () {\n            jqXHR.abort(\"timeout\");\n          }, s.timeout);\n        }\n\n        try {\n          state = 1;\n          transport.send(requestHeaders, done);\n        } catch (e) {\n          // Propagate exception as error if not done\n          if (state < 2) {\n            done(-1, e); // Simply rethrow otherwise\n          } else {\n            throw e;\n          }\n        }\n      } // Callback for when everything is done\n\n\n      function done(status, nativeStatusText, responses, headers) {\n        var isSuccess,\n            success,\n            error,\n            response,\n            modified,\n            statusText = nativeStatusText; // Called once\n\n        if (state === 2) {\n          return;\n        } // State is \"done\" now\n\n\n        state = 2; // Clear timeout if it exists\n\n        if (timeoutTimer) {\n          clearTimeout(timeoutTimer);\n        } // Dereference transport for early garbage collection\n        // (no matter how long the jqXHR object will be used)\n\n\n        transport = undefined; // Cache response headers\n\n        responseHeadersString = headers || \"\"; // Set readyState\n\n        jqXHR.readyState = status > 0 ? 4 : 0; // Get response data\n\n        if (responses) {\n          response = ajaxHandleResponses(s, jqXHR, responses);\n        } // If successful, handle type chaining\n\n\n        if (status >= 200 && status < 300 || status === 304) {\n          // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n          if (s.ifModified) {\n            modified = jqXHR.getResponseHeader(\"Last-Modified\");\n\n            if (modified) {\n              jQuery.lastModified[cacheURL] = modified;\n            }\n\n            modified = jqXHR.getResponseHeader(\"etag\");\n\n            if (modified) {\n              jQuery.etag[cacheURL] = modified;\n            }\n          } // if no content\n\n\n          if (status === 204) {\n            isSuccess = true;\n            statusText = \"nocontent\"; // if not modified\n          } else if (status === 304) {\n            isSuccess = true;\n            statusText = \"notmodified\"; // If we have data, let's convert it\n          } else {\n            isSuccess = ajaxConvert(s, response);\n            statusText = isSuccess.state;\n            success = isSuccess.data;\n            error = isSuccess.error;\n            isSuccess = !error;\n          }\n        } else {\n          // We extract error from statusText\n          // then normalize statusText and status for non-aborts\n          error = statusText;\n\n          if (status || !statusText) {\n            statusText = \"error\";\n\n            if (status < 0) {\n              status = 0;\n            }\n          }\n        } // Set data for the fake xhr object\n\n\n        jqXHR.status = status;\n        jqXHR.statusText = (nativeStatusText || statusText) + \"\"; // Success/Error\n\n        if (isSuccess) {\n          deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);\n        } else {\n          deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);\n        } // Status-dependent callbacks\n\n\n        jqXHR.statusCode(_statusCode);\n        _statusCode = undefined;\n\n        if (fireGlobals) {\n          globalEventContext.trigger(isSuccess ? \"ajaxSuccess\" : \"ajaxError\", [jqXHR, s, isSuccess ? success : error]);\n        } // Complete\n\n\n        completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);\n\n        if (fireGlobals) {\n          globalEventContext.trigger(\"ajaxComplete\", [jqXHR, s]); // Handle the global AJAX counter\n\n          if (! --jQuery.active) {\n            jQuery.event.trigger(\"ajaxStop\");\n          }\n        }\n      }\n\n      return jqXHR;\n    },\n    getScript: function getScript(url, callback) {\n      return jQuery.get(url, undefined, callback, \"script\");\n    },\n    getJSON: function getJSON(url, data, callback) {\n      return jQuery.get(url, data, callback, \"json\");\n    }\n  });\n  /* Handles responses to an ajax request:\n   * - sets all responseXXX fields accordingly\n   * - finds the right dataType (mediates between content-type and expected dataType)\n   * - returns the corresponding response\n   */\n\n  function ajaxHandleResponses(s, jqXHR, responses) {\n    var firstDataType,\n        ct,\n        finalDataType,\n        type,\n        contents = s.contents,\n        dataTypes = s.dataTypes,\n        responseFields = s.responseFields; // Fill responseXXX fields\n\n    for (type in responseFields) {\n      if (type in responses) {\n        jqXHR[responseFields[type]] = responses[type];\n      }\n    } // Remove auto dataType and get content-type in the process\n\n\n    while (dataTypes[0] === \"*\") {\n      dataTypes.shift();\n\n      if (ct === undefined) {\n        ct = s.mimeType || jqXHR.getResponseHeader(\"Content-Type\");\n      }\n    } // Check if we're dealing with a known content-type\n\n\n    if (ct) {\n      for (type in contents) {\n        if (contents[type] && contents[type].test(ct)) {\n          dataTypes.unshift(type);\n          break;\n        }\n      }\n    } // Check to see if we have a response for the expected dataType\n\n\n    if (dataTypes[0] in responses) {\n      finalDataType = dataTypes[0];\n    } else {\n      // Try convertible dataTypes\n      for (type in responses) {\n        if (!dataTypes[0] || s.converters[type + \" \" + dataTypes[0]]) {\n          finalDataType = type;\n          break;\n        }\n\n        if (!firstDataType) {\n          firstDataType = type;\n        }\n      } // Or just use first one\n\n\n      finalDataType = finalDataType || firstDataType;\n    } // If we found a dataType\n    // We add the dataType to the list if needed\n    // and return the corresponding response\n\n\n    if (finalDataType) {\n      if (finalDataType !== dataTypes[0]) {\n        dataTypes.unshift(finalDataType);\n      }\n\n      return responses[finalDataType];\n    }\n  } // Chain conversions given the request and the original response\n\n\n  function ajaxConvert(s, response) {\n    var conv2,\n        current,\n        conv,\n        tmp,\n        converters = {},\n        i = 0,\n        // Work with a copy of dataTypes in case we need to modify it for conversion\n    dataTypes = s.dataTypes.slice(),\n        prev = dataTypes[0]; // Apply the dataFilter if provided\n\n    if (s.dataFilter) {\n      response = s.dataFilter(response, s.dataType);\n    } // Create converters map with lowercased keys\n\n\n    if (dataTypes[1]) {\n      for (conv in s.converters) {\n        converters[conv.toLowerCase()] = s.converters[conv];\n      }\n    } // Convert to each sequential dataType, tolerating list modification\n\n\n    for (; current = dataTypes[++i];) {\n      // There's only work to do if current dataType is non-auto\n      if (current !== \"*\") {\n        // Convert response if prev dataType is non-auto and differs from current\n        if (prev !== \"*\" && prev !== current) {\n          // Seek a direct converter\n          conv = converters[prev + \" \" + current] || converters[\"* \" + current]; // If none found, seek a pair\n\n          if (!conv) {\n            for (conv2 in converters) {\n              // If conv2 outputs current\n              tmp = conv2.split(\" \");\n\n              if (tmp[1] === current) {\n                // If prev can be converted to accepted input\n                conv = converters[prev + \" \" + tmp[0]] || converters[\"* \" + tmp[0]];\n\n                if (conv) {\n                  // Condense equivalence converters\n                  if (conv === true) {\n                    conv = converters[conv2]; // Otherwise, insert the intermediate dataType\n                  } else if (converters[conv2] !== true) {\n                    current = tmp[0];\n                    dataTypes.splice(i--, 0, current);\n                  }\n\n                  break;\n                }\n              }\n            }\n          } // Apply converter (if not an equivalence)\n\n\n          if (conv !== true) {\n            // Unless errors are allowed to bubble, catch and return them\n            if (conv && s[\"throws\"]) {\n              response = conv(response);\n            } else {\n              try {\n                response = conv(response);\n              } catch (e) {\n                return {\n                  state: \"parsererror\",\n                  error: conv ? e : \"No conversion from \" + prev + \" to \" + current\n                };\n              }\n            }\n          }\n        } // Update prev for next iteration\n\n\n        prev = current;\n      }\n    }\n\n    return {\n      state: \"success\",\n      data: response\n    };\n  } // Install script dataType\n\n\n  jQuery.ajaxSetup({\n    accepts: {\n      script: \"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript\"\n    },\n    contents: {\n      script: /(?:java|ecma)script/\n    },\n    converters: {\n      \"text script\": function textScript(text) {\n        jQuery.globalEval(text);\n        return text;\n      }\n    }\n  }); // Handle cache's special case and global\n\n  jQuery.ajaxPrefilter(\"script\", function (s) {\n    if (s.cache === undefined) {\n      s.cache = false;\n    }\n\n    if (s.crossDomain) {\n      s.type = \"GET\";\n      s.global = false;\n    }\n  }); // Bind script tag hack transport\n\n  jQuery.ajaxTransport(\"script\", function (s) {\n    // This transport only deals with cross domain requests\n    if (s.crossDomain) {\n      var script,\n          head = document.head || jQuery(\"head\")[0] || document.documentElement;\n      return {\n        send: function send(_, callback) {\n          script = document.createElement(\"script\");\n          script.async = true;\n\n          if (s.scriptCharset) {\n            script.charset = s.scriptCharset;\n          }\n\n          script.src = s.url; // Attach handlers for all browsers\n\n          script.onload = script.onreadystatechange = function (_, isAbort) {\n            if (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {\n              // Handle memory leak in IE\n              script.onload = script.onreadystatechange = null; // Remove the script\n\n              if (script.parentNode) {\n                script.parentNode.removeChild(script);\n              } // Dereference the script\n\n\n              script = null; // Callback if not abort\n\n              if (!isAbort) {\n                callback(200, \"success\");\n              }\n            }\n          }; // Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending\n          // Use native DOM manipulation to avoid our domManip AJAX trickery\n\n\n          head.insertBefore(script, head.firstChild);\n        },\n        abort: function abort() {\n          if (script) {\n            script.onload(undefined, true);\n          }\n        }\n      };\n    }\n  });\n  var oldCallbacks = [],\n      rjsonp = /(=)\\?(?=&|$)|\\?\\?/; // Default jsonp settings\n\n  jQuery.ajaxSetup({\n    jsonp: \"callback\",\n    jsonpCallback: function jsonpCallback() {\n      var callback = oldCallbacks.pop() || jQuery.expando + \"_\" + ajax_nonce++;\n      this[callback] = true;\n      return callback;\n    }\n  }); // Detect, normalize options and install callbacks for jsonp requests\n\n  jQuery.ajaxPrefilter(\"json jsonp\", function (s, originalSettings, jqXHR) {\n    var callbackName,\n        overwritten,\n        responseContainer,\n        jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? \"url\" : typeof s.data === \"string\" && !(s.contentType || \"\").indexOf(\"application/x-www-form-urlencoded\") && rjsonp.test(s.data) && \"data\"); // Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\n    if (jsonProp || s.dataTypes[0] === \"jsonp\") {\n      // Get callback name, remembering preexisting value associated with it\n      callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback; // Insert callback into url or form data\n\n      if (jsonProp) {\n        s[jsonProp] = s[jsonProp].replace(rjsonp, \"$1\" + callbackName);\n      } else if (s.jsonp !== false) {\n        s.url += (ajax_rquery.test(s.url) ? \"&\" : \"?\") + s.jsonp + \"=\" + callbackName;\n      } // Use data converter to retrieve json after script execution\n\n\n      s.converters[\"script json\"] = function () {\n        if (!responseContainer) {\n          jQuery.error(callbackName + \" was not called\");\n        }\n\n        return responseContainer[0];\n      }; // force json dataType\n\n\n      s.dataTypes[0] = \"json\"; // Install callback\n\n      overwritten = window[callbackName];\n\n      window[callbackName] = function () {\n        responseContainer = arguments;\n      }; // Clean-up function (fires after converters)\n\n\n      jqXHR.always(function () {\n        // Restore preexisting value\n        window[callbackName] = overwritten; // Save back as free\n\n        if (s[callbackName]) {\n          // make sure that re-using the options doesn't screw things around\n          s.jsonpCallback = originalSettings.jsonpCallback; // save the callback name for future use\n\n          oldCallbacks.push(callbackName);\n        } // Call if it was a function and we have a response\n\n\n        if (responseContainer && jQuery.isFunction(overwritten)) {\n          overwritten(responseContainer[0]);\n        }\n\n        responseContainer = overwritten = undefined;\n      }); // Delegate to script\n\n      return \"script\";\n    }\n  });\n\n  var xhrCallbacks,\n      xhrSupported,\n      xhrId = 0,\n      // #5280: Internet Explorer will keep connections alive if we don't abort on unload\n  xhrOnUnloadAbort = window.ActiveXObject && function () {\n    // Abort all pending requests\n    var key;\n\n    for (key in xhrCallbacks) {\n      xhrCallbacks[key](undefined, true);\n    }\n  }; // Functions to create xhrs\n\n\n  function createStandardXHR() {\n    try {\n      return new window.XMLHttpRequest();\n    } catch (e) {}\n  }\n\n  function createActiveXHR() {\n    try {\n      return new window.ActiveXObject(\"Microsoft.XMLHTTP\");\n    } catch (e) {}\n  } // Create the request object\n  // (This is still attached to ajaxSettings for backward compatibility)\n\n\n  jQuery.ajaxSettings.xhr = window.ActiveXObject ?\n  /* Microsoft failed to properly\n   * implement the XMLHttpRequest in IE7 (can't request local files),\n   * so we use the ActiveXObject when it is available\n   * Additionally XMLHttpRequest can be disabled in IE7/IE8 so\n   * we need a fallback.\n   */\n  function () {\n    return !this.isLocal && createStandardXHR() || createActiveXHR();\n  } : // For all other browsers, use the standard XMLHttpRequest object\n  createStandardXHR; // Determine support properties\n\n  xhrSupported = jQuery.ajaxSettings.xhr();\n  jQuery.support.cors = !!xhrSupported && \"withCredentials\" in xhrSupported;\n  xhrSupported = jQuery.support.ajax = !!xhrSupported; // Create transport if the browser can provide an xhr\n\n  if (xhrSupported) {\n    jQuery.ajaxTransport(function (s) {\n      // Cross domain only allowed if supported through XMLHttpRequest\n      if (!s.crossDomain || jQuery.support.cors) {\n        var _callback;\n\n        return {\n          send: function send(headers, complete) {\n            // Get a new xhr\n            var handle,\n                i,\n                xhr = s.xhr(); // Open the socket\n            // Passing null username, generates a login popup on Opera (#2865)\n\n            if (s.username) {\n              xhr.open(s.type, s.url, s.async, s.username, s.password);\n            } else {\n              xhr.open(s.type, s.url, s.async);\n            } // Apply custom fields if provided\n\n\n            if (s.xhrFields) {\n              for (i in s.xhrFields) {\n                xhr[i] = s.xhrFields[i];\n              }\n            } // Override mime type if needed\n\n\n            if (s.mimeType && xhr.overrideMimeType) {\n              xhr.overrideMimeType(s.mimeType);\n            } // X-Requested-With header\n            // For cross-domain requests, seeing as conditions for a preflight are\n            // akin to a jigsaw puzzle, we simply never set it to be sure.\n            // (it can always be set on a per-request basis or even using ajaxSetup)\n            // For same-domain requests, won't change header if already provided.\n\n\n            if (!s.crossDomain && !headers[\"X-Requested-With\"]) {\n              headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n            } // Need an extra try/catch for cross domain requests in Firefox 3\n\n\n            try {\n              for (i in headers) {\n                xhr.setRequestHeader(i, headers[i]);\n              }\n            } catch (err) {} // Do send the request\n            // This may raise an exception which is actually\n            // handled in jQuery.ajax (so no try/catch here)\n\n\n            xhr.send(s.hasContent && s.data || null); // Listener\n\n            _callback = function callback(_, isAbort) {\n              var status, responseHeaders, statusText, responses; // Firefox throws exceptions when accessing properties\n              // of an xhr when a network error occurred\n              // http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)\n\n              try {\n                // Was never called and is aborted or complete\n                if (_callback && (isAbort || xhr.readyState === 4)) {\n                  // Only called once\n                  _callback = undefined; // Do not keep as active anymore\n\n                  if (handle) {\n                    xhr.onreadystatechange = jQuery.noop;\n\n                    if (xhrOnUnloadAbort) {\n                      delete xhrCallbacks[handle];\n                    }\n                  } // If it's an abort\n\n\n                  if (isAbort) {\n                    // Abort it manually if needed\n                    if (xhr.readyState !== 4) {\n                      xhr.abort();\n                    }\n                  } else {\n                    responses = {};\n                    status = xhr.status;\n                    responseHeaders = xhr.getAllResponseHeaders(); // When requesting binary data, IE6-9 will throw an exception\n                    // on any attempt to access responseText (#11426)\n\n                    if (typeof xhr.responseText === \"string\") {\n                      responses.text = xhr.responseText;\n                    } // Firefox throws an exception when accessing\n                    // statusText for faulty cross-domain requests\n\n\n                    try {\n                      statusText = xhr.statusText;\n                    } catch (e) {\n                      // We normalize with Webkit giving an empty statusText\n                      statusText = \"\";\n                    } // Filter status for non standard behaviors\n                    // If the request is local and we have data: assume a success\n                    // (success with no data won't get notified, that's the best we\n                    // can do given current implementations)\n\n\n                    if (!status && s.isLocal && !s.crossDomain) {\n                      status = responses.text ? 200 : 404; // IE - #1450: sometimes returns 1223 when it should be 204\n                    } else if (status === 1223) {\n                      status = 204;\n                    }\n                  }\n                }\n              } catch (firefoxAccessException) {\n                if (!isAbort) {\n                  complete(-1, firefoxAccessException);\n                }\n              } // Call complete if needed\n\n\n              if (responses) {\n                complete(status, statusText, responses, responseHeaders);\n              }\n            };\n\n            if (!s.async) {\n              // if we're in sync mode we fire the callback\n              _callback();\n            } else if (xhr.readyState === 4) {\n              // (IE6 & IE7) if it's in cache and has been\n              // retrieved directly we need to fire the callback\n              setTimeout(_callback);\n            } else {\n              handle = ++xhrId;\n\n              if (xhrOnUnloadAbort) {\n                // Create the active xhrs callbacks list if needed\n                // and attach the unload handler\n                if (!xhrCallbacks) {\n                  xhrCallbacks = {};\n                  jQuery(window).unload(xhrOnUnloadAbort);\n                } // Add to list of active xhrs callbacks\n\n\n                xhrCallbacks[handle] = _callback;\n              }\n\n              xhr.onreadystatechange = _callback;\n            }\n          },\n          abort: function abort() {\n            if (_callback) {\n              _callback(undefined, true);\n            }\n          }\n        };\n      }\n    });\n  }\n\n  var fxNow,\n      timerId,\n      rfxtypes = /^(?:toggle|show|hide)$/,\n      rfxnum = new RegExp(\"^(?:([+-])=|)(\" + core_pnum + \")([a-z%]*)$\", \"i\"),\n      rrun = /queueHooks$/,\n      animationPrefilters = [defaultPrefilter],\n      tweeners = {\n    \"*\": [function (prop, value) {\n      var end,\n          unit,\n          tween = this.createTween(prop, value),\n          parts = rfxnum.exec(value),\n          target = tween.cur(),\n          start = +target || 0,\n          scale = 1,\n          maxIterations = 20;\n\n      if (parts) {\n        end = +parts[2];\n        unit = parts[3] || (jQuery.cssNumber[prop] ? \"\" : \"px\"); // We need to compute starting value\n\n        if (unit !== \"px\" && start) {\n          // Iteratively approximate from a nonzero starting point\n          // Prefer the current property, because this process will be trivial if it uses the same units\n          // Fallback to end or a simple constant\n          start = jQuery.css(tween.elem, prop, true) || end || 1;\n\n          do {\n            // If previous iteration zeroed out, double until we get *something*\n            // Use a string for doubling factor so we don't accidentally see scale as unchanged below\n            scale = scale || \".5\"; // Adjust and apply\n\n            start = start / scale;\n            jQuery.style(tween.elem, prop, start + unit); // Update scale, tolerating zero or NaN from tween.cur()\n            // And breaking the loop if scale is unchanged or perfect, or if we've just had enough\n          } while (scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations);\n        }\n\n        tween.unit = unit;\n        tween.start = start; // If a +=/-= token was provided, we're doing a relative animation\n\n        tween.end = parts[1] ? start + (parts[1] + 1) * end : end;\n      }\n\n      return tween;\n    }]\n  }; // Animations created synchronously will run synchronously\n\n  function createFxNow() {\n    setTimeout(function () {\n      fxNow = undefined;\n    });\n    return fxNow = jQuery.now();\n  }\n\n  function createTweens(animation, props) {\n    jQuery.each(props, function (prop, value) {\n      var collection = (tweeners[prop] || []).concat(tweeners[\"*\"]),\n          index = 0,\n          length = collection.length;\n\n      for (; index < length; index++) {\n        if (collection[index].call(animation, prop, value)) {\n          // we're done with this property\n          return;\n        }\n      }\n    });\n  }\n\n  function Animation(elem, properties, options) {\n    var result,\n        stopped,\n        index = 0,\n        length = animationPrefilters.length,\n        deferred = jQuery.Deferred().always(function () {\n      // don't match elem in the :animated selector\n      delete tick.elem;\n    }),\n        tick = function tick() {\n      if (stopped) {\n        return false;\n      }\n\n      var currentTime = fxNow || createFxNow(),\n          remaining = Math.max(0, animation.startTime + animation.duration - currentTime),\n          // archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)\n      temp = remaining / animation.duration || 0,\n          percent = 1 - temp,\n          index = 0,\n          length = animation.tweens.length;\n\n      for (; index < length; index++) {\n        animation.tweens[index].run(percent);\n      }\n\n      deferred.notifyWith(elem, [animation, percent, remaining]);\n\n      if (percent < 1 && length) {\n        return remaining;\n      } else {\n        deferred.resolveWith(elem, [animation]);\n        return false;\n      }\n    },\n        animation = deferred.promise({\n      elem: elem,\n      props: jQuery.extend({}, properties),\n      opts: jQuery.extend(true, {\n        specialEasing: {}\n      }, options),\n      originalProperties: properties,\n      originalOptions: options,\n      startTime: fxNow || createFxNow(),\n      duration: options.duration,\n      tweens: [],\n      createTween: function createTween(prop, end) {\n        var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);\n        animation.tweens.push(tween);\n        return tween;\n      },\n      stop: function stop(gotoEnd) {\n        var index = 0,\n            // if we are going to the end, we want to run all the tweens\n        // otherwise we skip this part\n        length = gotoEnd ? animation.tweens.length : 0;\n\n        if (stopped) {\n          return this;\n        }\n\n        stopped = true;\n\n        for (; index < length; index++) {\n          animation.tweens[index].run(1);\n        } // resolve when we played the last frame\n        // otherwise, reject\n\n\n        if (gotoEnd) {\n          deferred.resolveWith(elem, [animation, gotoEnd]);\n        } else {\n          deferred.rejectWith(elem, [animation, gotoEnd]);\n        }\n\n        return this;\n      }\n    }),\n        props = animation.props;\n\n    propFilter(props, animation.opts.specialEasing);\n\n    for (; index < length; index++) {\n      result = animationPrefilters[index].call(animation, elem, props, animation.opts);\n\n      if (result) {\n        return result;\n      }\n    }\n\n    createTweens(animation, props);\n\n    if (jQuery.isFunction(animation.opts.start)) {\n      animation.opts.start.call(elem, animation);\n    }\n\n    jQuery.fx.timer(jQuery.extend(tick, {\n      elem: elem,\n      anim: animation,\n      queue: animation.opts.queue\n    })); // attach callbacks from options\n\n    return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);\n  }\n\n  function propFilter(props, specialEasing) {\n    var value, name, index, easing, hooks; // camelCase, specialEasing and expand cssHook pass\n\n    for (index in props) {\n      name = jQuery.camelCase(index);\n      easing = specialEasing[name];\n      value = props[index];\n\n      if (jQuery.isArray(value)) {\n        easing = value[1];\n        value = props[index] = value[0];\n      }\n\n      if (index !== name) {\n        props[name] = value;\n        delete props[index];\n      }\n\n      hooks = jQuery.cssHooks[name];\n\n      if (hooks && \"expand\" in hooks) {\n        value = hooks.expand(value);\n        delete props[name]; // not quite $.extend, this wont overwrite keys already present.\n        // also - reusing 'index' from above because we have the correct \"name\"\n\n        for (index in value) {\n          if (!(index in props)) {\n            props[index] = value[index];\n            specialEasing[index] = easing;\n          }\n        }\n      } else {\n        specialEasing[name] = easing;\n      }\n    }\n  }\n\n  jQuery.Animation = jQuery.extend(Animation, {\n    tweener: function tweener(props, callback) {\n      if (jQuery.isFunction(props)) {\n        callback = props;\n        props = [\"*\"];\n      } else {\n        props = props.split(\" \");\n      }\n\n      var prop,\n          index = 0,\n          length = props.length;\n\n      for (; index < length; index++) {\n        prop = props[index];\n        tweeners[prop] = tweeners[prop] || [];\n        tweeners[prop].unshift(callback);\n      }\n    },\n    prefilter: function prefilter(callback, prepend) {\n      if (prepend) {\n        animationPrefilters.unshift(callback);\n      } else {\n        animationPrefilters.push(callback);\n      }\n    }\n  });\n\n  function defaultPrefilter(elem, props, opts) {\n    /*jshint validthis:true */\n    var prop,\n        index,\n        length,\n        value,\n        dataShow,\n        toggle,\n        tween,\n        hooks,\n        oldfire,\n        anim = this,\n        style = elem.style,\n        orig = {},\n        handled = [],\n        hidden = elem.nodeType && isHidden(elem); // handle queue: false promises\n\n    if (!opts.queue) {\n      hooks = jQuery._queueHooks(elem, \"fx\");\n\n      if (hooks.unqueued == null) {\n        hooks.unqueued = 0;\n        oldfire = hooks.empty.fire;\n\n        hooks.empty.fire = function () {\n          if (!hooks.unqueued) {\n            oldfire();\n          }\n        };\n      }\n\n      hooks.unqueued++;\n      anim.always(function () {\n        // doing this makes sure that the complete handler will be called\n        // before this completes\n        anim.always(function () {\n          hooks.unqueued--;\n\n          if (!jQuery.queue(elem, \"fx\").length) {\n            hooks.empty.fire();\n          }\n        });\n      });\n    } // height/width overflow pass\n\n\n    if (elem.nodeType === 1 && (\"height\" in props || \"width\" in props)) {\n      // Make sure that nothing sneaks out\n      // Record all 3 overflow attributes because IE does not\n      // change the overflow attribute when overflowX and\n      // overflowY are set to the same value\n      opts.overflow = [style.overflow, style.overflowX, style.overflowY]; // Set display property to inline-block for height/width\n      // animations on inline elements that are having width/height animated\n\n      if (jQuery.css(elem, \"display\") === \"inline\" && jQuery.css(elem, \"float\") === \"none\") {\n        // inline-level elements accept inline-block;\n        // block-level elements need to be inline with layout\n        if (!jQuery.support.inlineBlockNeedsLayout || css_defaultDisplay(elem.nodeName) === \"inline\") {\n          style.display = \"inline-block\";\n        } else {\n          style.zoom = 1;\n        }\n      }\n    }\n\n    if (opts.overflow) {\n      style.overflow = \"hidden\";\n\n      if (!jQuery.support.shrinkWrapBlocks) {\n        anim.always(function () {\n          style.overflow = opts.overflow[0];\n          style.overflowX = opts.overflow[1];\n          style.overflowY = opts.overflow[2];\n        });\n      }\n    } // show/hide pass\n\n\n    for (index in props) {\n      value = props[index];\n\n      if (rfxtypes.exec(value)) {\n        delete props[index];\n        toggle = toggle || value === \"toggle\";\n\n        if (value === (hidden ? \"hide\" : \"show\")) {\n          continue;\n        }\n\n        handled.push(index);\n      }\n    }\n\n    length = handled.length;\n\n    if (length) {\n      dataShow = jQuery._data(elem, \"fxshow\") || jQuery._data(elem, \"fxshow\", {});\n\n      if (\"hidden\" in dataShow) {\n        hidden = dataShow.hidden;\n      } // store state if its toggle - enables .stop().toggle() to \"reverse\"\n\n\n      if (toggle) {\n        dataShow.hidden = !hidden;\n      }\n\n      if (hidden) {\n        jQuery(elem).show();\n      } else {\n        anim.done(function () {\n          jQuery(elem).hide();\n        });\n      }\n\n      anim.done(function () {\n        var prop;\n\n        jQuery._removeData(elem, \"fxshow\");\n\n        for (prop in orig) {\n          jQuery.style(elem, prop, orig[prop]);\n        }\n      });\n\n      for (index = 0; index < length; index++) {\n        prop = handled[index];\n        tween = anim.createTween(prop, hidden ? dataShow[prop] : 0);\n        orig[prop] = dataShow[prop] || jQuery.style(elem, prop);\n\n        if (!(prop in dataShow)) {\n          dataShow[prop] = tween.start;\n\n          if (hidden) {\n            tween.end = tween.start;\n            tween.start = prop === \"width\" || prop === \"height\" ? 1 : 0;\n          }\n        }\n      }\n    }\n  }\n\n  function Tween(elem, options, prop, end, easing) {\n    return new Tween.prototype.init(elem, options, prop, end, easing);\n  }\n\n  jQuery.Tween = Tween;\n  Tween.prototype = {\n    constructor: Tween,\n    init: function init(elem, options, prop, end, easing, unit) {\n      this.elem = elem;\n      this.prop = prop;\n      this.easing = easing || \"swing\";\n      this.options = options;\n      this.start = this.now = this.cur();\n      this.end = end;\n      this.unit = unit || (jQuery.cssNumber[prop] ? \"\" : \"px\");\n    },\n    cur: function cur() {\n      var hooks = Tween.propHooks[this.prop];\n      return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);\n    },\n    run: function run(percent) {\n      var eased,\n          hooks = Tween.propHooks[this.prop];\n\n      if (this.options.duration) {\n        this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);\n      } else {\n        this.pos = eased = percent;\n      }\n\n      this.now = (this.end - this.start) * eased + this.start;\n\n      if (this.options.step) {\n        this.options.step.call(this.elem, this.now, this);\n      }\n\n      if (hooks && hooks.set) {\n        hooks.set(this);\n      } else {\n        Tween.propHooks._default.set(this);\n      }\n\n      return this;\n    }\n  };\n  Tween.prototype.init.prototype = Tween.prototype;\n  Tween.propHooks = {\n    _default: {\n      get: function get(tween) {\n        var result;\n\n        if (tween.elem[tween.prop] != null && (!tween.elem.style || tween.elem.style[tween.prop] == null)) {\n          return tween.elem[tween.prop];\n        } // passing an empty string as a 3rd parameter to .css will automatically\n        // attempt a parseFloat and fallback to a string if the parse fails\n        // so, simple values such as \"10px\" are parsed to Float.\n        // complex values such as \"rotate(1rad)\" are returned as is.\n\n\n        result = jQuery.css(tween.elem, tween.prop, \"\"); // Empty strings, null, undefined and \"auto\" are converted to 0.\n\n        return !result || result === \"auto\" ? 0 : result;\n      },\n      set: function set(tween) {\n        // use step hook for back compat - use cssHook if its there - use .style if its\n        // available and use plain properties where available\n        if (jQuery.fx.step[tween.prop]) {\n          jQuery.fx.step[tween.prop](tween);\n        } else if (tween.elem.style && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {\n          jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);\n        } else {\n          tween.elem[tween.prop] = tween.now;\n        }\n      }\n    }\n  }; // Remove in 2.0 - this supports IE8's panic based approach\n  // to setting things on disconnected nodes\n\n  Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n    set: function set(tween) {\n      if (tween.elem.nodeType && tween.elem.parentNode) {\n        tween.elem[tween.prop] = tween.now;\n      }\n    }\n  };\n  jQuery.each([\"toggle\", \"show\", \"hide\"], function (i, name) {\n    var cssFn = jQuery.fn[name];\n\n    jQuery.fn[name] = function (speed, easing, callback) {\n      return speed == null || typeof speed === \"boolean\" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);\n    };\n  });\n  jQuery.fn.extend({\n    fadeTo: function fadeTo(speed, to, easing, callback) {\n      // show any hidden elements after setting opacity to 0\n      return this.filter(isHidden).css(\"opacity\", 0).show() // animate to the value specified\n      .end().animate({\n        opacity: to\n      }, speed, easing, callback);\n    },\n    animate: function animate(prop, speed, easing, callback) {\n      var empty = jQuery.isEmptyObject(prop),\n          optall = jQuery.speed(speed, easing, callback),\n          doAnimation = function doAnimation() {\n        // Operate on a copy of prop so per-property easing won't be lost\n        var anim = Animation(this, jQuery.extend({}, prop), optall);\n\n        doAnimation.finish = function () {\n          anim.stop(true);\n        }; // Empty animations, or finishing resolves immediately\n\n\n        if (empty || jQuery._data(this, \"finish\")) {\n          anim.stop(true);\n        }\n      };\n\n      doAnimation.finish = doAnimation;\n      return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);\n    },\n    stop: function stop(type, clearQueue, gotoEnd) {\n      var stopQueue = function stopQueue(hooks) {\n        var stop = hooks.stop;\n        delete hooks.stop;\n        stop(gotoEnd);\n      };\n\n      if (typeof type !== \"string\") {\n        gotoEnd = clearQueue;\n        clearQueue = type;\n        type = undefined;\n      }\n\n      if (clearQueue && type !== false) {\n        this.queue(type || \"fx\", []);\n      }\n\n      return this.each(function () {\n        var dequeue = true,\n            index = type != null && type + \"queueHooks\",\n            timers = jQuery.timers,\n            data = jQuery._data(this);\n\n        if (index) {\n          if (data[index] && data[index].stop) {\n            stopQueue(data[index]);\n          }\n        } else {\n          for (index in data) {\n            if (data[index] && data[index].stop && rrun.test(index)) {\n              stopQueue(data[index]);\n            }\n          }\n        }\n\n        for (index = timers.length; index--;) {\n          if (timers[index].elem === this && (type == null || timers[index].queue === type)) {\n            timers[index].anim.stop(gotoEnd);\n            dequeue = false;\n            timers.splice(index, 1);\n          }\n        } // start the next in the queue if the last step wasn't forced\n        // timers currently will call their complete callbacks, which will dequeue\n        // but only if they were gotoEnd\n\n\n        if (dequeue || !gotoEnd) {\n          jQuery.dequeue(this, type);\n        }\n      });\n    },\n    finish: function finish(type) {\n      if (type !== false) {\n        type = type || \"fx\";\n      }\n\n      return this.each(function () {\n        var index,\n            data = jQuery._data(this),\n            queue = data[type + \"queue\"],\n            hooks = data[type + \"queueHooks\"],\n            timers = jQuery.timers,\n            length = queue ? queue.length : 0; // enable finishing flag on private data\n\n\n        data.finish = true; // empty the queue first\n\n        jQuery.queue(this, type, []);\n\n        if (hooks && hooks.cur && hooks.cur.finish) {\n          hooks.cur.finish.call(this);\n        } // look for any active animations, and finish them\n\n\n        for (index = timers.length; index--;) {\n          if (timers[index].elem === this && timers[index].queue === type) {\n            timers[index].anim.stop(true);\n            timers.splice(index, 1);\n          }\n        } // look for any animations in the old queue and finish them\n\n\n        for (index = 0; index < length; index++) {\n          if (queue[index] && queue[index].finish) {\n            queue[index].finish.call(this);\n          }\n        } // turn off finishing flag\n\n\n        delete data.finish;\n      });\n    }\n  }); // Generate parameters to create a standard animation\n\n  function genFx(type, includeWidth) {\n    var which,\n        attrs = {\n      height: type\n    },\n        i = 0; // if we include width, step value is 1 to do all cssExpand values,\n    // if we don't include width, step value is 2 to skip over Left and Right\n\n    includeWidth = includeWidth ? 1 : 0;\n\n    for (; i < 4; i += 2 - includeWidth) {\n      which = cssExpand[i];\n      attrs[\"margin\" + which] = attrs[\"padding\" + which] = type;\n    }\n\n    if (includeWidth) {\n      attrs.opacity = attrs.width = type;\n    }\n\n    return attrs;\n  } // Generate shortcuts for custom animations\n\n\n  jQuery.each({\n    slideDown: genFx(\"show\"),\n    slideUp: genFx(\"hide\"),\n    slideToggle: genFx(\"toggle\"),\n    fadeIn: {\n      opacity: \"show\"\n    },\n    fadeOut: {\n      opacity: \"hide\"\n    },\n    fadeToggle: {\n      opacity: \"toggle\"\n    }\n  }, function (name, props) {\n    jQuery.fn[name] = function (speed, easing, callback) {\n      return this.animate(props, speed, easing, callback);\n    };\n  });\n\n  jQuery.speed = function (speed, easing, fn) {\n    var opt = speed && _typeof(speed) === \"object\" ? jQuery.extend({}, speed) : {\n      complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,\n      duration: speed,\n      easing: fn && easing || easing && !jQuery.isFunction(easing) && easing\n    };\n    opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === \"number\" ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default; // normalize opt.queue - true/undefined/null -> \"fx\"\n\n    if (opt.queue == null || opt.queue === true) {\n      opt.queue = \"fx\";\n    } // Queueing\n\n\n    opt.old = opt.complete;\n\n    opt.complete = function () {\n      if (jQuery.isFunction(opt.old)) {\n        opt.old.call(this);\n      }\n\n      if (opt.queue) {\n        jQuery.dequeue(this, opt.queue);\n      }\n    };\n\n    return opt;\n  };\n\n  jQuery.easing = {\n    linear: function linear(p) {\n      return p;\n    },\n    swing: function swing(p) {\n      return 0.5 - Math.cos(p * Math.PI) / 2;\n    }\n  };\n  jQuery.timers = [];\n  jQuery.fx = Tween.prototype.init;\n\n  jQuery.fx.tick = function () {\n    var timer,\n        timers = jQuery.timers,\n        i = 0;\n    fxNow = jQuery.now();\n\n    for (; i < timers.length; i++) {\n      timer = timers[i]; // Checks the timer has not already been removed\n\n      if (!timer() && timers[i] === timer) {\n        timers.splice(i--, 1);\n      }\n    }\n\n    if (!timers.length) {\n      jQuery.fx.stop();\n    }\n\n    fxNow = undefined;\n  };\n\n  jQuery.fx.timer = function (timer) {\n    if (timer() && jQuery.timers.push(timer)) {\n      jQuery.fx.start();\n    }\n  };\n\n  jQuery.fx.interval = 13;\n\n  jQuery.fx.start = function () {\n    if (!timerId) {\n      timerId = setInterval(jQuery.fx.tick, jQuery.fx.interval);\n    }\n  };\n\n  jQuery.fx.stop = function () {\n    clearInterval(timerId);\n    timerId = null;\n  };\n\n  jQuery.fx.speeds = {\n    slow: 600,\n    fast: 200,\n    // Default speed\n    _default: 400\n  }; // Back Compat <1.8 extension point\n\n  jQuery.fx.step = {};\n\n  if (jQuery.expr && jQuery.expr.filters) {\n    jQuery.expr.filters.animated = function (elem) {\n      return jQuery.grep(jQuery.timers, function (fn) {\n        return elem === fn.elem;\n      }).length;\n    };\n  }\n\n  jQuery.fn.offset = function (options) {\n    if (arguments.length) {\n      return options === undefined ? this : this.each(function (i) {\n        jQuery.offset.setOffset(this, options, i);\n      });\n    }\n\n    var docElem,\n        win,\n        box = {\n      top: 0,\n      left: 0\n    },\n        elem = this[0],\n        doc = elem && elem.ownerDocument;\n\n    if (!doc) {\n      return;\n    }\n\n    docElem = doc.documentElement; // Make sure it's not a disconnected DOM node\n\n    if (!jQuery.contains(docElem, elem)) {\n      return box;\n    } // If we don't have gBCR, just use 0,0 rather than error\n    // BlackBerry 5, iOS 3 (original iPhone)\n\n\n    if (_typeof(elem.getBoundingClientRect) !== core_strundefined) {\n      box = elem.getBoundingClientRect();\n    }\n\n    win = getWindow(doc);\n    return {\n      top: box.top + (win.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0),\n      left: box.left + (win.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0)\n    };\n  };\n\n  jQuery.offset = {\n    setOffset: function setOffset(elem, options, i) {\n      var position = jQuery.css(elem, \"position\"); // set position first, in-case top/left are set even on static elem\n\n      if (position === \"static\") {\n        elem.style.position = \"relative\";\n      }\n\n      var curElem = jQuery(elem),\n          curOffset = curElem.offset(),\n          curCSSTop = jQuery.css(elem, \"top\"),\n          curCSSLeft = jQuery.css(elem, \"left\"),\n          calculatePosition = (position === \"absolute\" || position === \"fixed\") && jQuery.inArray(\"auto\", [curCSSTop, curCSSLeft]) > -1,\n          props = {},\n          curPosition = {},\n          curTop,\n          curLeft; // need to be able to calculate position if either top or left is auto and position is either absolute or fixed\n\n      if (calculatePosition) {\n        curPosition = curElem.position();\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (jQuery.isFunction(options)) {\n        options = options.call(elem, i, curOffset);\n      }\n\n      if (options.top != null) {\n        props.top = options.top - curOffset.top + curTop;\n      }\n\n      if (options.left != null) {\n        props.left = options.left - curOffset.left + curLeft;\n      }\n\n      if (\"using\" in options) {\n        options.using.call(elem, props);\n      } else {\n        curElem.css(props);\n      }\n    }\n  };\n  jQuery.fn.extend({\n    position: function position() {\n      if (!this[0]) {\n        return;\n      }\n\n      var offsetParent,\n          offset,\n          parentOffset = {\n        top: 0,\n        left: 0\n      },\n          elem = this[0]; // fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n\n      if (jQuery.css(elem, \"position\") === \"fixed\") {\n        // we assume that getBoundingClientRect is available when computed position is fixed\n        offset = elem.getBoundingClientRect();\n      } else {\n        // Get *real* offsetParent\n        offsetParent = this.offsetParent(); // Get correct offsets\n\n        offset = this.offset();\n\n        if (!jQuery.nodeName(offsetParent[0], \"html\")) {\n          parentOffset = offsetParent.offset();\n        } // Add offsetParent borders\n\n\n        parentOffset.top += jQuery.css(offsetParent[0], \"borderTopWidth\", true);\n        parentOffset.left += jQuery.css(offsetParent[0], \"borderLeftWidth\", true);\n      } // Subtract parent offsets and element margins\n      // note: when an element has margin: auto the offsetLeft and marginLeft\n      // are the same in Safari causing offset.left to incorrectly be 0\n\n\n      return {\n        top: offset.top - parentOffset.top - jQuery.css(elem, \"marginTop\", true),\n        left: offset.left - parentOffset.left - jQuery.css(elem, \"marginLeft\", true)\n      };\n    },\n    offsetParent: function offsetParent() {\n      return this.map(function () {\n        var offsetParent = this.offsetParent || document.documentElement;\n\n        while (offsetParent && !jQuery.nodeName(offsetParent, \"html\") && jQuery.css(offsetParent, \"position\") === \"static\") {\n          offsetParent = offsetParent.offsetParent;\n        }\n\n        return offsetParent || document.documentElement;\n      });\n    }\n  }); // Create scrollLeft and scrollTop methods\n\n  jQuery.each({\n    scrollLeft: \"pageXOffset\",\n    scrollTop: \"pageYOffset\"\n  }, function (method, prop) {\n    var top = /Y/.test(prop);\n\n    jQuery.fn[method] = function (val) {\n      return jQuery.access(this, function (elem, method, val) {\n        var win = getWindow(elem);\n\n        if (val === undefined) {\n          return win ? prop in win ? win[prop] : win.document.documentElement[method] : elem[method];\n        }\n\n        if (win) {\n          win.scrollTo(!top ? val : jQuery(win).scrollLeft(), top ? val : jQuery(win).scrollTop());\n        } else {\n          elem[method] = val;\n        }\n      }, method, val, arguments.length, null);\n    };\n  });\n\n  function getWindow(elem) {\n    return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 ? elem.defaultView || elem.parentWindow : false;\n  } // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\n\n\n  jQuery.each({\n    Height: \"height\",\n    Width: \"width\"\n  }, function (name, type) {\n    jQuery.each({\n      padding: \"inner\" + name,\n      content: type,\n      \"\": \"outer\" + name\n    }, function (defaultExtra, funcName) {\n      // margin is only for outerHeight, outerWidth\n      jQuery.fn[funcName] = function (margin, value) {\n        var chainable = arguments.length && (defaultExtra || typeof margin !== \"boolean\"),\n            extra = defaultExtra || (margin === true || value === true ? \"margin\" : \"border\");\n        return jQuery.access(this, function (elem, type, value) {\n          var doc;\n\n          if (jQuery.isWindow(elem)) {\n            // As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there\n            // isn't a whole lot we can do. See pull request at this URL for discussion:\n            // https://github.com/jquery/jquery/pull/764\n            return elem.document.documentElement[\"client\" + name];\n          } // Get document width or height\n\n\n          if (elem.nodeType === 9) {\n            doc = elem.documentElement; // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest\n            // unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.\n\n            return Math.max(elem.body[\"scroll\" + name], doc[\"scroll\" + name], elem.body[\"offset\" + name], doc[\"offset\" + name], doc[\"client\" + name]);\n          }\n\n          return value === undefined ? // Get width or height on the element, requesting but not forcing parseFloat\n          jQuery.css(elem, type, extra) : // Set width or height on the element\n          jQuery.style(elem, type, value, extra);\n        }, type, chainable ? margin : undefined, chainable, null);\n      };\n    });\n  }); // Limit scope pollution from any deprecated API\n  // (function() {\n  // })();\n  // Expose jQuery to the global object\n\n  window.jQuery = window.$ = jQuery; // Expose jQuery as an AMD module, but only for AMD loaders that\n  // understand the issues with loading multiple versions of jQuery\n  // in a page that all might call define(). The loader will indicate\n  // they have special allowances for multiple jQuery versions by\n  // specifying define.amd.jQuery = true. Register as a named module,\n  // since jQuery can be concatenated with other files that may use define,\n  // but not use a proper concatenation script that understands anonymous\n  // AMD modules. A named AMD is safest and most robust way to register.\n  // Lowercase jquery is used because AMD module names are derived from\n  // file names, and jQuery is normally delivered in a lowercase file name.\n  // Do this after creating the global so that if an AMD module wants to call\n  // noConflict to hide this version of jQuery, it will work.\n\n  if ( true && __webpack_require__.amdO.jQuery) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return jQuery;\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n})(window);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/jquery.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/amd options */
/******/ 	(() => {
/******/ 		__webpack_require__.amdO = {};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/js/jquery.js");
/******/ 	
/******/ })()
;